'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const codes = {
  GRAPHQL_PARSE_FAILED: null,
  GRAPHQL_VALIDATION_FAILED: null,
  INTERNAL_SERVER_ERROR: null,
  UNAUTHENTICATED: null,
  FORBIDDEN: null,
  NOT_FOUND: null,
  CUSTOMER_TOKEN_NOT_FOUND: null,
  CUSTOMER_TOKEN_EXPIRED: null,
  SESSION_NOT_FOUND: null,
  BAD_USER_INPUT: null
};
Object.keys(codes).forEach(key => {
  codes[key] = key;
});

// that does not import whole `graphql` package resulting in much smaller bundle size
// https://github.com/apollographql/apollo-server/blob/master/packages/apollo-server-errors/src/index.ts

class FalconError extends Error {
  constructor(message, code) {
    super(message); // if no name provided, use the default. defineProperty ensures that it stays non-enumerable

    if (!this.name) {
      Object.defineProperty(this, 'name', {
        value: 'FalconError'
      });
    }

    if (code) {
      Object.defineProperty(this, 'extensions', {
        value: {
          code
        }
      });
    }
  }

}
class AuthenticationError extends FalconError {
  /**
   * @param {string} message
   * @param {string | undefined} code optional error code, default is `UNAUTHENTICATED`
   */
  constructor(message, code) {
    super(message, code || codes.UNAUTHENTICATED);
    Object.defineProperty(this, 'name', {
      value: 'AuthenticationError'
    });
  }

}
class ForbiddenError extends FalconError {
  /**
   * @param {string} [message]
   */
  constructor(message = 'Access is forbidden') {
    super(message, codes.FORBIDDEN);
    Object.defineProperty(this, 'name', {
      value: 'ForbiddenError'
    });
  }

}
class EntityNotFoundError extends FalconError {
  /**
   * @param {string} [message]
   */
  constructor(message = 'Entity not found') {
    super(message, codes.NOT_FOUND);
    Object.defineProperty(this, 'name', {
      value: 'EntityNotFoundError'
    });
  }

}
/**
 * @example
 * ```javascript
 *  throw new UserInputError(e.message, {
 *    errors: {
 *      email: { code: 'email_already_taken', message: e.message }
 *    }
 *  });
 * ```
 */

class UserInputError extends FalconError {
  /**
   * @param {string} message
   * @param {object} [properties]
   */
  constructor(message, properties) {
    super(message, codes.BAD_USER_INPUT, properties);
    Object.defineProperty(this, 'name', {
      value: 'UserInputError'
    });
  }

}

exports.AuthenticationError = AuthenticationError;
exports.EntityNotFoundError = EntityNotFoundError;
exports.FalconError = FalconError;
exports.ForbiddenError = ForbiddenError;
exports.UserInputError = UserInputError;
exports.codes = codes;
//# sourceMappingURL=falcon-errors.cjs.js.map
