'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var falconFrontKit = require('@deity/falcon-front-kit');
var falconUi = require('@deity/falcon-ui');
var falconI18n = require('@deity/falcon-i18n');
var ReactCreditCardInput = _interopDefault(require('react-credit-card-input'));
var reactRouterDom = require('react-router-dom');
var PropTypes = _interopDefault(require('prop-types'));
var falconData = require('@deity/falcon-data');
var formik = require('formik');
var falconShopData = require('@deity/falcon-shop-data');
var MediaQuery = _interopDefault(require('react-responsive'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

const toGridTemplate = items => {
  const columnTemplate = items.shift();

  if (!columnTemplate) {
    return '';
  }

  const gridAreas = items.map(item => {
    const rowTemplate = item.length > columnTemplate.length ? item.pop() : '';
    return `"${item.join(' ')}" ${rowTemplate}`;
  }).join(' ');
  return `${gridAreas} / ${columnTemplate.join(' ')}`;
};
const prettyScrollbars = theme => ({
  overflowY: ['auto', 'overlay'],
  WebkitOverflowScrolling: 'touch',
  paddingRight: 10,
  marginRight: 6,
  '::-webkit-scrollbar': {
    width: 3,
    backgroundColor: theme.colors.secondaryLight,
    borderRadius: theme.borderRadius.medium
  },
  '::-webkit-scrollbar-thumb': {
    borderRadius: theme.borderRadius.medium,
    backgroundColor: theme.colors.secondaryDark
  }
});
const noScrollbars = () => ({
  overflow: ['auto', 'overlay'],
  WebkitOverflowScrolling: 'touch',
  '::-webkit-scrollbar': {
    display: 'none'
  },
  msOverflowStyle: 'none',
  scrollbarWidth: 'none'
});
const lineClamp = numLines => ({
  display: '-webkit-box',
  WebkitBoxOrient: 'vertical',
  overflow: 'hidden',
  WebkitLineClamp: numLines
});
const placeholder = styles => ({
  '::-webkit-input-placeholder': styles,
  '::-moz-placeholder': styles,
  ':-ms-input-placeholder`': styles,
  '::-ms-input-placeholder`': styles
});

const FormFieldArea = {
  label: 'label',
  input: 'input',
  error: 'error'
};
const FormFieldLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultTheme: {
    formFieldLayout: {
      display: 'grid',
      gridGap: 'xs',
      // prettier-ignore
      gridTemplate: toGridTemplate([['1fr'], [FormFieldArea.label], [FormFieldArea.input], [FormFieldArea.error, '0px']])
    }
  }
});

const FormFieldError = falconUi.themed({
  tag: falconUi.Box,
  defaultProps: {
    gridArea: FormFieldArea.error
  },
  defaultTheme: {
    formFieldError: {
      gridArea: FormFieldArea.error,
      color: 'error',
      fontSize: 'xxs',
      css: {
        pointerEvents: 'none',
        justifySelf: 'end'
      }
    }
  }
});

var _jsxFileName = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Forms/CheckboxFormField.tsx";
const CheckboxFormFieldLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultTheme: {
    checkboxFormFieldLayout: {
      display: 'grid',
      gridGap: 'xs',
      // prettier-ignore
      gridTemplate: toGridTemplate([['auto', '1fr'], [FormFieldArea.input, FormFieldArea.label], [FormFieldArea.error, FormFieldArea.error, '0px']])
    }
  }
});
const CheckboxFormField = props => {
  const {
    name
  } = props,
        restProps = _objectWithoutPropertiesLoose(props, ["name", "validate", "required", "children"]);

  const {
    themableProps,
    rest
  } = falconUi.extractThemableProps(restProps);
  return /*#__PURE__*/React__default.createElement(falconFrontKit.Field, _extends({
    name: name,
    validate: falconFrontKit.getDefaultInputValidators(props)
  }, rest, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 30,
      columnNumber: 5
    }
  }), ({
    form,
    field,
    label,
    error
  }) => /*#__PURE__*/React__default.createElement(CheckboxFormFieldLayout, _extends({}, themableProps, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 32,
      columnNumber: 9
    }
  }), /*#__PURE__*/React__default.createElement(falconUi.Checkbox, _extends({}, field, {
    gridArea: FormFieldArea.input,
    checked: field.value,
    onChange: e => form.setFieldValue(field.name, e.target.checked),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 33,
      columnNumber: 11
    }
  })), /*#__PURE__*/React__default.createElement(falconUi.FlexLayout, {
    alignItems: "center",
    gridArea: FormFieldArea.label,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 39,
      columnNumber: 11
    }
  }, /*#__PURE__*/React__default.createElement(falconUi.Label, {
    htmlFor: field.id,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 40,
      columnNumber: 13
    }
  }, label)), /*#__PURE__*/React__default.createElement(FormFieldError, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 43,
      columnNumber: 11
    }
  }, field.invalid ? error : null)));
};

var _jsxFileName$1 = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Forms/CreditCardInput.tsx";
const CreditCardLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultTheme: {
    creditCardLayout: {
      css: ({
        theme
      }) => ({
        'label:after': {
          paddingLeft: theme.spacing.sm,
          paddingRight: theme.spacing.sm
        },
        input: {
          fontSize: theme.fontSizes.sm
        }
      })
    }
  }
});

class CreditCardInputInner extends React__default.Component {
  constructor(props) {
    super(props);
    this.state = {
      number: undefined,
      expiry: undefined,
      cvc: undefined,
      name: undefined
    };
  }

  componentDidUpdate(_prevProps, prevState) {
    const {
      number: prevNumber,
      expiry: prevExpiry,
      cvc: prevCvc,
      name: prevName
    } = prevState;
    const {
      number,
      expiry,
      cvc,
      name
    } = this.state;

    if (number && expiry && cvc && name && (prevNumber !== number || prevCvc !== cvc || prevExpiry !== expiry || prevName !== name)) {
      this.props.onCompletion(this.state);
    }
  }

  render() {
    const {
      theme
    } = this.props;
    return /*#__PURE__*/React__default.createElement(falconI18n.I18n, {
      __source: {
        fileName: _jsxFileName$1,
        lineNumber: 63,
        columnNumber: 7
      }
    }, t => /*#__PURE__*/React__default.createElement(CreditCardLayout, {
      __source: {
        fileName: _jsxFileName$1,
        lineNumber: 65,
        columnNumber: 11
      }
    }, /*#__PURE__*/React__default.createElement(falconUi.Box, {
      my: "xs",
      __source: {
        fileName: _jsxFileName$1,
        lineNumber: 66,
        columnNumber: 13
      }
    }, /*#__PURE__*/React__default.createElement(falconUi.Input, {
      my: "xs",
      autoComplete: "cc-name",
      name: "cc-name",
      placeholder: t('creditCard.namePlaceholder'),
      value: this.state.name,
      onChange: ({
        target: {
          value: name
        }
      }) => {
        this.setState({
          name
        });
      },
      __source: {
        fileName: _jsxFileName$1,
        lineNumber: 67,
        columnNumber: 15
      }
    })), /*#__PURE__*/React__default.createElement(ReactCreditCardInput, {
      customTextLabels: {
        expiryError: {
          invalidExpiryDate: t('creditCard.errors.invalidExpiryDate'),
          monthOutOfRange: t('creditCard.errors.monthOutOfRange'),
          yearOutOfRange: t('creditCard.errors.yearOutOfRange'),
          dateOutOfRange: t('creditCard.errors.dateOutOfRange')
        },
        invalidCardNumber: t('creditCard.errors.invalidCardNumber'),
        invalidCvc: t('creditCard.errors.invalidCvc'),
        cardNumberPlaceholder: t('creditCard.numberPlaceholder'),
        expiryPlaceholder: t('creditCard.expiryPlaceholder'),
        cvcPlaceholder: t('creditCard.cvcPlaceholder')
      },
      fieldStyle: {
        border: '1px solid',
        borderColor: theme.colors.secondaryDark
      } // TODO: change any for better types
      ,
      cardNumberInputRenderer: ({
        handleCardNumberChange,
        props
      }) => /*#__PURE__*/React__default.createElement(falconUi.Input, _extends({}, props, {
        onChange: handleCardNumberChange(e => this.setState({
          number: e.target.value
        })),
        __source: {
          fileName: _jsxFileName$1,
          lineNumber: 95,
          columnNumber: 17
        }
      })),
      cardExpiryInputRenderer: ({
        handleCardExpiryChange,
        props
      }) => /*#__PURE__*/React__default.createElement(falconUi.Input, _extends({}, props, {
        onChange: handleCardExpiryChange(e => this.setState({
          expiry: e.target.value
        })),
        __source: {
          fileName: _jsxFileName$1,
          lineNumber: 103,
          columnNumber: 17
        }
      })),
      cardCVCInputRenderer: ({
        handleCardCVCChange,
        props
      }) => /*#__PURE__*/React__default.createElement(falconUi.Input, _extends({}, props, {
        onChange: handleCardCVCChange(e => this.setState({
          cvc: e.target.value
        })),
        __source: {
          fileName: _jsxFileName$1,
          lineNumber: 111,
          columnNumber: 17
        }
      })),
      __source: {
        fileName: _jsxFileName$1,
        lineNumber: 78,
        columnNumber: 13
      }
    })));
  }

}

const CreditCardInput = falconUi.withTheme(CreditCardInputInner);

const Form = falconUi.themed({
  tag: falconFrontKit.Form,
  defaultTheme: {
    form: {
      display: 'grid',
      gridGap: 'sm'
    }
  }
});

const AppLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultTheme: {
    appLayout: {
      px: {
        xs: 'sm',
        md: 'md'
      },
      css: {
        maxWidth: 1480,
        width: '100%',
        margin: '0 auto'
      }
    }
  }
});

const FixCenteredLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultProps: {
    maxWidth: 'XL'
  },
  defaultTheme: {
    fixCenteredLayout: {
      display: 'grid',
      gridGap: 'md',
      css: ({
        maxWidth
      }) => ({
        maxWidth,
        width: '100%',
        margin: '0 auto'
      })
    }
  }
});

const PageLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultTheme: {
    pageLayout: {
      display: 'grid',
      gridGap: 'md',
      py: 'lg'
    }
  }
});

var _jsxFileName$2 = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Layouts/SidebarLayout.tsx";

const SidebarLayoutInnerDOM = (_ref) => {
  let {
    title,
    onClose,
    children
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["title", "onClose", "children"]);

  return /*#__PURE__*/React__default.createElement(falconUi.Box, _extends({}, rest, {
    __source: {
      fileName: _jsxFileName$2,
      lineNumber: 5,
      columnNumber: 3
    }
  }), /*#__PURE__*/React__default.createElement(falconUi.FlexLayout, {
    __source: {
      fileName: _jsxFileName$2,
      lineNumber: 6,
      columnNumber: 5
    }
  }, /*#__PURE__*/React__default.createElement(falconUi.Box, {
    flex: 1,
    __source: {
      fileName: _jsxFileName$2,
      lineNumber: 7,
      columnNumber: 7
    }
  }, !!title && /*#__PURE__*/React__default.createElement(falconUi.H3, {
    __source: {
      fileName: _jsxFileName$2,
      lineNumber: 7,
      columnNumber: 33
    }
  }, title)), /*#__PURE__*/React__default.createElement(falconUi.Icon, {
    src: "close",
    stroke: "black",
    onClick: onClose,
    "aria-controls": rest.id,
    __source: {
      fileName: _jsxFileName$2,
      lineNumber: 8,
      columnNumber: 7
    }
  })), /*#__PURE__*/React__default.createElement(SidebarContentLayout, {
    __source: {
      fileName: _jsxFileName$2,
      lineNumber: 10,
      columnNumber: 5
    }
  }, children));
};

const SidebarLayout = falconUi.themed({
  tag: SidebarLayoutInnerDOM,
  defaultTheme: {
    sidebarLayout: {
      display: 'grid',
      gridRowGap: 'md',
      gridTemplate: 'auto 1fr / 100%',
      css: {
        width: '100%',
        height: '100%'
      }
    }
  }
});
const SidebarContentLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultProps: {
    maxWidth: 'XL'
  },
  defaultTheme: {
    sidebarContentLayout: {
      css: ({
        maxWidth
      }) => ({
        maxWidth,
        width: '100%',
        margin: '0 auto'
      })
    }
  }
});

const TwoColumnsLayoutArea = {
  left: 'left',
  right: 'right'
};
const TwoColumnsLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultTheme: {
    twoColumnsLayout: {
      display: 'grid',
      alignItems: 'flex-start',
      gridColumnGap: {
        xs: 'sm',
        md: 'xxl'
      },
      gridRowGap: {
        xs: 'sm'
      },
      // prettier-ignore
      gridTemplate: {
        xs: toGridTemplate([['1fr'], [TwoColumnsLayoutArea.left], [TwoColumnsLayoutArea.right]]),
        md: toGridTemplate([['1fr', '1fr'], [TwoColumnsLayoutArea.left, TwoColumnsLayoutArea.right]])
      }
    }
  }
});

const PropertyRowLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultTheme: {
    propertyRowLayout: {
      display: 'grid',
      gridGap: 'sm',
      gridAutoFlow: 'column',
      gridTemplateColumns: '1fr 2fr',
      variants: {
        spaceBetween: {
          gridTemplateColumns: '1fr auto'
        }
      }
    }
  }
});

var _jsxFileName$3 = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Error/NotFound.tsx";
const NotFound = ({
  location
}) => {
  const {
    pathname
  } = location;
  const path = pathname.startsWith('/') ? pathname.substring(1) : pathname;
  return /*#__PURE__*/React__default.createElement(PageLayout, {
    __source: {
      fileName: _jsxFileName$3,
      lineNumber: 17,
      columnNumber: 5
    }
  }, /*#__PURE__*/React__default.createElement(falconUi.H1, {
    __source: {
      fileName: _jsxFileName$3,
      lineNumber: 18,
      columnNumber: 7
    }
  }, /*#__PURE__*/React__default.createElement(falconI18n.T, {
    id: "notFound.title",
    __source: {
      fileName: _jsxFileName$3,
      lineNumber: 19,
      columnNumber: 9
    }
  })), /*#__PURE__*/React__default.createElement(falconUi.FlexLayout, {
    flexDirection: "column",
    alignItems: "center",
    p: "sm",
    __source: {
      fileName: _jsxFileName$3,
      lineNumber: 21,
      columnNumber: 7
    }
  }, /*#__PURE__*/React__default.createElement(falconUi.Text, {
    fontSize: "md",
    mb: "xs",
    __source: {
      fileName: _jsxFileName$3,
      lineNumber: 22,
      columnNumber: 9
    }
  }, /*#__PURE__*/React__default.createElement(falconI18n.T, {
    id: "notFound.text",
    path: path,
    __source: {
      fileName: _jsxFileName$3,
      lineNumber: 23,
      columnNumber: 11
    }
  })), /*#__PURE__*/React__default.createElement(falconUi.Button, {
    as: reactRouterDom.Link,
    to: "/",
    p: "xs",
    __source: {
      fileName: _jsxFileName$3,
      lineNumber: 25,
      columnNumber: 9
    }
  }, /*#__PURE__*/React__default.createElement(falconI18n.T, {
    id: "notFound.goHomeButton",
    __source: {
      fileName: _jsxFileName$3,
      lineNumber: 26,
      columnNumber: 11
    }
  }))));
};
NotFound.propTypes = {
  location: PropTypes.any.isRequired
};

const ErrorListLayout = falconUi.themed({
  tag: falconUi.List,
  defaultTheme: {
    errorListLayout: {}
  }
});

var _jsxFileName$4 = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Error/Error.tsx";

const errorInsights = (_ref) => {
  let rest = _objectWithoutPropertiesLoose(_ref, ["message"]);

  if (process.env.NODE_ENV !== 'production') {
    return JSON.stringify(Object.assign({}, rest), null, 2);
  }

  return '';
};

const Error = (_ref2) => {
  let {
    children,
    insights
  } = _ref2,
      rest = _objectWithoutPropertiesLoose(_ref2, ["children", "insights"]);

  return /*#__PURE__*/React__default.createElement(falconUi.Text, _extends({
    defaultTheme: {
      error: {
        color: 'error'
      }
    },
    title: errorInsights(insights)
  }, rest, {
    __source: {
      fileName: _jsxFileName$4,
      lineNumber: 17,
      columnNumber: 5
    }
  }), children);
};

var _jsxFileName$5 = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Error/ErrorSummary.tsx";
const ErrorSummary = (_ref) => {
  let {
    errors
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["errors"]);

  if (!errors) {
    return null;
  }

  errors = Array.isArray(errors) ? errors : [errors];
  return /*#__PURE__*/React__default.createElement(ErrorListLayout, _extends({}, rest, {
    __source: {
      fileName: _jsxFileName$5,
      lineNumber: 19,
      columnNumber: 5
    }
  }), errors.map(error => /*#__PURE__*/React__default.createElement(Error, {
    as: falconUi.ListItem,
    key: error.message,
    insights: error,
    __source: {
      fileName: _jsxFileName$5,
      lineNumber: 21,
      columnNumber: 9
    }
  }, error.message)));
};
const errorType = PropTypes.shape({
  message: PropTypes.string.isRequired,
  code: PropTypes.string.isRequired
}).isRequired;
ErrorSummary.propTypes = {
  // @ts-ignore https://github.com/DefinitelyTyped/DefinitelyTyped/issues/34692
  errors: PropTypes.oneOfType([errorType, PropTypes.arrayOf(errorType).isRequired])
};

var _jsxFileName$6 = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Error/OperationError.tsx";
const OperationError = props => {
  const getUserError = falconData.useGetUserError();
  const userErrors = getUserError(props);

  if (!userErrors.length) {
    return null;
  } // TODO: probably we need to better analyse `errors`
  // in order to show errors like "disconnected from falcon-server" in ErrorBoundary


  return /*#__PURE__*/React__default.createElement(ErrorSummary, {
    errors: userErrors,
    __source: {
      fileName: _jsxFileName$6,
      lineNumber: 18,
      columnNumber: 10
    }
  });
};

var _jsxFileName$7 = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Forms/FormErrorSummary.tsx";
const FormErrorSummary = ({
  errors
}) => {
  if (!errors) {
    return null;
  }

  errors = Array.isArray(errors) ? errors : [errors];
  return errors.length ? /*#__PURE__*/React__default.createElement(falconUi.List, {
    __source: {
      fileName: _jsxFileName$7,
      lineNumber: 15,
      columnNumber: 5
    }
  }, errors.map(error => /*#__PURE__*/React__default.createElement(Error, {
    as: falconUi.ListItem,
    key: error,
    __source: {
      fileName: _jsxFileName$7,
      lineNumber: 17,
      columnNumber: 9
    }
  }, error))) : null;
};

const FormFieldLabel = falconUi.themed({
  tag: falconUi.Label,
  defaultProps: {
    gridArea: FormFieldArea.label
  },
  defaultTheme: {
    formFieldLabel: {}
  }
});

var _jsxFileName$8 = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Forms/FormField.tsx";
const FormField = /*#__PURE__*/React__default.memo(props => {
  const {
    name,
    children
  } = props,
        restProps = _objectWithoutPropertiesLoose(props, ["name", "validate", "required", "children"]);

  const {
    themableProps,
    rest
  } = falconUi.extractThemableProps(restProps);
  const validators = React.useCallback(() => falconFrontKit.getDefaultInputValidators(props), [props]);
  return /*#__PURE__*/React__default.createElement(falconFrontKit.Field, _extends({
    name: name,
    validate: validators()
  }, rest, {
    __source: {
      fileName: _jsxFileName$8,
      lineNumber: 49,
      columnNumber: 5
    }
  }), ({
    form,
    field,
    label,
    error
  }) => /*#__PURE__*/React__default.createElement(FormFieldLayout, _extends({}, themableProps, {
    __source: {
      fileName: _jsxFileName$8,
      lineNumber: 51,
      columnNumber: 9
    }
  }), label && /*#__PURE__*/React__default.createElement(FormFieldLabel, {
    htmlFor: field.id,
    __source: {
      fileName: _jsxFileName$8,
      lineNumber: 52,
      columnNumber: 21
    }
  }, label), children ? children({
    form,
    field: Object.assign({}, field, {
      gridArea: FormFieldArea.input
    })
  }) : /*#__PURE__*/React__default.createElement(falconUi.Input, _extends({}, field, {
    gridArea: FormFieldArea.input,
    __source: {
      fileName: _jsxFileName$8,
      lineNumber: 56,
      columnNumber: 13
    }
  })), /*#__PURE__*/React__default.createElement(FormFieldError, {
    __source: {
      fileName: _jsxFileName$8,
      lineNumber: 58,
      columnNumber: 11
    }
  }, field.invalid ? error : null)));
});

var _jsxFileName$9 = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Forms/FormSubmit.tsx";
const FormSubmit = (_ref) => {
  let {
    value,
    children
  } = _ref,
      restProps = _objectWithoutPropertiesLoose(_ref, ["value", "children"]);

  const {
    themableProps,
    rest
  } = falconUi.extractThemableProps(restProps);
  return /*#__PURE__*/React__default.createElement(falconFrontKit.Submit, _extends({}, rest, {
    __source: {
      fileName: _jsxFileName$9,
      lineNumber: 21,
      columnNumber: 5
    }
  }), (_ref2) => {
    let {
      form,
      submit: {
        value: submitValue
      }
    } = _ref2,
        submitRest = _objectWithoutPropertiesLoose(_ref2.submit, ["value"]);

    return /*#__PURE__*/React__default.createElement(falconUi.Button, _extends({
      type: "submit",
      disabled: form.isSubmitting,
      variant: form.isSubmitting ? 'loader' : undefined
    }, submitRest, themableProps, {
      __source: {
        fileName: _jsxFileName$9,
        lineNumber: 23,
        columnNumber: 9
      }
    }), children || value || submitValue);
  });
};

var _jsxFileName$a = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Forms/PasswordRevealInput.tsx";
class PasswordRevealInput extends React__default.Component {
  constructor(...args) {
    super(...args);
    this.state = {
      isRevealed: false
    };

    this.toggleInputType = () => {
      this.setState(state => ({
        isRevealed: !state.isRevealed
      }));
    };
  }

  render() {
    const {
      isRevealed
    } = this.state;
    const inputType = isRevealed ? 'text' : 'password';
    return /*#__PURE__*/React__default.createElement(falconI18n.I18n, {
      __source: {
        fileName: _jsxFileName$a,
        lineNumber: 27,
        columnNumber: 7
      }
    }, t => /*#__PURE__*/React__default.createElement(falconUi.Box, {
      position: "relative",
      __source: {
        fileName: _jsxFileName$a,
        lineNumber: 29,
        columnNumber: 11
      }
    }, /*#__PURE__*/React__default.createElement(falconUi.Input, _extends({}, this.props, {
      type: inputType,
      __source: {
        fileName: _jsxFileName$a,
        lineNumber: 30,
        columnNumber: 13
      }
    })), /*#__PURE__*/React__default.createElement(falconUi.Box, {
      position: "absolute",
      top: 0,
      bottom: 0,
      right: 0,
      title: t('form.passwordRevealTitle', {
        context: isRevealed ? 'hide' : 'show'
      }),
      __source: {
        fileName: _jsxFileName$a,
        lineNumber: 31,
        columnNumber: 13
      }
    }, /*#__PURE__*/React__default.createElement(falconUi.Icon, {
      onClick: this.toggleInputType,
      stroke: isRevealed ? 'primary' : 'black',
      cursor: "pointer",
      size: "md",
      src: isRevealed ? 'eye' : 'eyeOff',
      bg: "white",
      m: "xs",
      __source: {
        fileName: _jsxFileName$a,
        lineNumber: 38,
        columnNumber: 15
      }
    }))));
  }

}

var _jsxFileName$b = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Forms/RadioInput.tsx";
const RadioInput = /*#__PURE__*/React__default.memo((_ref) => {
  let {
    children,
    label
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["children", "label"]);

  return /*#__PURE__*/React__default.createElement(falconUi.Label, {
    htmlFor: rest.id,
    css: {
      display: 'inline-flex',
      alignItems: 'center'
    },
    __source: {
      fileName: _jsxFileName$b,
      lineNumber: 7,
      columnNumber: 5
    }
  }, /*#__PURE__*/React__default.createElement(falconUi.Radio, _extends({}, rest, {
    __source: {
      fileName: _jsxFileName$b,
      lineNumber: 8,
      columnNumber: 7
    }
  })), children || /*#__PURE__*/React__default.createElement(falconUi.Text, {
    as: "span",
    p: "xs",
    __source: {
      fileName: _jsxFileName$b,
      lineNumber: 10,
      columnNumber: 9
    }
  }, label));
});

var _jsxFileName$c = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Forms/RadioFormField.tsx";
const RadioFormFieldLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultTheme: {
    radioFormFieldLayout: {
      display: 'grid',
      gridGap: 'xs',
      // prettier-ignore
      gridTemplate: toGridTemplate([['auto', '1fr'], [FormFieldArea.input, FormFieldArea.label], [FormFieldArea.error, FormFieldArea.error, '0px']])
    }
  }
});
const RadioFormField = props => {
  const {
    name,
    value,
    children
  } = props,
        restProps = _objectWithoutPropertiesLoose(props, ["name", "value", "validate", "required", "children"]);

  const {
    themableProps,
    rest
  } = falconUi.extractThemableProps(restProps);
  return /*#__PURE__*/React__default.createElement(falconFrontKit.Field, _extends({
    name: name,
    validate: falconFrontKit.getDefaultInputValidators(props)
  }, rest, {
    __source: {
      fileName: _jsxFileName$c,
      lineNumber: 29,
      columnNumber: 5
    }
  }), ({
    field,
    label
  }) => /*#__PURE__*/React__default.createElement(RadioFormFieldLayout, _extends({}, themableProps, {
    __source: {
      fileName: _jsxFileName$c,
      lineNumber: 31,
      columnNumber: 9
    }
  }), /*#__PURE__*/React__default.createElement(falconUi.Radio, _extends({}, field, {
    value: value,
    checked: value === field.value,
    gridArea: FormFieldArea.input,
    __source: {
      fileName: _jsxFileName$c,
      lineNumber: 32,
      columnNumber: 11
    }
  })), /*#__PURE__*/React__default.createElement(falconUi.FlexLayout, {
    alignItems: "center",
    gridArea: FormFieldArea.label,
    __source: {
      fileName: _jsxFileName$c,
      lineNumber: 33,
      columnNumber: 11
    }
  }, /*#__PURE__*/React__default.createElement(falconUi.Label, {
    htmlFor: field.id,
    __source: {
      fileName: _jsxFileName$c,
      lineNumber: 34,
      columnNumber: 13
    }
  }, children || label))));
};

var _jsxFileName$d = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Forms/SelectInput.tsx";
const OptionList = /*#__PURE__*/React__default.memo(({
  options
}) => /*#__PURE__*/React__default.createElement(React__default.Fragment, null, options.map(x => /*#__PURE__*/React__default.createElement("option", {
  key: `${x.value}-${x.label}`,
  value: x.value,
  __source: {
    fileName: _jsxFileName$d,
    lineNumber: 12,
    columnNumber: 7
  }
}, x.label))));
/**
 * @see https://stackoverflow.com/a/49020529/412319
 * @internal
 */

const Placeholder = ({
  value
}) => /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("option", {
  key: `${value}-a`,
  hidden: true,
  __source: {
    fileName: _jsxFileName$d,
    lineNumber: 25,
    columnNumber: 5
  }
}, value), /*#__PURE__*/React__default.createElement("option", {
  key: `${value}-b`,
  disabled: true,
  default: true,
  __source: {
    fileName: _jsxFileName$d,
    lineNumber: 28,
    columnNumber: 5
  }
}, value));

const SelectInput = /*#__PURE__*/React__default.memo((_ref) => {
  let {
    options,
    placeholder
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["options", "placeholder"]);

  return /*#__PURE__*/React__default.createElement(falconUi.Select, _extends({}, rest, {
    __source: {
      fileName: _jsxFileName$d,
      lineNumber: 40,
      columnNumber: 5
    }
  }), placeholder && /*#__PURE__*/React__default.createElement(Placeholder, {
    value: placeholder,
    __source: {
      fileName: _jsxFileName$d,
      lineNumber: 41,
      columnNumber: 23
    }
  }), /*#__PURE__*/React__default.createElement(OptionList, {
    options: options,
    __source: {
      fileName: _jsxFileName$d,
      lineNumber: 42,
      columnNumber: 7
    }
  }));
});

var _jsxFileName$e = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Country/CountryPicker.tsx";
const CountryPicker = (_ref) => {
  let {
    value,
    options,
    onChange
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["value", "options", "onChange"]);

  const selectOptions = React.useMemo(() => options.map(({
    code,
    localName
  }) => ({
    value: code,
    label: localName || code
  })), [options]);
  return /*#__PURE__*/React__default.createElement(SelectInput, _extends({}, rest, {
    value: value ? value.code : undefined,
    options: selectOptions,
    onChange: e => {
      return onChange(options.find(x => x.code === e.target.value));
    },
    __source: {
      fileName: _jsxFileName$e,
      lineNumber: 24,
      columnNumber: 5
    }
  }));
};

var _jsxFileName$f = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Country/CountryRegionPicker.tsx";
const RegionPicker = (_ref) => {
  let {
    value,
    options,
    onChange
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["value", "options", "onChange"]);

  const selectOptions = React.useMemo(() => options.map(({
    id,
    code,
    name
  }) => ({
    value: id,
    label: name || code
  })), [options]);
  return /*#__PURE__*/React__default.createElement(SelectInput, _extends({}, rest, {
    value: value ? value.id : undefined,
    options: selectOptions,
    onChange: e => {
      return onChange(options.find(x => x.id === e.target.value));
    },
    __source: {
      fileName: _jsxFileName$f,
      lineNumber: 24,
      columnNumber: 5
    }
  }));
};

var _jsxFileName$g = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Loader/Loader.tsx";

const LoaderInnerDOM = props => /*#__PURE__*/React__default.createElement(falconUi.Box, _extends({}, props, {
  __source: {
    fileName: _jsxFileName$g,
    lineNumber: 5,
    columnNumber: 3
  }
}), /*#__PURE__*/React__default.createElement(falconUi.Icon, {
  src: "loader",
  __source: {
    fileName: _jsxFileName$g,
    lineNumber: 6,
    columnNumber: 5
  }
}));

const Loader = falconUi.themed({
  tag: LoaderInnerDOM,
  defaultTheme: {
    loader: {
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      css: {
        height: '50vh',
        width: '100%'
      },
      variants: {
        overlay: {
          position: 'absolute',
          css: {
            background: 'rgba(255, 255, 255, 0.7)',
            height: '100%',
            width: '100%',
            zIndex: 1
          }
        }
      }
    }
  }
});

var _jsxFileName$h = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Address/AddressFormFields.tsx";
const AddressFormFields = props => {
  const {
    twoColumns,
    askDefault,
    askEmail,
    autoCompleteSection
  } = props;
  const {
    t
  } = falconI18n.useI18n();
  const [{
    value: selectedCountry
  }] = formik.useField('country');

  const getAutoComplete = attribute => [autoCompleteSection, attribute].filter(Boolean).join(' ');

  const askDefaultFields = /*#__PURE__*/React__default.createElement(falconUi.Box, {
    mb: "sm",
    __source: {
      fileName: _jsxFileName$h,
      lineNumber: 28,
      columnNumber: 5
    }
  }, /*#__PURE__*/React__default.createElement(CheckboxFormField, {
    name: "defaultShipping",
    __source: {
      fileName: _jsxFileName$h,
      lineNumber: 29,
      columnNumber: 7
    }
  }), /*#__PURE__*/React__default.createElement(CheckboxFormField, {
    name: "defaultBilling",
    __source: {
      fileName: _jsxFileName$h,
      lineNumber: 30,
      columnNumber: 7
    }
  })); // the form content, not including default address fields and submit button(s)

  const mainContent = /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(falconUi.GridLayout, {
    gridArea: twoColumns ? TwoColumnsLayoutArea.left : null,
    __source: {
      fileName: _jsxFileName$h,
      lineNumber: 37,
      columnNumber: 7
    }
  }, askEmail && /*#__PURE__*/React__default.createElement(FormField, {
    name: "email",
    type: "email",
    required: true,
    __source: {
      fileName: _jsxFileName$h,
      lineNumber: 38,
      columnNumber: 22
    }
  }), /*#__PURE__*/React__default.createElement(FormField, {
    name: "company",
    autoComplete: getAutoComplete('company'),
    __source: {
      fileName: _jsxFileName$h,
      lineNumber: 39,
      columnNumber: 9
    }
  }), /*#__PURE__*/React__default.createElement(FormField, {
    name: "firstname",
    required: true,
    autoComplete: getAutoComplete('given-name'),
    __source: {
      fileName: _jsxFileName$h,
      lineNumber: 40,
      columnNumber: 9
    }
  }), /*#__PURE__*/React__default.createElement(FormField, {
    name: "lastname",
    required: true,
    autoComplete: getAutoComplete('family-name'),
    __source: {
      fileName: _jsxFileName$h,
      lineNumber: 41,
      columnNumber: 9
    }
  }), /*#__PURE__*/React__default.createElement(FormField, {
    name: "telephone",
    required: true,
    autoComplete: getAutoComplete('tel'),
    __source: {
      fileName: _jsxFileName$h,
      lineNumber: 42,
      columnNumber: 9
    }
  })), /*#__PURE__*/React__default.createElement(falconUi.GridLayout, {
    gridArea: twoColumns ? TwoColumnsLayoutArea.right : null,
    __source: {
      fileName: _jsxFileName$h,
      lineNumber: 44,
      columnNumber: 7
    }
  }, /*#__PURE__*/React__default.createElement(FormField, {
    name: "street1",
    required: true,
    autoComplete: getAutoComplete('address-line1'),
    __source: {
      fileName: _jsxFileName$h,
      lineNumber: 45,
      columnNumber: 9
    }
  }), /*#__PURE__*/React__default.createElement(FormField, {
    name: "street2",
    autoComplete: getAutoComplete('address-line2'),
    __source: {
      fileName: _jsxFileName$h,
      lineNumber: 46,
      columnNumber: 9
    }
  }), /*#__PURE__*/React__default.createElement(FormField, {
    name: "postcode",
    required: true,
    autoComplete: getAutoComplete('postal-code'),
    __source: {
      fileName: _jsxFileName$h,
      lineNumber: 47,
      columnNumber: 9
    }
  }), /*#__PURE__*/React__default.createElement(FormField, {
    name: "city",
    required: true,
    autoComplete: getAutoComplete('address-level2'),
    __source: {
      fileName: _jsxFileName$h,
      lineNumber: 48,
      columnNumber: 9
    }
  }), /*#__PURE__*/React__default.createElement(FormField, {
    name: "country",
    placeholder: t('addressForm.countryFieldPlaceholder'),
    required: true,
    autoComplete: getAutoComplete('country'),
    __source: {
      fileName: _jsxFileName$h,
      lineNumber: 49,
      columnNumber: 9
    }
  }, ({
    field,
    form
  }) => /*#__PURE__*/React__default.createElement(falconShopData.CountryListQuery, {
    passLoading: true,
    __source: {
      fileName: _jsxFileName$h,
      lineNumber: 56,
      columnNumber: 13
    }
  }, ({
    data: {
      countryList = {
        items: []
      }
    }
  }) => /*#__PURE__*/React__default.createElement(CountryPicker, _extends({}, field, {
    options: countryList.items,
    onChange: e => {
      form.setFieldValue(field.name, e);
      form.setFieldValue('region', null);
    },
    __source: {
      fileName: _jsxFileName$h,
      lineNumber: 58,
      columnNumber: 17
    }
  })))), selectedCountry && selectedCountry.id ? /*#__PURE__*/React__default.createElement(falconShopData.RegionListQuery, {
    passLoading: true,
    variables: {
      countryId: selectedCountry.id
    },
    __source: {
      fileName: _jsxFileName$h,
      lineNumber: 71,
      columnNumber: 11
    }
  }, ({
    data: {
      regionList = {
        items: []
      }
    },
    loading
  }) => {
    if (!regionList.items.length && !loading) {
      return null;
    }

    if (loading) {
      return /*#__PURE__*/React__default.createElement(Loader, {
        __source: {
          fileName: _jsxFileName$h,
          lineNumber: 78,
          columnNumber: 24
        }
      });
    }

    return /*#__PURE__*/React__default.createElement(falconUi.Box, {
      position: "relative",
      __source: {
        fileName: _jsxFileName$h,
        lineNumber: 82,
        columnNumber: 17
      }
    }, /*#__PURE__*/React__default.createElement(FormField, {
      name: "region",
      required: true,
      placeholder: t('addressForm.regionFieldPlaceholder'),
      autoComplete: getAutoComplete('region'),
      __source: {
        fileName: _jsxFileName$h,
        lineNumber: 83,
        columnNumber: 19
      }
    }, ({
      field,
      form
    }) => /*#__PURE__*/React__default.createElement(React__default.Fragment, null, loading && /*#__PURE__*/React__default.createElement(Loader, {
      variant: "overlaySmall",
      __source: {
        fileName: _jsxFileName$h,
        lineNumber: 91,
        columnNumber: 37
      }
    }), /*#__PURE__*/React__default.createElement(RegionPicker, _extends({}, field, {
      options: regionList.items,
      onChange: e => {
        form.setFieldValue(field.name, e);
      },
      __source: {
        fileName: _jsxFileName$h,
        lineNumber: 92,
        columnNumber: 25
      }
    })))));
  }) : null));
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, askDefault && askDefaultFields, twoColumns ? /*#__PURE__*/React__default.createElement(TwoColumnsLayout, {
    __source: {
      fileName: _jsxFileName$h,
      lineNumber: 114,
      columnNumber: 21
    }
  }, mainContent) : mainContent);
};
AddressFormFields.defaultProps = {
  twoColumns: false,
  askDefault: false,
  askEmail: false
};

var _jsxFileName$i = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Address/AddAddressForm.tsx";
const AddAddressForm = (_ref) => {
  let {
    onSuccess,
    onCancel
  } = _ref,
      formProps = _objectWithoutPropertiesLoose(_ref, ["onSuccess", "onCancel"]);

  return /*#__PURE__*/React__default.createElement(falconFrontKit.AddAddressFormProvider, {
    onSuccess: onSuccess,
    __source: {
      fileName: _jsxFileName$i,
      lineNumber: 15,
      columnNumber: 3
    }
  }, ({
    isSubmitting,
    status
  }) => /*#__PURE__*/React__default.createElement(Form, _extends({
    id: "add-address",
    i18nId: "addressForm"
  }, formProps, {
    __source: {
      fileName: _jsxFileName$i,
      lineNumber: 17,
      columnNumber: 7
    }
  }), /*#__PURE__*/React__default.createElement(AddressFormFields, {
    twoColumns: true,
    askDefault: true,
    __source: {
      fileName: _jsxFileName$i,
      lineNumber: 18,
      columnNumber: 9
    }
  }), /*#__PURE__*/React__default.createElement(falconUi.FlexLayout, {
    justifyContent: "flex-end",
    alignItems: "center",
    mt: "md",
    __source: {
      fileName: _jsxFileName$i,
      lineNumber: 19,
      columnNumber: 9
    }
  }, /*#__PURE__*/React__default.createElement(falconUi.Button, {
    onClick: onCancel,
    mr: "md",
    __source: {
      fileName: _jsxFileName$i,
      lineNumber: 20,
      columnNumber: 11
    }
  }, /*#__PURE__*/React__default.createElement(falconI18n.T, {
    id: "addAddress.cancelButton",
    __source: {
      fileName: _jsxFileName$i,
      lineNumber: 21,
      columnNumber: 13
    }
  })), /*#__PURE__*/React__default.createElement(falconUi.Button, {
    type: "submit",
    variant: isSubmitting ? 'loader' : undefined,
    __source: {
      fileName: _jsxFileName$i,
      lineNumber: 23,
      columnNumber: 11
    }
  }, /*#__PURE__*/React__default.createElement(falconI18n.T, {
    id: "addAddress.submitButton",
    __source: {
      fileName: _jsxFileName$i,
      lineNumber: 24,
      columnNumber: 13
    }
  }))), /*#__PURE__*/React__default.createElement(ErrorSummary, {
    errors: status.error,
    __source: {
      fileName: _jsxFileName$i,
      lineNumber: 27,
      columnNumber: 9
    }
  })));
};

const AddressDetailsLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultTheme: {
    addressDetailsLayout: {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'flex-start',
      color: 'secondaryText',
      css: {
        fontStyle: 'normal'
      }
    }
  },
  defaultProps: {
    as: 'address'
  }
});

var _jsxFileName$j = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Address/AddressDetails.tsx";
const AddressDetails = ({
  company,
  firstname,
  lastname,
  street,
  postcode,
  city,
  country,
  telephone
}) => /*#__PURE__*/React__default.createElement(AddressDetailsLayout, {
  __source: {
    fileName: _jsxFileName$j,
    lineNumber: 30,
    columnNumber: 3
  }
}, company && /*#__PURE__*/React__default.createElement(falconUi.Text, {
  fontWeight: "bold",
  color: "secondaryText",
  __source: {
    fileName: _jsxFileName$j,
    lineNumber: 31,
    columnNumber: 17
  }
}, `${company}`), /*#__PURE__*/React__default.createElement(falconUi.Text, {
  fontWeight: "bold",
  color: "secondaryText",
  mb: "xs",
  __source: {
    fileName: _jsxFileName$j,
    lineNumber: 32,
    columnNumber: 5
  }
}, `${firstname} ${lastname}`), street.map((x, i) =>
/*#__PURE__*/
// because `street` can contain non unique values
// eslint-disable-next-line react/no-array-index-key
React__default.createElement(falconUi.Text, {
  key: i,
  __source: {
    fileName: _jsxFileName$j,
    lineNumber: 36,
    columnNumber: 7
  }
}, x)), /*#__PURE__*/React__default.createElement(falconUi.Text, {
  __source: {
    fileName: _jsxFileName$j,
    lineNumber: 38,
    columnNumber: 5
  }
}, `${postcode} ${city}, ${country.localName || country.code}`), telephone && /*#__PURE__*/React__default.createElement(falconUi.Text, {
  __source: {
    fileName: _jsxFileName$j,
    lineNumber: 39,
    columnNumber: 19
  }
}, telephone));
AddressDetails.propTypes = {
  company: PropTypes.string,
  firstname: PropTypes.string.isRequired,
  lastname: PropTypes.string.isRequired,
  street: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,
  postcode: PropTypes.string,
  city: PropTypes.string.isRequired,
  // @ts-ignore
  country: PropTypes.shape({
    code: PropTypes.string.isRequired,
    localName: PropTypes.string
  }).isRequired,
  telephone: PropTypes.string
};

var _jsxFileName$k = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Address/AddressCard.tsx";
const AddressCardLayout = falconUi.themed({
  tag: falconUi.ListItem,
  defaultTheme: {
    addressCardLayout: {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'flex-start'
    }
  }
});
const AddressCard = ({
  address
}) => /*#__PURE__*/React__default.createElement(AddressCardLayout, {
  __source: {
    fileName: _jsxFileName$k,
    lineNumber: 22,
    columnNumber: 3
  }
}, /*#__PURE__*/React__default.createElement(AddressDetails, _extends({}, address, {
  __source: {
    fileName: _jsxFileName$k,
    lineNumber: 23,
    columnNumber: 5
  }
})));

const AddressListLayout = falconUi.themed({
  tag: 'ul',
  defaultTheme: {
    addressListLayout: {
      display: 'grid',
      gridTemplateColumns: {
        xs: '1fr',
        md: 'repeat(2, 1fr)'
      },
      gridGap: 'md',
      m: 'none',
      p: 'none',
      css: {
        listStyle: 'none'
      }
    }
  }
});

const getAddressType = address => [address.defaultBilling && 'billing', address.defaultShipping && 'shipping'].filter(x => x).join('&') || 'other';

var _jsxFileName$l = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Address/EditAddressForm.tsx";
const EditAddressForm = (_ref) => {
  let {
    id,
    onSuccess,
    onCancel
  } = _ref,
      formProps = _objectWithoutPropertiesLoose(_ref, ["id", "onSuccess", "onCancel"]);

  return /*#__PURE__*/React__default.createElement(falconShopData.AddressQuery, {
    variables: {
      id
    },
    __source: {
      fileName: _jsxFileName$l,
      lineNumber: 17,
      columnNumber: 3
    }
  }, ({
    data: {
      address
    }
  }) => /*#__PURE__*/React__default.createElement(falconFrontKit.EditAddressFormProvider, {
    address: address,
    onSuccess: onSuccess,
    __source: {
      fileName: _jsxFileName$l,
      lineNumber: 19,
      columnNumber: 7
    }
  }, ({
    isSubmitting,
    status
  }) => /*#__PURE__*/React__default.createElement(Form, _extends({
    id: "edit-address",
    i18nId: "addressForm"
  }, formProps, {
    __source: {
      fileName: _jsxFileName$l,
      lineNumber: 21,
      columnNumber: 11
    }
  }), /*#__PURE__*/React__default.createElement(AddressFormFields, {
    twoColumns: true,
    askDefault: true,
    __source: {
      fileName: _jsxFileName$l,
      lineNumber: 22,
      columnNumber: 13
    }
  }), /*#__PURE__*/React__default.createElement(falconUi.FlexLayout, {
    justifyContent: "flex-end",
    alignItems: "center",
    mt: "md",
    __source: {
      fileName: _jsxFileName$l,
      lineNumber: 23,
      columnNumber: 13
    }
  }, /*#__PURE__*/React__default.createElement(falconUi.Button, {
    onClick: onCancel,
    mr: "md",
    __source: {
      fileName: _jsxFileName$l,
      lineNumber: 24,
      columnNumber: 15
    }
  }, /*#__PURE__*/React__default.createElement(falconI18n.T, {
    id: "editAddress.cancelButton",
    __source: {
      fileName: _jsxFileName$l,
      lineNumber: 25,
      columnNumber: 17
    }
  })), /*#__PURE__*/React__default.createElement(falconUi.Button, {
    type: "submit",
    variant: isSubmitting ? 'loader' : undefined,
    __source: {
      fileName: _jsxFileName$l,
      lineNumber: 27,
      columnNumber: 15
    }
  }, /*#__PURE__*/React__default.createElement(falconI18n.T, {
    id: "editAddress.submitButton",
    __source: {
      fileName: _jsxFileName$l,
      lineNumber: 28,
      columnNumber: 17
    }
  }))), /*#__PURE__*/React__default.createElement(ErrorSummary, {
    errors: status.error,
    __source: {
      fileName: _jsxFileName$l,
      lineNumber: 31,
      columnNumber: 13
    }
  }))));
};

var _jsxFileName$m = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Account/ForgotPasswordForm.tsx";
const ForgotPasswordForm = (_ref) => {
  let {
    onSuccess
  } = _ref,
      formProps = _objectWithoutPropertiesLoose(_ref, ["onSuccess"]);

  return /*#__PURE__*/React__default.createElement(falconFrontKit.ForgotPasswordFormProvider, {
    onSuccess: onSuccess,
    __source: {
      fileName: _jsxFileName$m,
      lineNumber: 12,
      columnNumber: 3
    }
  }, ({
    isSubmitting,
    status,
    values,
    submitCount,
    isValid
  }) => {
    const submitSucceed = isValid && !isSubmitting && submitCount > 0 && !status.error;
    return /*#__PURE__*/React__default.createElement(Form, _extends({
      id: "forgot-password",
      i18nId: "forgotPassword"
    }, formProps, {
      __source: {
        fileName: _jsxFileName$m,
        lineNumber: 17,
        columnNumber: 9
      }
    }), /*#__PURE__*/React__default.createElement(FormField, {
      name: "email",
      required: true,
      type: "email",
      autoComplete: "email",
      __source: {
        fileName: _jsxFileName$m,
        lineNumber: 18,
        columnNumber: 11
      }
    }), /*#__PURE__*/React__default.createElement(FormSubmit, {
      __source: {
        fileName: _jsxFileName$m,
        lineNumber: 19,
        columnNumber: 11
      }
    }), /*#__PURE__*/React__default.createElement(ErrorSummary, {
      errors: status.error,
      __source: {
        fileName: _jsxFileName$m,
        lineNumber: 20,
        columnNumber: 11
      }
    }), submitSucceed && /*#__PURE__*/React__default.createElement(falconUi.Text, {
      mt: "md",
      fontSize: "md",
      __source: {
        fileName: _jsxFileName$m,
        lineNumber: 23,
        columnNumber: 13
      }
    }, /*#__PURE__*/React__default.createElement(falconI18n.T, {
      id: "forgotPassword.successMessage",
      email: values.email,
      __source: {
        fileName: _jsxFileName$m,
        lineNumber: 24,
        columnNumber: 15
      }
    })));
  });
};

var _jsxFileName$n = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Account/ResetPasswordForm.tsx";
const ResetPasswordForm = (_ref) => {
  let {
    onSuccess,
    resetToken
  } = _ref,
      formProps = _objectWithoutPropertiesLoose(_ref, ["onSuccess", "resetToken"]);

  return /*#__PURE__*/React__default.createElement(falconFrontKit.ResetPasswordFormProvider, {
    initialValues: {
      resetToken,
      password: ''
    },
    onSuccess: onSuccess,
    __source: {
      fileName: _jsxFileName$n,
      lineNumber: 11,
      columnNumber: 3
    }
  }, ({
    status
  }) => /*#__PURE__*/React__default.createElement(Form, _extends({
    id: "reset-password",
    i18nId: "resetPassword"
  }, formProps, {
    __source: {
      fileName: _jsxFileName$n,
      lineNumber: 13,
      columnNumber: 7
    }
  }), /*#__PURE__*/React__default.createElement(FormField, {
    name: "password",
    required: true,
    type: "password",
    autoComplete: "new-password",
    __source: {
      fileName: _jsxFileName$n,
      lineNumber: 14,
      columnNumber: 9
    }
  }, ({
    field
  }) => /*#__PURE__*/React__default.createElement(PasswordRevealInput, _extends({}, field, {
    __source: {
      fileName: _jsxFileName$n,
      lineNumber: 15,
      columnNumber: 27
    }
  }))), /*#__PURE__*/React__default.createElement(FormSubmit, {
    justifySelf: "center",
    __source: {
      fileName: _jsxFileName$n,
      lineNumber: 17,
      columnNumber: 9
    }
  }), /*#__PURE__*/React__default.createElement(ErrorSummary, {
    errors: status.error,
    __source: {
      fileName: _jsxFileName$n,
      lineNumber: 18,
      columnNumber: 9
    }
  })));
};

var _jsxFileName$o = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Account/InvalidResetPasswordToken.tsx";
const InvalidResetPasswordToken = ({
  onRequestAnotherToken
}) => /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(falconUi.Text, {
  fontSize: "md",
  color: "error",
  style: {
    textAlign: 'center'
  },
  __source: {
    fileName: _jsxFileName$o,
    lineNumber: 10,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "resetPassword.failureMessage",
  __source: {
    fileName: _jsxFileName$o,
    lineNumber: 11,
    columnNumber: 7
  }
})), /*#__PURE__*/React__default.createElement(falconUi.Box, {
  justifySelf: "center",
  __source: {
    fileName: _jsxFileName$o,
    lineNumber: 13,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconUi.Button, {
  onClick: () => onRequestAnotherToken(),
  __source: {
    fileName: _jsxFileName$o,
    lineNumber: 14,
    columnNumber: 7
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "resetPassword.requestAnotherToken",
  __source: {
    fileName: _jsxFileName$o,
    lineNumber: 15,
    columnNumber: 9
  }
}))));

var _jsxFileName$p = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Account/ResetPasswordSuccess.tsx";
const ResetPasswordSuccess = ({
  onSignIn
}) => /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(falconUi.Text, {
  fontSize: "md",
  style: {
    textAlign: 'center'
  },
  __source: {
    fileName: _jsxFileName$p,
    lineNumber: 10,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "resetPassword.successMessage",
  __source: {
    fileName: _jsxFileName$p,
    lineNumber: 11,
    columnNumber: 7
  }
})), /*#__PURE__*/React__default.createElement(falconUi.Box, {
  justifySelf: "center",
  __source: {
    fileName: _jsxFileName$p,
    lineNumber: 13,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconUi.Button, {
  onClick: () => onSignIn(),
  __source: {
    fileName: _jsxFileName$p,
    lineNumber: 14,
    columnNumber: 7
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "signIn.submitButton",
  __source: {
    fileName: _jsxFileName$p,
    lineNumber: 15,
    columnNumber: 9
  }
}))));

var _jsxFileName$q = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Account/SignInIcon.tsx";
/* eslint-disable */

const UserIconFallback = () => /*#__PURE__*/React__default.createElement(falconUi.IconRenderer, {
  as: falconUi.Text,
  style: {
    textAlign: 'center'
  },
  __source: {
    fileName: _jsxFileName$q,
    lineNumber: 7,
    columnNumber: 3
  }
}, "\uD83D\uDC64");
/* eslint-enable */

const SignInIcon = () => /*#__PURE__*/React__default.createElement(falconUi.Box, {
  css: {
    position: 'relative'
  },
  __source: {
    fileName: _jsxFileName$q,
    lineNumber: 14,
    columnNumber: 3
  }
}, /*#__PURE__*/React__default.createElement(falconUi.Icon, {
  src: "user",
  fallback: /*#__PURE__*/React__default.createElement(UserIconFallback, {
    __source: {
      fileName: _jsxFileName$q,
      lineNumber: 15,
      columnNumber: 32
    }
  }),
  __source: {
    fileName: _jsxFileName$q,
    lineNumber: 15,
    columnNumber: 5
  }
}), /*#__PURE__*/React__default.createElement(falconUi.Text, {
  color: "primary",
  fontSize: "xs",
  fontWeight: "bold",
  css: {
    whiteSpace: 'nowrap',
    position: 'absolute',
    bottom: '-10px',
    left: '50%',
    transform: 'translate(-50%, 0)'
  },
  __source: {
    fileName: _jsxFileName$q,
    lineNumber: 16,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "signIn.link",
  __source: {
    fileName: _jsxFileName$q,
    lineNumber: 28,
    columnNumber: 7
  }
})));

var _jsxFileName$r = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Account/SignInForm.tsx";
const SignInForm = (_ref) => {
  let {
    onSuccess,
    onForgotPassword,
    mutationOptions
  } = _ref,
      formProps = _objectWithoutPropertiesLoose(_ref, ["onSuccess", "onForgotPassword", "mutationOptions"]);

  return /*#__PURE__*/React__default.createElement(falconFrontKit.SignInFormProvider, {
    onSuccess: onSuccess,
    mutationOptions: mutationOptions,
    __source: {
      fileName: _jsxFileName$r,
      lineNumber: 20,
      columnNumber: 3
    }
  }, ({
    status
  }) => /*#__PURE__*/React__default.createElement(Form, _extends({
    i18nId: "signIn"
  }, formProps, {
    __source: {
      fileName: _jsxFileName$r,
      lineNumber: 22,
      columnNumber: 7
    }
  }), /*#__PURE__*/React__default.createElement(FormField, {
    name: "email",
    type: "email",
    required: true,
    autoComplete: "email",
    __source: {
      fileName: _jsxFileName$r,
      lineNumber: 23,
      columnNumber: 9
    }
  }), /*#__PURE__*/React__default.createElement(FormField, {
    name: "password",
    type: "password" // pass empty array, so default password strength validator does not get triggered
    ,
    validate: [],
    required: true,
    autoComplete: "current-password",
    __source: {
      fileName: _jsxFileName$r,
      lineNumber: 24,
      columnNumber: 9
    }
  }, ({
    field
  }) => /*#__PURE__*/React__default.createElement(PasswordRevealInput, _extends({}, field, {
    __source: {
      fileName: _jsxFileName$r,
      lineNumber: 32,
      columnNumber: 27
    }
  }))), /*#__PURE__*/React__default.createElement(falconUi.FlexLayout, {
    justifyContent: "space-between",
    alignItems: "center",
    mt: "md",
    __source: {
      fileName: _jsxFileName$r,
      lineNumber: 34,
      columnNumber: 9
    }
  }, /*#__PURE__*/React__default.createElement(falconUi.Link, {
    fontSize: "xs",
    onClick: () => onForgotPassword(),
    __source: {
      fileName: _jsxFileName$r,
      lineNumber: 35,
      columnNumber: 11
    }
  }, /*#__PURE__*/React__default.createElement(falconI18n.T, {
    id: "signIn.forgotPasswordLink",
    __source: {
      fileName: _jsxFileName$r,
      lineNumber: 36,
      columnNumber: 13
    }
  })), /*#__PURE__*/React__default.createElement(FormSubmit, {
    __source: {
      fileName: _jsxFileName$r,
      lineNumber: 38,
      columnNumber: 11
    }
  })), /*#__PURE__*/React__default.createElement(ErrorSummary, {
    errors: status.error,
    __source: {
      fileName: _jsxFileName$r,
      lineNumber: 41,
      columnNumber: 9
    }
  })));
};

var _jsxFileName$s = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Account/AccountIcon.tsx";
const AccountIcon = () => /*#__PURE__*/React__default.createElement(falconUi.Box, {
  css: {
    position: 'relative'
  },
  __source: {
    fileName: _jsxFileName$s,
    lineNumber: 7,
    columnNumber: 3
  }
}, /*#__PURE__*/React__default.createElement(falconUi.Icon, {
  src: "user",
  fallback: /*#__PURE__*/React__default.createElement(UserIconFallback, {
    __source: {
      fileName: _jsxFileName$s,
      lineNumber: 8,
      columnNumber: 32
    }
  }),
  __source: {
    fileName: _jsxFileName$s,
    lineNumber: 8,
    columnNumber: 5
  }
}), /*#__PURE__*/React__default.createElement(falconUi.Text, {
  color: "primary",
  fontSize: "xs",
  fontWeight: "bold",
  css: {
    whiteSpace: 'nowrap',
    position: 'absolute',
    bottom: '-10px',
    left: '50%',
    transform: 'translate(-50%, 0)'
  },
  __source: {
    fileName: _jsxFileName$s,
    lineNumber: 9,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "account.link",
  __source: {
    fileName: _jsxFileName$s,
    lineNumber: 21,
    columnNumber: 7
  }
})));

var _jsxFileName$t = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Account/NewAccount.tsx";
const NewAccount = ({
  onCreateNewAccount
}) => /*#__PURE__*/React__default.createElement(falconUi.GridLayout, {
  __source: {
    fileName: _jsxFileName$t,
    lineNumber: 9,
    columnNumber: 3
  }
}, /*#__PURE__*/React__default.createElement(falconUi.H4, {
  mb: "xs",
  __source: {
    fileName: _jsxFileName$t,
    lineNumber: 10,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "newAccount.title",
  __source: {
    fileName: _jsxFileName$t,
    lineNumber: 11,
    columnNumber: 7
  }
})), /*#__PURE__*/React__default.createElement(falconUi.Text, {
  __source: {
    fileName: _jsxFileName$t,
    lineNumber: 13,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "newAccount.benefitsHeader",
  __source: {
    fileName: _jsxFileName$t,
    lineNumber: 14,
    columnNumber: 7
  }
})), /*#__PURE__*/React__default.createElement(falconUi.List, {
  __source: {
    fileName: _jsxFileName$t,
    lineNumber: 16,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.I18n, {
  __source: {
    fileName: _jsxFileName$t,
    lineNumber: 17,
    columnNumber: 7
  }
}, t => [].concat(t('newAccount.benefitList', {
  returnObjects: true
})).map(x => /*#__PURE__*/React__default.createElement(falconUi.ListItem, {
  key: x,
  display: "flex",
  mb: "sm",
  __source: {
    fileName: _jsxFileName$t,
    lineNumber: 20,
    columnNumber: 13
  }
}, /*#__PURE__*/React__default.createElement(falconUi.Icon, {
  src: "check",
  size: "md",
  mr: "xs",
  stroke: "primaryLight",
  __source: {
    fileName: _jsxFileName$t,
    lineNumber: 21,
    columnNumber: 15
  }
}), x)))), /*#__PURE__*/React__default.createElement(falconUi.Button, {
  justifySelf: "end",
  variant: "secondary",
  onClick: () => onCreateNewAccount(),
  __source: {
    fileName: _jsxFileName$t,
    lineNumber: 28,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "newAccount.createAnAccount",
  __source: {
    fileName: _jsxFileName$t,
    lineNumber: 29,
    columnNumber: 7
  }
})));

var _jsxFileName$u = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Account/SignUpForm.tsx";
const SignUpForm = (_ref) => {
  let {
    onSuccess
  } = _ref,
      formProps = _objectWithoutPropertiesLoose(_ref, ["onSuccess"]);

  return /*#__PURE__*/React__default.createElement(falconFrontKit.SignUpFormProvider, {
    onSuccess: onSuccess,
    __source: {
      fileName: _jsxFileName$u,
      lineNumber: 12,
      columnNumber: 5
    }
  }, ({
    status,
    values
  }) => /*#__PURE__*/React__default.createElement(Form, _extends({
    id: "sign-up",
    i18nId: "signUp"
  }, formProps, {
    __source: {
      fileName: _jsxFileName$u,
      lineNumber: 14,
      columnNumber: 9
    }
  }), /*#__PURE__*/React__default.createElement(FormField, {
    name: "firstname",
    type: "text",
    required: true,
    autoComplete: "given-name",
    __source: {
      fileName: _jsxFileName$u,
      lineNumber: 15,
      columnNumber: 11
    }
  }), /*#__PURE__*/React__default.createElement(FormField, {
    name: "lastname",
    type: "text",
    required: true,
    autoComplete: "family-name",
    __source: {
      fileName: _jsxFileName$u,
      lineNumber: 16,
      columnNumber: 11
    }
  }), /*#__PURE__*/React__default.createElement(FormField, {
    name: "email",
    type: "email",
    required: true,
    autoComplete: "email",
    __source: {
      fileName: _jsxFileName$u,
      lineNumber: 17,
      columnNumber: 11
    }
  }), /*#__PURE__*/React__default.createElement(FormField, {
    name: "password",
    required: true,
    type: "password",
    __source: {
      fileName: _jsxFileName$u,
      lineNumber: 18,
      columnNumber: 11
    }
  }, ({
    field
  }) => /*#__PURE__*/React__default.createElement(PasswordRevealInput, _extends({}, field, {
    __source: {
      fileName: _jsxFileName$u,
      lineNumber: 19,
      columnNumber: 29
    }
  }))), /*#__PURE__*/React__default.createElement(FormField, {
    name: "confirmPassword",
    type: "password",
    validate: [falconFrontKit.requiredValidator, falconFrontKit.confirmPasswordValidator(values.password)],
    __source: {
      fileName: _jsxFileName$u,
      lineNumber: 21,
      columnNumber: 11
    }
  }, ({
    field
  }) => /*#__PURE__*/React__default.createElement(PasswordRevealInput, _extends({}, field, {
    __source: {
      fileName: _jsxFileName$u,
      lineNumber: 26,
      columnNumber: 29
    }
  }))), /*#__PURE__*/React__default.createElement(FormSubmit, {
    __source: {
      fileName: _jsxFileName$u,
      lineNumber: 29,
      columnNumber: 11
    }
  }), /*#__PURE__*/React__default.createElement(ErrorSummary, {
    errors: status.error,
    __source: {
      fileName: _jsxFileName$u,
      lineNumber: 30,
      columnNumber: 11
    }
  })));
};

const BlogPostLayout = falconUi.themed({
  tag: 'article',
  defaultTheme: {
    blogPostLayout: {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
      mb: 'xxl'
    }
  }
});

const BlogPostListLayout = falconUi.themed({
  tag: falconUi.List,
  defaultTheme: {
    blogPostListLayout: {
      display: 'grid',
      gridGap: 'xl',
      gridTemplateColumns: {
        xs: '1fr',
        md: 'repeat(6, 1fr)'
      },
      p: 'none',
      css: {
        listStyle: 'none'
      }
    }
  }
});

const BlogPostExcerptArea = {
  image: 'image',
  title: 'title',
  date: 'date',
  excerpt: 'excerpt',
  readMore: 'readMore'
};
const BlogPostExcerptLayout = falconUi.themed({
  tag: falconUi.Link,
  defaultTheme: {
    blogPostExcerptLayout: {
      display: 'grid',
      gridRowGap: 'xs',
      gridColumnGap: 'lg',
      color: 'black',
      gridTemplate: {
        xs: toGridTemplate([['1fr'], [BlogPostExcerptArea.image], [BlogPostExcerptArea.date], [BlogPostExcerptArea.title], [BlogPostExcerptArea.excerpt], [BlogPostExcerptArea.readMore]])
      },
      css: {
        textDecoration: 'none'
      }
    }
  }
});

var _jsxFileName$v = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/FormattedDate/FormattedDate.tsx";

const FormattedDateInnerDOM = (_ref) => {
  let {
    value,
    formatOptions
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["value", "formatOptions"]);

  const {
    dateTimeFormat
  } = falconFrontKit.useLocale();
  return /*#__PURE__*/React__default.createElement(falconUi.Text, _extends({}, rest, {
    __source: {
      fileName: _jsxFileName$v,
      lineNumber: 15,
      columnNumber: 10
    }
  }), dateTimeFormat(value, formatOptions));
};

FormattedDateInnerDOM.propTypes = {
  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]).isRequired,
  formatOptions: PropTypes.any
};
const FormattedDate = falconUi.themed({
  tag: FormattedDateInnerDOM,
  defaultProps: {
    formatOptions: undefined
  },
  defaultTheme: {
    formattedDate: {
      display: 'block',
      m: 'none'
    }
  }
});

var _jsxFileName$w = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Blog/BlogPostExcerpt.tsx";
const BlogPostExcerpt = props => {
  const {
    title,
    slug,
    date,
    image,
    excerpt
  } = props,
        rest = _objectWithoutPropertiesLoose(props, ["title", "slug", "date", "image", "excerpt"]);

  return /*#__PURE__*/React__default.createElement(BlogPostExcerptLayout, _extends({
    as: reactRouterDom.Link,
    to: slug
  }, rest, {
    __source: {
      fileName: _jsxFileName$w,
      lineNumber: 23,
      columnNumber: 5
    }
  }), image && /*#__PURE__*/React__default.createElement(falconUi.Image, {
    css: {
      height: 300
    },
    gridArea: BlogPostExcerptArea.image,
    src: image.url,
    alt: image.description,
    __source: {
      fileName: _jsxFileName$w,
      lineNumber: 25,
      columnNumber: 9
    }
  }), /*#__PURE__*/React__default.createElement(falconUi.H3, {
    gridArea: BlogPostExcerptArea.title,
    __source: {
      fileName: _jsxFileName$w,
      lineNumber: 27,
      columnNumber: 7
    }
  }, title), /*#__PURE__*/React__default.createElement(FormattedDate, {
    gridArea: BlogPostExcerptArea.date,
    value: date,
    __source: {
      fileName: _jsxFileName$w,
      lineNumber: 28,
      columnNumber: 7
    }
  }), /*#__PURE__*/React__default.createElement(falconUi.Text, {
    gridArea: BlogPostExcerptArea.excerpt,
    __source: {
      fileName: _jsxFileName$w,
      lineNumber: 29,
      columnNumber: 7
    }
  }, excerpt), /*#__PURE__*/React__default.createElement(falconUi.Text, {
    gridArea: BlogPostExcerptArea.readMore,
    css: {
      textDecoration: 'underline'
    },
    __source: {
      fileName: _jsxFileName$w,
      lineNumber: 30,
      columnNumber: 7
    }
  }, /*#__PURE__*/React__default.createElement(falconI18n.T, {
    id: "blog.readMore",
    __source: {
      fileName: _jsxFileName$w,
      lineNumber: 31,
      columnNumber: 9
    }
  })));
};
BlogPostExcerpt.propTypes = {
  title: PropTypes.string.isRequired,
  slug: PropTypes.string.isRequired,
  date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]).isRequired,
  excerpt: PropTypes.string.isRequired,
  // @ts-ignore https://github.com/DefinitelyTyped/DefinitelyTyped/issues/34692
  image: PropTypes.shape({
    url: PropTypes.string.isRequired,
    description: PropTypes.string.isRequired
  })
};

const BlogPostListPaginationLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultProps: {
    isPrevPage: false
  },
  defaultTheme: {
    blogPostsPaginationLayout: {
      display: 'flex',
      justifyContent: 'space-between',
      pt: 'lg',
      css: ({
        isPrevPage
      }) => ({
        justifyContent: isPrevPage ? 'space-between' : 'flex-end'
      })
    }
  }
});

var _jsxFileName$x = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Breadcrumbs/BreadcrumbLink.tsx";
const BreadcrumbLink = (_ref) => {
  let {
    to,
    children
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["to", "children"]);

  return /*#__PURE__*/React__default.createElement(falconUi.Breadcrumb, _extends({}, rest, {
    __source: {
      fileName: _jsxFileName$x,
      lineNumber: 8,
      columnNumber: 3
    }
  }), /*#__PURE__*/React__default.createElement(falconUi.Link, {
    as: reactRouterDom.Link,
    to: to,
    __source: {
      fileName: _jsxFileName$x,
      lineNumber: 9,
      columnNumber: 5
    }
  }, children));
};
BreadcrumbLink.propTypes = {
  to: PropTypes.string.isRequired
};

var _jsxFileName$y = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Breadcrumbs/Breadcrumbs.tsx";
const Breadcrumbs = (_ref) => {
  let {
    items
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["items"]);

  return /*#__PURE__*/React__default.createElement(falconUi.Breadcrumbs, _extends({}, rest, {
    __source: {
      fileName: _jsxFileName$y,
      lineNumber: 19,
      columnNumber: 3
    }
  }), items.map(item => item.urlPath ? /*#__PURE__*/React__default.createElement(BreadcrumbLink, {
    key: item.name,
    to: item.urlPath,
    __source: {
      fileName: _jsxFileName$y,
      lineNumber: 22,
      columnNumber: 9
    }
  }, item.name) : /*#__PURE__*/React__default.createElement(falconUi.Breadcrumb, {
    key: item.name,
    __source: {
      fileName: _jsxFileName$y,
      lineNumber: 26,
      columnNumber: 9
    }
  }, item.name)));
};
Breadcrumbs.propTypes = {
  // @ts-ignore https://github.com/DefinitelyTyped/DefinitelyTyped/issues/34692
  items: PropTypes.arrayOf(PropTypes.shape({
    name: PropTypes.string.isRequired,
    urlPath: PropTypes.string
  }).isRequired)
};
Breadcrumbs.defaultProps = {
  items: []
};

var _jsxFileName$z = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/InnerHtml/InnerHtml.tsx";

/**
 * TODO: think if this component should go into @deity/falcon-ui
 * @internal
 */
const InnerHTML = (_ref) => {
  let {
    html
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["html"]);

  return /*#__PURE__*/React__default.createElement(falconUi.Box, _extends({}, rest, {
    dangerouslySetInnerHTML: {
      __html: html
    },
    __source: {
      fileName: _jsxFileName$z,
      lineNumber: 14,
      columnNumber: 3
    }
  }));
};
InnerHTML.propTypes = {
  html: PropTypes.string
};

const CMSContent = falconUi.themed({
  tag: InnerHTML,
  defaultTheme: {
    cmsContent: {
      fontSize: 'md',
      css: ({
        theme
      }) => ({
        maxWidth: 740,
        margin: '0 auto',
        p: {
          marginTop: 0,
          marginBottom: theme.spacing.md
        },
        img: {
          objectFit: 'contain',
          maxWidth: '100%'
        },
        figure: {
          marginBottom: theme.spacing.xxl
        }
      })
    }
  }
});

const CategoryArea = {
  heading: 'heading',
  filters: 'filters',
  content: 'content',
  footer: 'footer'
};
const CategoryLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultTheme: {
    categoryLayout: {
      display: 'grid',
      gridGap: 'md',
      my: 'lg',
      // prettier-ignore
      gridTemplate: {
        xs: toGridTemplate([['1fr'], [CategoryArea.heading], [CategoryArea.filters], [CategoryArea.content], [CategoryArea.footer]]),
        md: toGridTemplate([['1fr', '3fr'], [CategoryArea.heading, CategoryArea.heading], [CategoryArea.filters, CategoryArea.content], [CategoryArea.footer, CategoryArea.footer]]),
        lg: toGridTemplate([['1fr', '4fr'], [CategoryArea.heading, CategoryArea.heading], [CategoryArea.filters, CategoryArea.content], [CategoryArea.footer, CategoryArea.footer]])
      },
      css: {
        position: 'relative'
      },
      variants: {
        noFilters: {
          // prettier-ignore
          gridTemplate: toGridTemplate([['1fr'], [CategoryArea.heading], [CategoryArea.content], [CategoryArea.footer]])
        }
      }
    }
  }
});

const ColorTile = falconUi.themed({
  tag: falconUi.Box,
  defaultProps: {
    color: 'black'
  },
  defaultTheme: {
    colorTile: {
      size: 'md',
      borderRadius: 'small',
      border: 'bold',
      borderColor: 'secondaryDark',
      css: ({
        color
      }) => ({
        backgroundColor: color
      })
    }
  }
});

var _jsxFileName$A = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Currency/CurrencyPicker.tsx";
const CurrencyPickerLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultTheme: {
    currencyPickerLayout: {
      css: {
        minWidth: 96
      }
    }
  }
});
const CurrencyPicker = (_ref) => {
  let {
    value,
    options,
    onChange,
    showCartWarning,
    id,
    label
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["value", "options", "onChange", "showCartWarning", "id", "label"]);

  const {
    locale,
    localeFallback
  } = falconFrontKit.useLocale();
  const formattedOptions = options.map(option => ({
    optionValue: option,
    optionLabel: falconFrontKit.getCurrencyLabel(option, locale || localeFallback)
  }));
  const selectOptions = React.useMemo(() => formattedOptions.map(({
    optionValue,
    optionLabel
  }) => ({
    value: optionValue,
    label: optionLabel
  })), [formattedOptions]);
  const {
    t
  } = falconI18n.useI18n();
  return /*#__PURE__*/React__default.createElement(CurrencyPickerLayout, {
    __source: {
      fileName: _jsxFileName$A,
      lineNumber: 53,
      columnNumber: 5
    }
  }, label && /*#__PURE__*/React__default.createElement(falconUi.Label, {
    htmlFor: id ? `currency-switcher-${id}` : 'currency-switcher',
    __source: {
      fileName: _jsxFileName$A,
      lineNumber: 54,
      columnNumber: 17
    }
  }, label), /*#__PURE__*/React__default.createElement(SelectInput, _extends({}, rest, {
    id: id ? `currency-switcher-${id}` : 'currency-switcher',
    value: value,
    options: selectOptions,
    "aria-label": label || t('currency.label'),
    onChange: e => {
      const confirmation = showCartWarning ? confirm(t('currency.changeNote')) : true;

      if (confirmation === true) {
        onChange(e.target.value);
      }
    },
    __source: {
      fileName: _jsxFileName$A,
      lineNumber: 55,
      columnNumber: 7
    }
  })));
};

var _jsxFileName$B = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Deferred/Deferred.tsx";

/**
 * React (^16.6) will consider rendering it in a low priority due to `hidden` attribute usage
 * @see https://github.com/oliviertassinari/react-swipeable-views/issues/453#issuecomment-417939459
 * @internal
 */
const Deferred = (_ref) => {
  let {
    until,
    type,
    children
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["until", "type", "children"]);

  const isHidden = until !== type;
  return /*#__PURE__*/React__default.createElement(falconUi.Box, _extends({
    key: `${type}-${isHidden}`,
    hidden: isHidden
  }, rest, {
    __source: {
      fileName: _jsxFileName$B,
      lineNumber: 19,
      columnNumber: 5
    }
  }), children);
};
Deferred.propTypes = {
  type: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
  until: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
};

var _jsxFileName$C = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Picker/Picker.tsx";
const PickerInnerDOM = (_ref) => {
  let {
    options,
    selected
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["options", "selected"]);

  return /*#__PURE__*/React__default.createElement(falconUi.Dropdown, _extends({}, rest, {
    __source: {
      fileName: _jsxFileName$C,
      lineNumber: 16,
      columnNumber: 3
    }
  }), /*#__PURE__*/React__default.createElement(falconUi.DropdownLabel, {
    __source: {
      fileName: _jsxFileName$C,
      lineNumber: 17,
      columnNumber: 5
    }
  }, selected && typeof selected === 'object' ? selected.label : selected), /*#__PURE__*/React__default.createElement(falconUi.DropdownMenu, {
    __source: {
      fileName: _jsxFileName$C,
      lineNumber: 18,
      columnNumber: 5
    }
  }, options.map(x => /*#__PURE__*/React__default.createElement(falconUi.DropdownMenuItem, {
    key: x.label,
    value: x.value,
    __source: {
      fileName: _jsxFileName$C,
      lineNumber: 20,
      columnNumber: 9
    }
  }, x.label))));
};
const Picker = falconUi.themed({
  tag: PickerInnerDOM,
  defaultTheme: {
    picker: {}
  }
});

var _jsxFileName$D = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/FalconScope/FalconScopePicker.tsx";
const FalconScopePicker = props => {
  const {
    t
  } = falconI18n.useI18n();
  const {
    available,
    current,
    set
  } = falconFrontKit.useFalconScope();
  const options = React.useMemo(() => available.map(x => ({
    value: x,
    label: t(`scopes.${x.id}`)
  })), [available, t]);
  const selected = {
    value: current,
    label: t(`scopes.${current.id}`)
  };

  if (options.length > 1) {
    return /*#__PURE__*/React__default.createElement(Picker, _extends({
      options: options,
      selected: selected,
      onChange: x => set(x.id)
    }, props, {
      __source: {
        fileName: _jsxFileName$D,
        lineNumber: 17,
        columnNumber: 12
      }
    }));
  }

  return null;
};

const FilterItemLayout = falconUi.themed({
  tag: falconUi.ListItem,
  defaultTheme: {
    filterItemLayout: {
      display: 'flex',
      alignItems: 'center',
      flexWrap: 'wrap',
      color: 'black',
      pr: 'xs',
      pb: 'xs',
      css: ({
        theme
      }) => ({
        cursor: 'pointer',
        ':hover': {
          color: theme.colors.primaryLight
        }
      })
    }
  }
});

var _jsxFileName$E = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Filters/FilterItem.tsx";
const FilterItem = ({
  item,
  onClick
}) => /*#__PURE__*/React__default.createElement(FilterItemLayout, {
  onClick: onClick,
  __source: {
    fileName: _jsxFileName$E,
    lineNumber: 11,
    columnNumber: 3
  }
}, item.title, " (", item.count, ")");

const FilterItemListLayout = falconUi.themed({
  tag: falconUi.List,
  defaultTheme: {
    filterItemListLayout: {
      css: {
        listStyle: 'none'
      }
    }
  }
});

var _jsxFileName$F = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Filters/SelectedFilterItemLayout.tsx";

const SelectedFilterItemLayoutInnerDOM = (_ref) => {
  let {
    onClick,
    children
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["onClick", "children"]);

  return /*#__PURE__*/React__default.createElement(falconUi.ListItem, _extends({}, rest, {
    __source: {
      fileName: _jsxFileName$F,
      lineNumber: 5,
      columnNumber: 3
    }
  }), /*#__PURE__*/React__default.createElement(falconUi.Icon, {
    src: "close",
    size: "md",
    mr: "xs",
    onClick: () => onClick && onClick(),
    css: ({
      theme
    }) => ({
      cursor: onClick ? 'pointer' : undefined,
      ':hover': {
        stroke: theme.colors.primaryLight
      }
    }),
    __source: {
      fileName: _jsxFileName$F,
      lineNumber: 6,
      columnNumber: 5
    }
  }), children);
};

const SelectedFilterItemLayout = falconUi.themed({
  tag: SelectedFilterItemLayoutInnerDOM,
  defaultTheme: {
    selectedFilterItemLayout: {
      display: 'flex',
      alignItems: 'center',
      flexWrap: 'wrap',
      pr: 'xs',
      pb: 'xs'
    }
  }
});

var _jsxFileName$G = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Filters/FilterDetails.tsx";
const FilterDetails = (_ref) => {
  let {
    initiallyOpen,
    children
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["initiallyOpen", "children"]);

  const [isOpen, setIsOpen] = React.useState(initiallyOpen);
  return /*#__PURE__*/React__default.createElement(falconUi.Details, _extends({
    open: isOpen
  }, rest, {
    defaultTheme: {
      filterDetails: {
        display: 'flex',
        flexDirection: 'column',
        css: props => ({
          '> :not(summary, style)': {
            display: props.open ? 'block' : 'none',
            flex: props.open ? '1' : 0
          },
          '> summary::-webkit-details-marker': {
            display: 'none'
          },
          '> summary:after': {
            display: 'block',
            content: props.open ? '"-"' : '"+"',
            marginLeft: props.theme.spacing.sm,
            fontSize: props.theme.fontSizes.md,
            lineHeight: 0.6,
            fontWeight: props.theme.fontWeights.bold,
            color: props.theme.colors.primary
          }
        })
      }
    },
    __source: {
      fileName: _jsxFileName$G,
      lineNumber: 19,
      columnNumber: 5
    }
  }), children({
    set: setIsOpen,
    on: isOpen,
    toggle: e => {
      if (e) {
        e.preventDefault();
      }

      setIsOpen(prev => !prev);
    }
  }));
};
FilterDetails.defaultProps = {
  initiallyOpen: false
};

const FilterDetailsSummaryLayout = falconUi.themed({
  tag: falconUi.Summary,
  defaultTheme: {
    filterDetailsSummaryLayout: {
      display: 'flex',
      alignItems: 'center',
      bg: 'transparent',
      m: 'none',
      px: 'none'
    }
  }
});

var _jsxFileName$H = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Filters/FilterTile.tsx";
const FilterTile = ({
  title,
  initiallyOpen,
  children
}) => /*#__PURE__*/React__default.createElement(FilterDetails, {
  initiallyOpen: initiallyOpen,
  __source: {
    fileName: _jsxFileName$H,
    lineNumber: 12,
    columnNumber: 3
  }
}, ({
  toggle
}) => /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(FilterDetailsSummaryLayout, {
  onClick: toggle,
  __source: {
    fileName: _jsxFileName$H,
    lineNumber: 15,
    columnNumber: 9
  }
}, /*#__PURE__*/React__default.createElement(falconUi.H4, {
  __source: {
    fileName: _jsxFileName$H,
    lineNumber: 16,
    columnNumber: 11
  }
}, title)), /*#__PURE__*/React__default.createElement(falconUi.DetailsContent, {
  __source: {
    fileName: _jsxFileName$H,
    lineNumber: 18,
    columnNumber: 9
  }
}, children)));
FilterDetails.defaultProps = {
  initiallyOpen: false
};

const FiltersPanelLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultTheme: {
    filtersPanelLayout: {
      display: 'grid',
      gridGap: 'sm',
      css: {
        width: '100%',
        alignContent: 'start'
      }
    }
  }
});

const SelectedFilterList = falconUi.themed({
  tag: falconUi.List,
  defaultTheme: {
    selectedFilterList: {}
  }
});

var _jsxFileName$I = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Filters/FiltersSummary.tsx";
const FiltersSummary = ({
  data
}) => /*#__PURE__*/React__default.createElement(falconFrontKit.SearchConsumer, {
  __source: {
    fileName: _jsxFileName$I,
    lineNumber: 11,
    columnNumber: 3
  }
}, ({
  state: {
    filters
  },
  removeFilter
}) => {
  if (!filters.length) {
    return null;
  }

  return /*#__PURE__*/React__default.createElement(SelectedFilterList, {
    __source: {
      fileName: _jsxFileName$I,
      lineNumber: 18,
      columnNumber: 9
    }
  }, data.map(({
    field,
    title
  }) => {
    const selectedFilterOptions = falconFrontKit.getSelectedFilterOptionsFor(data, field);

    if (selectedFilterOptions.length === 0) {
      return null;
    }

    return /*#__PURE__*/React__default.createElement(SelectedFilterItemLayout, {
      key: field,
      onClick: () => removeFilter(field),
      __source: {
        fileName: _jsxFileName$I,
        lineNumber: 27,
        columnNumber: 15
      }
    }, title, ": ", selectedFilterOptions.map(x => x.title || x.value).join(', '));
  }));
});

var _jsxFileName$J = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Filters/SingleFilter.tsx";
const SingleFilter = (_ref) => {
  let {
    options,
    selected,
    onChange
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["options", "selected", "onChange"]);

  const selectedOption = selected !== undefined ? options.find(x => x.value === selected) : undefined;
  return /*#__PURE__*/React__default.createElement(FilterItemListLayout, _extends({}, rest, {
    __source: {
      fileName: _jsxFileName$J,
      lineNumber: 21,
      columnNumber: 5
    }
  }), selectedOption && /*#__PURE__*/React__default.createElement(SelectedFilterItemLayout, {
    onClick: () => onChange(),
    __source: {
      fileName: _jsxFileName$J,
      lineNumber: 23,
      columnNumber: 9
    }
  }, selectedOption.title), !selectedOption && options.map(x => /*#__PURE__*/React__default.createElement(FilterItemLayout, {
    key: x.value,
    onClick: () => onChange(x.value),
    __source: {
      fileName: _jsxFileName$J,
      lineNumber: 27,
      columnNumber: 11
    }
  }, x.title, " (", x.count, ")")));
};

var _jsxFileName$K = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Filters/MultipleFilter.tsx";
const MultipleFilter = ({
  options,
  selected = [],
  onChange
}) => {
  const handleOnChange = (option, isSelected) => {
    if (isSelected) {
      onChange([...selected, option.value]);
    } else {
      onChange(selected.filter(value => value !== option.value));
    }
  };

  return /*#__PURE__*/React__default.createElement(FilterItemListLayout, {
    __source: {
      fileName: _jsxFileName$K,
      lineNumber: 23,
      columnNumber: 5
    }
  }, options.map(x => /*#__PURE__*/React__default.createElement(FilterItemLayout, {
    key: x.value,
    __source: {
      fileName: _jsxFileName$K,
      lineNumber: 25,
      columnNumber: 9
    }
  }, /*#__PURE__*/React__default.createElement(falconUi.Checkbox, {
    id: `${x.title}-${x.value}`,
    checked: selected.some(value => value === x.value),
    onChange: e => handleOnChange(x, e.target.checked),
    __source: {
      fileName: _jsxFileName$K,
      lineNumber: 26,
      columnNumber: 11
    }
  }), /*#__PURE__*/React__default.createElement(falconUi.Label, {
    ml: "sm",
    htmlFor: `${x.title}-${x.value}`,
    __source: {
      fileName: _jsxFileName$K,
      lineNumber: 31,
      columnNumber: 11
    }
  }, x.title, " (", x.count, ")"))));
};

var _jsxFileName$L = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Filters/ColorFilter.tsx";
const ColorFilter = (_ref) => {
  let {
    options,
    selected,
    onChange
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["options", "selected", "onChange"]);

  const selectedOption = selected !== undefined ? options.find(x => x.value === selected) : undefined;
  return /*#__PURE__*/React__default.createElement(FilterItemListLayout, _extends({
    display: "flex",
    flexWrap: "wrap"
  }, rest, {
    __source: {
      fileName: _jsxFileName$L,
      lineNumber: 17,
      columnNumber: 5
    }
  }), selectedOption && /*#__PURE__*/React__default.createElement(SelectedFilterItemLayout, {
    onClick: () => onChange(),
    __source: {
      fileName: _jsxFileName$L,
      lineNumber: 19,
      columnNumber: 9
    }
  }, /*#__PURE__*/React__default.createElement(ColorTile, {
    size: "lg",
    color: selectedOption.value,
    title: selectedOption.title,
    __source: {
      fileName: _jsxFileName$L,
      lineNumber: 20,
      columnNumber: 11
    }
  })), !selectedOption && options.map(x => /*#__PURE__*/React__default.createElement(FilterItemLayout, {
    key: x.value,
    onClick: () => onChange(x.value),
    __source: {
      fileName: _jsxFileName$L,
      lineNumber: 25,
      columnNumber: 11
    }
  }, /*#__PURE__*/React__default.createElement(ColorTile, {
    size: "lg",
    color: x.value,
    title: x.title,
    __source: {
      fileName: _jsxFileName$L,
      lineNumber: 26,
      columnNumber: 13
    }
  }))));
};

const Footer = falconUi.themed({
  tag: 'footer',
  defaultTheme: {
    footer: {
      pt: 'md',
      bgFullWidth: 'secondaryLight'
    }
  }
});

const FooterBanner = falconUi.themed({
  tag: falconUi.Box,
  defaultTheme: {
    footerBanner: {
      display: 'grid',
      gridGap: 'sm',
      m: 'none',
      p: 'none',
      color: 'secondaryText',
      bgFullWidth: 'secondary',
      css: {
        textAlign: 'center'
      }
    }
  }
});

var _jsxFileName$M = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Footer/Copyright.tsx";

const CopyrightInnerDOM = props => /*#__PURE__*/React__default.createElement(falconUi.Text, _extends({}, props, {
  __source: {
    fileName: _jsxFileName$M,
    lineNumber: 6,
    columnNumber: 3
  }
}), /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "copyright",
  year: new Date().getFullYear(),
  __source: {
    fileName: _jsxFileName$M,
    lineNumber: 7,
    columnNumber: 5
  }
}));

const Copyright = falconUi.themed({
  tag: CopyrightInnerDOM,
  defaultTheme: {
    copyright: {
      p: 'sm',
      color: 'secondaryText'
    }
  }
});

const FooterSectionListLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultTheme: {
    footerSectionListLayout: {
      display: 'flex',
      css: {
        flexDirection: 'row',
        justifyContent: 'space-around',
        justifyItems: 'center',
        flexWrap: 'wrap'
      }
    }
  }
});

const FooterSectionLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultTheme: {
    footerSectionLayout: {
      p: 'md',
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'flex-start',
      css: {
        minWidth: 250,
        textAlign: {
          md: 'unset',
          xs: 'center'
        },
        alignItems: {
          md: 'unset',
          xs: 'center'
        }
      }
    }
  }
});

const HeaderBanner = falconUi.themed({
  tag: falconUi.List,
  defaultTheme: {
    headerBanner: {
      display: 'flex',
      justifyContent: 'flex-end',
      bgFullWidth: 'secondaryLight',
      m: 'none',
      p: 'none',
      css: ({
        theme
      }) => ({
        listStyle: 'none',
        '> li': {
          padding: theme.spacing.xs
        }
      })
    }
  }
});

const HeaderBarArea = {
  logo: 'logo',
  signIn: 'signIn',
  cart: 'cart',
  search: 'search'
};
const HeaderBarLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultTheme: {
    headerBarLayout: {
      display: 'grid',
      py: 'sm',
      gridGap: 'sm',
      // prettier-ignore
      gridTemplate: toGridTemplate([['auto', '1fr', 'auto', 'auto'], [HeaderBarArea.logo, HeaderBarArea.search, HeaderBarArea.signIn, HeaderBarArea.cart]]),
      css: {
        alignItems: 'center'
      }
    }
  }
});

var _jsxFileName$N = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Image/Image.tsx";
const Image = props => {
  return /*#__PURE__*/React__default.createElement(falconUi.Image, _extends({}, props, {
    __source: {
      fileName: _jsxFileName$N,
      lineNumber: 8,
      columnNumber: 10
    }
  }));
};
Image.defaultProps = {
  loading: 'lazy'
};

const isNativeLoadingAttrSupported = typeof document !== 'undefined' && 'loading' in HTMLImageElement.prototype;
const useNativeLoadingAttrSupportCheck = () => {
  const [supported, setSupported] = React.useState(isNativeLoadingAttrSupported);
  React.useEffect(() => {
    if (supported !== isNativeLoadingAttrSupported) {
      setSupported(isNativeLoadingAttrSupported);
    }
  }, [supported]);
  return supported;
};

var _jsxFileName$O = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Router/RouterLink.tsx";
const RouterLink = props => /*#__PURE__*/React__default.createElement(falconUi.Link, _extends({
  as: reactRouterDom.Link
}, props, {
  __source: {
    fileName: _jsxFileName$O,
    lineNumber: 6,
    columnNumber: 64
  }
}));

var _jsxFileName$P = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Menu/MenuNavbar.tsx";
const MenuNavbar = ({
  items
}) => /*#__PURE__*/React__default.createElement(falconUi.Navbar, {
  __source: {
    fileName: _jsxFileName$P,
    lineNumber: 15,
    columnNumber: 3
  }
}, items.map(item => /*#__PURE__*/React__default.createElement(falconUi.NavbarItem, {
  key: item.urlPath,
  __source: {
    fileName: _jsxFileName$P,
    lineNumber: 17,
    columnNumber: 7
  }
}, /*#__PURE__*/React__default.createElement(RouterLink, {
  to: item.urlPath,
  p: "sm",
  __source: {
    fileName: _jsxFileName$P,
    lineNumber: 18,
    columnNumber: 9
  }
}, item.name), item.children && item.children.length > 0 && /*#__PURE__*/React__default.createElement(falconUi.NavbarItemMenu, {
  __source: {
    fileName: _jsxFileName$P,
    lineNumber: 22,
    columnNumber: 11
  }
}, /*#__PURE__*/React__default.createElement(falconUi.List, {
  width: "full",
  display: "grid",
  gridTemplateColumns: {
    xs: '1fr',
    sm: '1fr 1fr 1fr',
    md: '1fr 1fr 1fr 1fr',
    lg: '1fr 1fr 1fr 1fr 1fr'
  },
  __source: {
    fileName: _jsxFileName$P,
    lineNumber: 23,
    columnNumber: 13
  }
}, item.children.map(subItem => /*#__PURE__*/React__default.createElement(falconUi.ListItem, {
  key: subItem.urlPath,
  __source: {
    fileName: _jsxFileName$P,
    lineNumber: 34,
    columnNumber: 17
  }
}, /*#__PURE__*/React__default.createElement(RouterLink, {
  to: subItem.urlPath,
  display: "block",
  textDecoration: "underline",
  py: "xs",
  __source: {
    fileName: _jsxFileName$P,
    lineNumber: 35,
    columnNumber: 19
  }
}, subItem.name), subItem.children && subItem.children.length > 0 && /*#__PURE__*/React__default.createElement(falconUi.List, {
  __source: {
    fileName: _jsxFileName$P,
    lineNumber: 39,
    columnNumber: 21
  }
}, subItem.children.map(nextSubItem => /*#__PURE__*/React__default.createElement(falconUi.ListItem, {
  key: nextSubItem.urlPath,
  __source: {
    fileName: _jsxFileName$P,
    lineNumber: 41,
    columnNumber: 25
  }
}, /*#__PURE__*/React__default.createElement(RouterLink, {
  to: nextSubItem.urlPath,
  display: "block",
  py: "xs",
  __source: {
    fileName: _jsxFileName$P,
    lineNumber: 42,
    columnNumber: 27
  }
}, nextSubItem.name)))))))))));

const MiniCartLayoutArea = {
  items: 'items',
  cta: 'cta'
};
const MiniCartLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultTheme: {
    miniCartLayout: {
      display: 'grid',
      gridRowGap: 'md',
      // prettier-ignore
      gridTemplate: toGridTemplate([['1fr'], [MiniCartLayoutArea.items, '1fr'], [MiniCartLayoutArea.cta]]),
      css: {
        width: '100%',
        height: '100%'
      }
    }
  }
});

var _jsxFileName$Q = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Price/Price.tsx";

const PriceInnerDom = (_ref) => {
  let {
    value,
    formatOptions
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["value", "formatOptions"]);

  const {
    priceFormat
  } = falconFrontKit.useCurrency();
  return /*#__PURE__*/React__default.createElement(falconUi.Text, _extends({
    m: "lg"
  }, rest, {
    __source: {
      fileName: _jsxFileName$Q,
      lineNumber: 16,
      columnNumber: 5
    }
  }), priceFormat(value, formatOptions));
};

PriceInnerDom.propTypes = {
  value: PropTypes.number.isRequired
};
const Price = falconUi.themed({
  tag: PriceInnerDom,
  defaultProps: {
    value: 0.0,
    formatOptions: undefined,
    ellipsis: false
  },
  defaultTheme: {
    price: {
      display: 'block',
      m: 'none',
      css: {
        whiteSpace: 'nowrap',
        overflow: 'hidden'
      },
      variants: {
        old: {
          css: {
            textDecorationStyle: 'solid',
            textDecorationLine: 'line-through'
          }
        },
        special: {
          fontWeight: 'bold',
          css: {
            color: 'red'
          }
        }
      }
    }
  }
});

var _jsxFileName$R = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/MiniCart/MiniCartProduct.tsx";
const MiniCartProductArea = {
  empty: '.',
  thumb: 'thumb',
  price: 'price',
  productName: 'productName',
  modify: 'modify',
  remove: 'remove'
};
const miniCartProductTheme = {
  miniCartProduct: {
    display: 'grid',
    gridGap: 'xs',
    // prettier-ignore
    gridTemplate: toGridTemplate([['30px', '1fr', '2fr'], [MiniCartProductArea.empty, MiniCartProductArea.thumb, MiniCartProductArea.productName], [MiniCartProductArea.remove, MiniCartProductArea.thumb, MiniCartProductArea.price, '1fr'], [MiniCartProductArea.empty, MiniCartProductArea.thumb, MiniCartProductArea.modify]])
  }
};
const MiniCartProduct = ({
  product
}) => /*#__PURE__*/React__default.createElement(falconUi.Box, {
  defaultTheme: miniCartProductTheme,
  __source: {
    fileName: _jsxFileName$R,
    lineNumber: 32,
    columnNumber: 3
  }
}, /*#__PURE__*/React__default.createElement(falconUi.Image, {
  gridArea: MiniCartProductArea.thumb,
  src: product.thumbnailUrl,
  __source: {
    fileName: _jsxFileName$R,
    lineNumber: 33,
    columnNumber: 5
  }
}), /*#__PURE__*/React__default.createElement(falconUi.H4, {
  gridArea: MiniCartProductArea.productName,
  __source: {
    fileName: _jsxFileName$R,
    lineNumber: 34,
    columnNumber: 5
  }
}, product.name), /*#__PURE__*/React__default.createElement(Price, {
  gridArea: MiniCartProductArea.price,
  value: product.price,
  fontSize: "md",
  fontWeight: "bold",
  __source: {
    fileName: _jsxFileName$R,
    lineNumber: 35,
    columnNumber: 5
  }
}), /*#__PURE__*/React__default.createElement(falconShopData.RemoveCartItemMutation, {
  __source: {
    fileName: _jsxFileName$R,
    lineNumber: 36,
    columnNumber: 5
  }
}, removeCartItem => /*#__PURE__*/React__default.createElement(falconUi.Link, {
  gridArea: MiniCartProductArea.remove,
  display: "flex",
  alignItems: "center",
  onClick: () => removeCartItem({
    variables: {
      input: {
        id: product.id
      }
    },
    optimisticResponse: {
      removeCartItem: {
        __typename: 'RemoveCartItemPayload',
        id: product.id
      }
    }
  }),
  __source: {
    fileName: _jsxFileName$R,
    lineNumber: 38,
    columnNumber: 9
  }
}, /*#__PURE__*/React__default.createElement(falconUi.Icon, {
  size: "lg",
  stroke: "secondaryDark",
  src: "remove",
  mr: "xs",
  css: ({
    theme
  }) => ({
    ':hover': {
      stroke: theme.colors.primary
    }
  }),
  __source: {
    fileName: _jsxFileName$R,
    lineNumber: 49,
    columnNumber: 11
  }
}))), /*#__PURE__*/React__default.createElement(falconShopData.UpdateCartItemMutation, {
  __source: {
    fileName: _jsxFileName$R,
    lineNumber: 59,
    columnNumber: 5
  }
}, (updateCartItem, {
  loading,
  error
}) => /*#__PURE__*/React__default.createElement(falconUi.Box, {
  gridArea: MiniCartProductArea.modify,
  __source: {
    fileName: _jsxFileName$R,
    lineNumber: 61,
    columnNumber: 9
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.I18n, {
  __source: {
    fileName: _jsxFileName$R,
    lineNumber: 62,
    columnNumber: 11
  }
}, t => /*#__PURE__*/React__default.createElement(falconUi.NumberInput, {
  disabled: loading,
  name: "qty",
  value: product.qty,
  "aria-label": t('product.qtyFieldLabel'),
  onChange: ev => updateCartItem({
    variables: {
      input: {
        id: product.id,
        sku: product.sku,
        qty: parseInt(ev.target.value, 10)
      }
    }
  }),
  __source: {
    fileName: _jsxFileName$R,
    lineNumber: 64,
    columnNumber: 15
  }
})), !!error && /*#__PURE__*/React__default.createElement(falconUi.Text, {
  color: "error",
  __source: {
    fileName: _jsxFileName$R,
    lineNumber: 84,
    columnNumber: 23
  }
}, error.message))));

var _jsxFileName$S = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/MiniCart/MiniCart.tsx";
const MiniCart = ({
  onCheckout,
  items
}) => /*#__PURE__*/React__default.createElement(MiniCartLayout, {
  __source: {
    fileName: _jsxFileName$S,
    lineNumber: 14,
    columnNumber: 3
  }
}, /*#__PURE__*/React__default.createElement(falconUi.Box, {
  gridArea: MiniCartLayoutArea.items,
  css: props => Object.assign({}, prettyScrollbars(props.theme)),
  __source: {
    fileName: _jsxFileName$S,
    lineNumber: 15,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconUi.List, {
  __source: {
    fileName: _jsxFileName$S,
    lineNumber: 16,
    columnNumber: 7
  }
}, items.map((item, index) => {
  const isLastItem = index === items.length - 1;
  return /*#__PURE__*/React__default.createElement(falconUi.ListItem, {
    key: item.sku,
    pb: "none",
    __source: {
      fileName: _jsxFileName$S,
      lineNumber: 21,
      columnNumber: 13
    }
  }, /*#__PURE__*/React__default.createElement(MiniCartProduct, {
    product: item,
    __source: {
      fileName: _jsxFileName$S,
      lineNumber: 22,
      columnNumber: 15
    }
  }), !isLastItem && /*#__PURE__*/React__default.createElement(falconUi.Divider, {
    my: "md",
    __source: {
      fileName: _jsxFileName$S,
      lineNumber: 23,
      columnNumber: 31
    }
  }));
}))), /*#__PURE__*/React__default.createElement(falconUi.Box, {
  gridArea: MiniCartLayoutArea.cta,
  py: "sm",
  bgFullWidth: "secondaryLight",
  __source: {
    fileName: _jsxFileName$S,
    lineNumber: 29,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconUi.Button, {
  onClick: () => onCheckout(),
  css: {
    width: '100%'
  },
  height: "xl",
  __source: {
    fileName: _jsxFileName$S,
    lineNumber: 30,
    columnNumber: 7
  }
}, /*#__PURE__*/React__default.createElement(falconUi.Icon, {
  stroke: "white",
  size: "md",
  mr: "xs",
  src: "lock",
  __source: {
    fileName: _jsxFileName$S,
    lineNumber: 31,
    columnNumber: 9
  }
}), /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "miniCart.checkout",
  __source: {
    fileName: _jsxFileName$S,
    lineNumber: 32,
    columnNumber: 9
  }
}))));

var _jsxFileName$T = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/MiniCart/CartIcon.tsx";
const CartIcon = ({
  itemsQty
}) => /*#__PURE__*/React__default.createElement(falconUi.Box, {
  css: {
    position: 'relative'
  },
  __source: {
    fileName: _jsxFileName$T,
    lineNumber: 5,
    columnNumber: 3
  }
}, /*#__PURE__*/React__default.createElement(falconUi.Icon, {
  src: "cart",
  __source: {
    fileName: _jsxFileName$T,
    lineNumber: 6,
    columnNumber: 5
  }
}), !!itemsQty && /*#__PURE__*/React__default.createElement(falconUi.Badge, {
  borderRadius: "round",
  boxShadow: "pronounced",
  fontSize: "xs",
  size: "md",
  fontWeight: "bold",
  p: "none",
  css: {
    position: 'absolute',
    bottom: '-10px',
    right: '-10px'
  },
  __source: {
    fileName: _jsxFileName$T,
    lineNumber: 8,
    columnNumber: 7
  }
}, itemsQty));

const EmptyMiniCartLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultTheme: {
    emptyMiniCartLayout: {
      display: 'flex',
      flexWrap: 'wrap',
      alignItems: 'center',
      flexDirection: 'column'
    }
  }
});

var _jsxFileName$U = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/MiniCart/EmptyMiniCart.tsx";
const EmptyMiniCart = ({
  onGoShopping
}) => /*#__PURE__*/React__default.createElement(EmptyMiniCartLayout, {
  __source: {
    fileName: _jsxFileName$U,
    lineNumber: 10,
    columnNumber: 3
  }
}, /*#__PURE__*/React__default.createElement(falconUi.Text, {
  fontSize: "md",
  __source: {
    fileName: _jsxFileName$U,
    lineNumber: 11,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "miniCart.empty",
  __source: {
    fileName: _jsxFileName$U,
    lineNumber: 12,
    columnNumber: 7
  }
})), /*#__PURE__*/React__default.createElement(falconUi.Button, {
  onClick: () => onGoShopping(),
  mt: "lg",
  __source: {
    fileName: _jsxFileName$U,
    lineNumber: 14,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "miniCart.goShoppingButton",
  __source: {
    fileName: _jsxFileName$U,
    lineNumber: 15,
    columnNumber: 7
  }
})));

const NewsletterLayout = falconUi.themed({
  tag: falconUi.GridLayout,
  defaultProps: {
    css: {
      maxWidth: 560,
      margin: '0 auto',
      justifyItems: 'center'
    }
  }
});

var _jsxFileName$V = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Newsletter/Newsletter.tsx";
const Newsletter = () => /*#__PURE__*/React__default.createElement(NewsletterLayout, {
  __source: {
    fileName: _jsxFileName$V,
    lineNumber: 7,
    columnNumber: 3
  }
}, /*#__PURE__*/React__default.createElement(falconUi.H3, {
  __source: {
    fileName: _jsxFileName$V,
    lineNumber: 8,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "newsletter.title",
  __source: {
    fileName: _jsxFileName$V,
    lineNumber: 9,
    columnNumber: 7
  }
})), /*#__PURE__*/React__default.createElement(falconUi.Text, {
  __source: {
    fileName: _jsxFileName$V,
    lineNumber: 11,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "newsletter.message",
  __source: {
    fileName: _jsxFileName$V,
    lineNumber: 12,
    columnNumber: 7
  }
})), /*#__PURE__*/React__default.createElement(falconI18n.I18n, {
  __source: {
    fileName: _jsxFileName$V,
    lineNumber: 14,
    columnNumber: 5
  }
}, t => /*#__PURE__*/React__default.createElement(falconUi.Box, {
  as: "form",
  justifySelf: "stretch",
  __source: {
    fileName: _jsxFileName$V,
    lineNumber: 16,
    columnNumber: 9
  }
}, /*#__PURE__*/React__default.createElement(falconUi.Group, {
  __source: {
    fileName: _jsxFileName$V,
    lineNumber: 17,
    columnNumber: 11
  }
}, /*#__PURE__*/React__default.createElement(falconUi.Input, {
  type: "email",
  required: true,
  "aria-label": t('newsletter.emailPlaceholder'),
  placeholder: t('newsletter.emailPlaceholder'),
  __source: {
    fileName: _jsxFileName$V,
    lineNumber: 18,
    columnNumber: 13
  }
}), /*#__PURE__*/React__default.createElement(falconUi.Button, {
  as: "input",
  type: "submit",
  value: t('newsletter.subscribe'),
  flex: "none",
  __source: {
    fileName: _jsxFileName$V,
    lineNumber: 24,
    columnNumber: 13
  }
})), /*#__PURE__*/React__default.createElement(falconUi.Label, {
  htmlFor: "subscribe",
  my: "sm",
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  __source: {
    fileName: _jsxFileName$V,
    lineNumber: 26,
    columnNumber: 11
  }
}, /*#__PURE__*/React__default.createElement(falconUi.Checkbox, {
  id: "subscribe",
  required: true,
  mr: "xs",
  __source: {
    fileName: _jsxFileName$V,
    lineNumber: 27,
    columnNumber: 13
  }
}), " ", t('newsletter.consent')))));

const OrderLayoutArea = {
  status: 'status',
  items: 'items',
  summary: 'summary',
  divider: 'divider'
};
const OrderLayout = falconUi.themed({
  tag: 'article',
  defaultTheme: {
    orderLayout: {
      display: 'grid',
      gridGap: 'md',
      // prettier-ignore
      gridTemplate: {
        xs: toGridTemplate([['1fr'], [OrderLayoutArea.status], [OrderLayoutArea.items], [OrderLayoutArea.divider], [OrderLayoutArea.summary]]),
        md: toGridTemplate([['2fr', '1px', '1fr'], [OrderLayoutArea.status, OrderLayoutArea.status, OrderLayoutArea.status], [OrderLayoutArea.items, OrderLayoutArea.divider, OrderLayoutArea.summary]])
      }
    }
  }
});

const OrderItemSummaryArea = {
  thumb: 'thumb',
  name: 'name',
  price: 'price',
  details: 'details'
};
const OrderItemSummaryLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultTheme: {
    orderedItemSummaryLayout: {
      display: 'grid',
      gridGap: 'sm',
      fontSize: 'xs',
      css: ({
        maxThumbSize
      }) => ({
        gridTemplate: toGridTemplate([[`${maxThumbSize}px`, '1fr', 'auto'], [OrderItemSummaryArea.thumb, OrderItemSummaryArea.name, OrderItemSummaryArea.price], [OrderItemSummaryArea.thumb, OrderItemSummaryArea.details, OrderItemSummaryArea.price]])
      })
    }
  }
});
OrderItemSummaryLayout.propTypes = {
  maxThumbSize: PropTypes.number.isRequired
};

var _jsxFileName$W = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Order/OrderItemSummary.tsx";
const OrderItemSummary = props => {
  const thumbMaxSize = 80;
  return /*#__PURE__*/React__default.createElement(OrderItemSummaryLayout, {
    maxThumbSize: thumbMaxSize,
    __source: {
      fileName: _jsxFileName$W,
      lineNumber: 18,
      columnNumber: 5
    }
  }, /*#__PURE__*/React__default.createElement(falconUi.Image, {
    gridArea: OrderItemSummaryArea.thumb,
    src: props.thumbnailUrl,
    css: {
      maxWidth: `${thumbMaxSize}px`,
      maxHeight: `${thumbMaxSize}px`
    },
    __source: {
      fileName: _jsxFileName$W,
      lineNumber: 19,
      columnNumber: 7
    }
  }), /*#__PURE__*/React__default.createElement(falconUi.Text, {
    gridArea: OrderItemSummaryArea.name,
    fontWeight: "bold",
    __source: {
      fileName: _jsxFileName$W,
      lineNumber: 24,
      columnNumber: 7
    }
  }, props.name), /*#__PURE__*/React__default.createElement(Price, {
    gridArea: OrderItemSummaryArea.price,
    value: props.rowTotalInclTax,
    fontWeight: "bold",
    css: {
      textAlign: 'right'
    },
    __source: {
      fileName: _jsxFileName$W,
      lineNumber: 27,
      columnNumber: 7
    }
  }), /*#__PURE__*/React__default.createElement(falconUi.Box, {
    gridArea: OrderItemSummaryArea.details,
    __source: {
      fileName: _jsxFileName$W,
      lineNumber: 33,
      columnNumber: 7
    }
  }, /*#__PURE__*/React__default.createElement(PropertyRowLayout, {
    __source: {
      fileName: _jsxFileName$W,
      lineNumber: 34,
      columnNumber: 9
    }
  }, /*#__PURE__*/React__default.createElement(falconI18n.T, {
    id: "order.quantityLabel",
    __source: {
      fileName: _jsxFileName$W,
      lineNumber: 35,
      columnNumber: 11
    }
  }), /*#__PURE__*/React__default.createElement(falconUi.Text, {
    __source: {
      fileName: _jsxFileName$W,
      lineNumber: 36,
      columnNumber: 11
    }
  }, props.qty))));
};

var _jsxFileName$X = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Order/EmptyOrderList.tsx";
const EmptyOrderList = () => /*#__PURE__*/React__default.createElement(falconUi.FlexLayout, {
  flexDirection: "column",
  alignItems: "center",
  p: "sm",
  __source: {
    fileName: _jsxFileName$X,
    lineNumber: 7,
    columnNumber: 3
  }
}, /*#__PURE__*/React__default.createElement(falconUi.Text, {
  fontSize: "md",
  mb: "xs",
  __source: {
    fileName: _jsxFileName$X,
    lineNumber: 8,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "orderList.empty",
  __source: {
    fileName: _jsxFileName$X,
    lineNumber: 9,
    columnNumber: 7
  }
})), /*#__PURE__*/React__default.createElement(falconUi.Button, {
  as: reactRouterDom.Link,
  to: "/",
  __source: {
    fileName: _jsxFileName$X,
    lineNumber: 11,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "cart.goShoppingButton",
  __source: {
    fileName: _jsxFileName$X,
    lineNumber: 12,
    columnNumber: 7
  }
})));

const OrderListLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultTheme: {
    orderListLayout: {
      display: 'flex',
      flexDirection: 'column'
    }
  }
});

const OrderListItemArea = {
  id: 'id',
  createdAt: 'createdAt',
  shipTo: 'shipTo',
  grandTotal: 'grandTotal',
  status: 'status',
  actions: 'actions'
};
const OrderListItemLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultTheme: {
    orderListItemLayout: {
      display: 'grid',
      gridGap: {
        sm: 'none',
        md: 'sm'
      },
      py: 'sm',
      borderBottom: 'regular',
      gridTemplate: {
        xs: toGridTemplate([['1fr'], [OrderListItemArea.id], [OrderListItemArea.createdAt], [OrderListItemArea.shipTo], [OrderListItemArea.grandTotal], [OrderListItemArea.status], [OrderListItemArea.actions]]),
        md: toGridTemplate([['1fr', '1fr', '2fr', '1fr', '1fr', '1fr'], [OrderListItemArea.id, OrderListItemArea.createdAt, OrderListItemArea.shipTo, OrderListItemArea.grandTotal, OrderListItemArea.status, OrderListItemArea.actions]])
      }
    }
  }
});

const OrderListHeaderLayout = falconUi.themed({
  tag: OrderListItemLayout,
  defaultTheme: {
    orderListHeaderLayout: {
      fontWeight: 'bold',
      pb: 'xs',
      display: {
        xs: 'none',
        sm: 'none',
        md: 'grid'
      }
    }
  }
});

var _jsxFileName$Y = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Order/OrderListHeader.tsx";
const OrderListHeader = () => /*#__PURE__*/React__default.createElement(OrderListHeaderLayout, {
  __source: {
    fileName: _jsxFileName$Y,
    lineNumber: 8,
    columnNumber: 3
  }
}, /*#__PURE__*/React__default.createElement(falconUi.Box, {
  gridArea: OrderListItemArea.id,
  __source: {
    fileName: _jsxFileName$Y,
    lineNumber: 9,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "orderList.idLabel",
  __source: {
    fileName: _jsxFileName$Y,
    lineNumber: 10,
    columnNumber: 7
  }
})), /*#__PURE__*/React__default.createElement(falconUi.Box, {
  gridArea: OrderListItemArea.createdAt,
  __source: {
    fileName: _jsxFileName$Y,
    lineNumber: 12,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "orderList.createdAtLabel",
  __source: {
    fileName: _jsxFileName$Y,
    lineNumber: 13,
    columnNumber: 7
  }
})), /*#__PURE__*/React__default.createElement(falconUi.Box, {
  gridArea: OrderListItemArea.shipTo,
  __source: {
    fileName: _jsxFileName$Y,
    lineNumber: 15,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "orderList.shipToLabel",
  __source: {
    fileName: _jsxFileName$Y,
    lineNumber: 16,
    columnNumber: 7
  }
})), /*#__PURE__*/React__default.createElement(falconUi.Box, {
  gridArea: OrderListItemArea.grandTotal,
  __source: {
    fileName: _jsxFileName$Y,
    lineNumber: 18,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "orderList.grandTotalLabel",
  __source: {
    fileName: _jsxFileName$Y,
    lineNumber: 19,
    columnNumber: 7
  }
})), /*#__PURE__*/React__default.createElement(falconUi.Box, {
  gridArea: OrderListItemArea.status,
  __source: {
    fileName: _jsxFileName$Y,
    lineNumber: 21,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "orderList.statusLabel",
  __source: {
    fileName: _jsxFileName$Y,
    lineNumber: 22,
    columnNumber: 7
  }
})), /*#__PURE__*/React__default.createElement(falconUi.Box, {
  gridArea: OrderListItemArea.actions,
  __source: {
    fileName: _jsxFileName$Y,
    lineNumber: 24,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "orderList.actionsLabel",
  __source: {
    fileName: _jsxFileName$Y,
    lineNumber: 25,
    columnNumber: 7
  }
})));

const ProductLayoutArea = {
  back: 'back',
  gallery: 'gallery',
  sku: 'sku',
  title: 'title',
  description: 'description',
  cta: 'cta',
  price: 'price',
  meta: 'meta',
  empty: 'empty',
  options: 'options',
  error: 'error'
};
const ProductLayout = falconUi.themed({
  tag: 'article',
  defaultTheme: {
    productLayout: {
      display: 'grid',
      gridGap: 'sm',
      gridTemplate: {
        // prettier-ignore
        xs: toGridTemplate([['1fr'], [ProductLayoutArea.title], [ProductLayoutArea.sku], [ProductLayoutArea.gallery], [ProductLayoutArea.price], [ProductLayoutArea.error], [ProductLayoutArea.options], [ProductLayoutArea.cta], [ProductLayoutArea.description], [ProductLayoutArea.meta]]),
        // prettier-ignore
        md: toGridTemplate([['1.5fr', '1fr'], [ProductLayoutArea.gallery, ProductLayoutArea.sku], [ProductLayoutArea.gallery, ProductLayoutArea.title], [ProductLayoutArea.gallery, ProductLayoutArea.price], [ProductLayoutArea.gallery, ProductLayoutArea.options], [ProductLayoutArea.gallery, ProductLayoutArea.cta], [ProductLayoutArea.gallery, ProductLayoutArea.error], [ProductLayoutArea.gallery, ProductLayoutArea.description, '1fr'], [ProductLayoutArea.gallery, ProductLayoutArea.meta]])
      }
    }
  }
});

const ProductDescription = falconUi.themed({
  tag: InnerHTML,
  defaultTheme: {
    productDescription: {
      css: {
        p: {
          margin: 0
        }
      }
    }
  }
});

var _jsxFileName$Z = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Product/NoProductImagePlaceholder.tsx";
const NoProductImagePlaceholder = () => /*#__PURE__*/React__default.createElement(falconUi.Text, {
  __source: {
    fileName: _jsxFileName$Z,
    lineNumber: 6,
    columnNumber: 3
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "productGallery.noImage",
  __source: {
    fileName: _jsxFileName$Z,
    lineNumber: 7,
    columnNumber: 5
  }
}));

const productGalleryLayoutArea = {
  full: 'full',
  thumbs: 'thumbs'
};
const ProductGalleryLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultTheme: {
    productGalleryLayout: {
      display: 'grid',
      gridTemplate: {
        // prettier-ignore
        xs: toGridTemplate([['1fr'], [productGalleryLayoutArea.full], [productGalleryLayoutArea.thumbs]]),
        // prettier-ignore
        md: toGridTemplate([['100px', '1fr'], [productGalleryLayoutArea.thumbs, productGalleryLayoutArea.full]])
      }
    }
  }
});

const ProductGalleryThumbLayout = falconUi.themed({
  tag: 'button',
  defaultProps: {
    type: 'button'
  },
  defaultTheme: {
    productGalleryThumbLayout: {
      bg: 'transparent',
      border: 'regular',
      borderRadius: 'medium',
      borderColor: 'secondary',
      display: {
        xs: 'inline-flex',
        md: 'block'
      },
      mt: 'md',
      mr: {
        xs: 'sm',
        md: 'none'
      },
      px: 'xs',
      css: {
        cursor: 'pointer',
        height: {
          xs: 70,
          md: 'auto'
        },
        width: {
          xs: 70,
          md: 'auto'
        }
      },
      variants: {
        selected: {
          borderColor: 'primary'
        }
      }
    }
  }
});

var _jsxFileName$_ = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Product/ProductGallery.tsx";
const ProductGallery = ({
  items
}) => {
  const scrollableElement = React.useRef(null);
  const [activeElementIndex, setActiveElementIndex] = React.useState(0);
  const {
    t
  } = falconI18n.useI18n();

  const scrollToItem = elementIndex => {
    const container = scrollableElement.current;

    if (container) {
      container.scrollTo({
        left: elementIndex * container.clientWidth,
        behavior: 'smooth'
      });
    }
  };

  const handleScroll = event => {
    const container = event.target; // needed because event will be nullified after callback

    if (container) {
      window.requestAnimationFrame(() => {
        // Find the item that has the largest visible portion
        const newIndex = Math.floor(items.length * container.scrollLeft / container.scrollWidth + 0.5);
        setActiveElementIndex(newIndex);
      });
    }
  };

  React.useEffect(() => {
    // set Default Image to be active
    const defaultItemIndex = items.findIndex(item => item.isDefault);

    if (defaultItemIndex !== -1) {
      scrollToItem(defaultItemIndex);
    }
  }, [items]);

  if (!items.length) {
    return /*#__PURE__*/React__default.createElement(NoProductImagePlaceholder, {
      __source: {
        fileName: _jsxFileName$_,
        lineNumber: 54,
        columnNumber: 12
      }
    });
  }

  if (items.length === 1) {
    return /*#__PURE__*/React__default.createElement(falconUi.Image, {
      src: items[0].full,
      alt: t('productGallery.imageAlt'),
      __source: {
        fileName: _jsxFileName$_,
        lineNumber: 58,
        columnNumber: 12
      }
    });
  }

  return /*#__PURE__*/React__default.createElement(ProductGalleryLayout, {
    __source: {
      fileName: _jsxFileName$_,
      lineNumber: 62,
      columnNumber: 5
    }
  }, /*#__PURE__*/React__default.createElement(falconUi.Box, {
    gridArea: productGalleryLayoutArea.thumbs,
    __source: {
      fileName: _jsxFileName$_,
      lineNumber: 63,
      columnNumber: 7
    }
  }, items.map((item, index) => {
    if (item.thumbnail) {
      return /*#__PURE__*/React__default.createElement(ProductGalleryThumbLayout, {
        onClick: () => scrollToItem(index),
        "aria-label": t('productGallery.showImageOf', {
          index: index + 1,
          total: items.length
        }),
        variant: index === activeElementIndex && 'selected',
        key: item.full,
        __source: {
          fileName: _jsxFileName$_,
          lineNumber: 67,
          columnNumber: 15
        }
      }, /*#__PURE__*/React__default.createElement(falconUi.Image, {
        key: item.thumbnail,
        src: item.thumbnail,
        alt: t('productGallery.imageAlt'),
        __source: {
          fileName: _jsxFileName$_,
          lineNumber: 73,
          columnNumber: 17
        }
      }));
    }

    return null;
  })), /*#__PURE__*/React__default.createElement(falconUi.Swipeable, {
    gridArea: productGalleryLayoutArea.full,
    ref: scrollableElement,
    onScroll: handleScroll,
    alignItems: "center",
    css: noScrollbars(),
    __source: {
      fileName: _jsxFileName$_,
      lineNumber: 81,
      columnNumber: 7
    }
  }, items.map(item => /*#__PURE__*/React__default.createElement(falconUi.SwipeableItem, {
    key: item.thumbnail,
    as: falconUi.Image,
    src: item.full,
    alt: t('productGallery.imageAlt'),
    __source: {
      fileName: _jsxFileName$_,
      lineNumber: 89,
      columnNumber: 11
    }
  }))));
};

var _jsxFileName$$ = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Product/ProductMeta.tsx";
const ProductMeta = ({
  meta,
  onChange,
  activeItem
}) => /*#__PURE__*/React__default.createElement(React__default.Fragment, null, meta.map(item => /*#__PURE__*/React__default.createElement(falconUi.Details, {
  key: item.name,
  open: activeItem && activeItem === item,
  __source: {
    fileName: _jsxFileName$$,
    lineNumber: 16,
    columnNumber: 7
  }
}, /*#__PURE__*/React__default.createElement(falconUi.Summary, {
  variant: "secondary",
  onClick: () => onChange && onChange(item),
  __source: {
    fileName: _jsxFileName$$,
    lineNumber: 17,
    columnNumber: 9
  }
}, item.name), /*#__PURE__*/React__default.createElement(falconUi.DetailsContent, {
  __source: {
    fileName: _jsxFileName$$,
    lineNumber: 20,
    columnNumber: 9
  }
}, item.content))));

const ProductOptionRadio = falconUi.themed({
  tag: falconUi.Radio,
  defaultTheme: {
    productOptionRadio: {
      mr: 'none',
      css: {
        cursor: 'pointer',
        height: 60,
        width: 60
      }
    }
  }
});

var _jsxFileName$10 = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Product/ProductOptionRadioGroupField.tsx";
const ProductOptionRadioGroupField = ({
  label,
  name,
  values,
  disabled
}) => /*#__PURE__*/React__default.createElement(falconFrontKit.Field, {
  name: name,
  label: label,
  validate: [falconFrontKit.requiredValidator],
  __source: {
    fileName: _jsxFileName$10,
    lineNumber: 31,
    columnNumber: 3
  }
}, ({
  field,
  error
}) => {
  return /*#__PURE__*/React__default.createElement(falconUi.Box, {
    as: "fieldset",
    p: "none",
    border: "none",
    __source: {
      fileName: _jsxFileName$10,
      lineNumber: 34,
      columnNumber: 9
    }
  }, label && /*#__PURE__*/React__default.createElement(falconUi.Box, {
    as: "legend",
    mb: "xs",
    __source: {
      fileName: _jsxFileName$10,
      lineNumber: 36,
      columnNumber: 13
    }
  }, label), values.map(value => /*#__PURE__*/React__default.createElement(falconUi.Label, {
    htmlFor: `${field.id}-${value.id}`,
    key: value.id,
    mr: "xs",
    style: {
      display: 'inline-flex'
    },
    __source: {
      fileName: _jsxFileName$10,
      lineNumber: 41,
      columnNumber: 13
    }
  }, /*#__PURE__*/React__default.createElement(ProductOptionRadio, _extends({}, field, {
    id: `${field.id}-${value.id}`,
    value: value.id,
    checked: value.id === field.value,
    disabled: disabled,
    icon: /*#__PURE__*/React__default.createElement("div", {
      __source: {
        fileName: _jsxFileName$10,
        lineNumber: 48,
        columnNumber: 23
      }
    }, value.label),
    __source: {
      fileName: _jsxFileName$10,
      lineNumber: 42,
      columnNumber: 15
    }
  })))), /*#__PURE__*/React__default.createElement(FormFieldError, {
    __source: {
      fileName: _jsxFileName$10,
      lineNumber: 52,
      columnNumber: 11
    }
  }, field.invalid ? error : null));
});

var _jsxFileName$11 = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Product/ProductOptionList.tsx";
const ProductOptionList = props => {
  return /*#__PURE__*/React__default.createElement(falconUi.GridLayout, {
    gridGap: "sm",
    gridArea: props.gridArea,
    __source: {
      fileName: _jsxFileName$11,
      lineNumber: 14,
      columnNumber: 5
    }
  }, props.items.map(({
    label,
    id,
    values
  }) => /*#__PURE__*/React__default.createElement(ProductOptionRadioGroupField, {
    key: id,
    label: label,
    name: `${props.name}.${id}`,
    values: values,
    disabled: props.disabled,
    __source: {
      fileName: _jsxFileName$11,
      lineNumber: 16,
      columnNumber: 9
    }
  })));
};
ProductOptionList.defaultProps = {
  items: []
};

/**
 * Available options that can be changed. Currently ProductConfigurator handles only product configurable options.
 */

/**
 * ProductConfigurator takes care of handling data relaed to product options available to be selected before adding to cart.
 * Currently only configurable options are supported, in the future that class will handle bundled products as well as custom product attributes.
 */
class ProductConfigurator extends React__default.Component {
  constructor(...args) {
    super(...args);
    this.state = {
      selectedConfigurableOptions: {}
    };

    this.handleProductConfigurationChange = (type, ev) => {
      const {
        name,
        value
      } = ev.target;

      if (type === 'configurableOption') {
        this.handleConfigurationOptionChange(name, value);
      }
    };

    this.isValueSelected = (type, name, value) => {
      if (type === 'configurableOption') {
        return this.state.selectedConfigurableOptions.get(name) === value;
      }

      return false;
    };
  }

  /**
   * Handles change of configurable product option
   * @param {string} name name of the option
   * @param {any} value value of changed option
   */
  handleConfigurationOptionChange(name, value) {
    this.setState(state => ({
      selectedConfigurableOptions: Object.assign({}, state.selectedConfigurableOptions, {
        [name]: value
      })
    }), () => {
      // when state is set then update form manager
      this.props.onChange('options', falconFrontKit.formProductOptionsToInput(this.state.selectedConfigurableOptions));
    });
  }

  render() {
    return this.props.children({
      handleProductConfigurationChange: this.handleProductConfigurationChange,
      isValueSelected: this.isValueSelected
    });
  }

}

const ProductListLayout = falconUi.themed({
  tag: falconUi.List,
  defaultTheme: {
    productListLayout: {
      display: 'grid',
      gridTemplateColumns: 'repeat(auto-fill,minmax(300px,1fr))',
      gridAutoRows: '280px',
      gridGap: 'sm',
      m: 'none',
      p: 'none',
      css: {
        listStyle: 'none'
      }
    }
  }
});

const EmptyProductListLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultTheme: {
    emptyProductListLayout: {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
      p: 'sm'
    }
  }
});

var _jsxFileName$12 = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Product/EmptyProductList.tsx";
const EmptyProductList = () => /*#__PURE__*/React__default.createElement(EmptyProductListLayout, {
  __source: {
    fileName: _jsxFileName$12,
    lineNumber: 7,
    columnNumber: 3
  }
}, /*#__PURE__*/React__default.createElement(falconUi.Text, {
  fontSize: "md",
  mb: "xs",
  __source: {
    fileName: _jsxFileName$12,
    lineNumber: 8,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "productList.empty",
  __source: {
    fileName: _jsxFileName$12,
    lineNumber: 9,
    columnNumber: 7
  }
})));

const ProductCardLayout = falconUi.themed({
  tag: reactRouterDom.Link,
  defaultTheme: {
    productCardLayout: {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
      color: 'secondaryText',
      css: {
        height: '100%',
        textDecoration: 'none',
        overflow: 'hidden',
        cursor: 'pointer'
      }
    }
  }
});

var _jsxFileName$13 = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Product/ProductPrice.tsx";
const ProductPrice = (_ref) => {
  let {
    regular,
    special,
    min
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["regular", "special", "min"]);

  const {
    t
  } = falconI18n.useI18n();

  if (min) {
    return /*#__PURE__*/React__default.createElement(falconUi.Box, {
      display: "flex",
      alignItems: "center",
      __source: {
        fileName: _jsxFileName$13,
        lineNumber: 16,
        columnNumber: 7
      }
    }, t('price.from'), " ", /*#__PURE__*/React__default.createElement(Price, _extends({
      ml: "xs",
      value: min
    }, rest, {
      __source: {
        fileName: _jsxFileName$13,
        lineNumber: 17,
        columnNumber: 27
      }
    })));
  }

  return special ? /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Price, _extends({
    value: regular,
    fontSize: "md"
  }, rest, {
    variant: "old",
    mr: "xs",
    __source: {
      fileName: _jsxFileName$13,
      lineNumber: 23,
      columnNumber: 7
    }
  })), /*#__PURE__*/React__default.createElement(Price, _extends({
    value: special,
    fontSize: "md"
  }, rest, {
    variant: "special",
    __source: {
      fileName: _jsxFileName$13,
      lineNumber: 24,
      columnNumber: 7
    }
  }))) : /*#__PURE__*/React__default.createElement(Price, _extends({
    value: regular,
    fontSize: "md"
  }, rest, {
    __source: {
      fileName: _jsxFileName$13,
      lineNumber: 27,
      columnNumber: 5
    }
  }));
};
ProductPrice.propTypes = {
  regular: PropTypes.number.isRequired,
  special: PropTypes.number
};

var _jsxFileName$14 = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Product/ProductCard.tsx";
const ProductCard = ({
  name,
  thumbnail,
  urlPath,
  price
}) => {
  return /*#__PURE__*/React__default.createElement(ProductCardLayout, {
    to: urlPath,
    __source: {
      fileName: _jsxFileName$14,
      lineNumber: 16,
      columnNumber: 5
    }
  }, thumbnail && /*#__PURE__*/React__default.createElement(Image, {
    css: {
      height: '100%',
      width: '100%',
      flex: '1 1 100%',
      minHeight: '0%'
    },
    src: thumbnail,
    alt: name,
    loading: "lazy",
    __source: {
      fileName: _jsxFileName$14,
      lineNumber: 18,
      columnNumber: 9
    }
  }), /*#__PURE__*/React__default.createElement(falconUi.Text, {
    py: "xs",
    ellipsis: true,
    __source: {
      fileName: _jsxFileName$14,
      lineNumber: 25,
      columnNumber: 7
    }
  }, name), /*#__PURE__*/React__default.createElement(falconUi.FlexLayout, {
    __source: {
      fileName: _jsxFileName$14,
      lineNumber: 28,
      columnNumber: 7
    }
  }, /*#__PURE__*/React__default.createElement(ProductPrice, _extends({}, price, {
    fontSize: "md",
    __source: {
      fileName: _jsxFileName$14,
      lineNumber: 29,
      columnNumber: 9
    }
  }))));
};
ProductCard.propTypes = {
  name: PropTypes.string.isRequired,
  urlPath: PropTypes.string.isRequired,
  // @ts-ignore https://github.com/DefinitelyTyped/DefinitelyTyped/issues/34692
  price: PropTypes.shape({
    regular: PropTypes.number.isRequired,
    special: PropTypes.number,
    min: PropTypes.number
  }).isRequired,
  thumbnail: PropTypes.string
};

var _jsxFileName$15 = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Product/ProductList.tsx";
class ProductList extends React__default.Component {
  render() {
    const {
      items
    } = this.props;

    if (!items.length) {
      return /*#__PURE__*/React__default.createElement(EmptyProductList, {
        __source: {
          fileName: _jsxFileName$15,
          lineNumber: 24,
          columnNumber: 14
        }
      });
    }

    return /*#__PURE__*/React__default.createElement(ProductListLayout, {
      __source: {
        fileName: _jsxFileName$15,
        lineNumber: 28,
        columnNumber: 7
      }
    }, items.map(item => /*#__PURE__*/React__default.createElement(falconUi.ListItem, {
      key: item.id,
      __source: {
        fileName: _jsxFileName$15,
        lineNumber: 30,
        columnNumber: 11
      }
    }, /*#__PURE__*/React__default.createElement(ProductCard, _extends({}, item, {
      __source: {
        fileName: _jsxFileName$15,
        lineNumber: 31,
        columnNumber: 13
      }
    })))));
  }

}
ProductList.propTypes = {
  items: PropTypes.arrayOf(PropTypes.object.isRequired)
};
ProductList.defaultProps = {
  items: []
};

var _jsxFileName$16 = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Product/ProductTierPrices.tsx";
const ProductTierPrices = (_ref) => {
  let {
    items: tierPrices
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["items"]);

  const {
    priceFormat
  } = falconFrontKit.useCurrency();

  if (!Array.isArray(tierPrices) || !tierPrices.length) {
    return null;
  }

  return /*#__PURE__*/React__default.createElement(falconUi.Box, _extends({}, rest, {
    __source: {
      fileName: _jsxFileName$16,
      lineNumber: 22,
      columnNumber: 5
    }
  }), tierPrices.map(x => /*#__PURE__*/React__default.createElement(falconUi.Text, {
    key: x.qty,
    __source: {
      fileName: _jsxFileName$16,
      lineNumber: 24,
      columnNumber: 9
    }
  }, /*#__PURE__*/React__default.createElement(falconI18n.T, {
    id: "product.tierPriceDescription",
    qty: x.qty,
    price: priceFormat(x.value),
    discount: x.discount,
    __source: {
      fileName: _jsxFileName$16,
      lineNumber: 25,
      columnNumber: 11
    }
  }))));
};
ProductTierPrices.propTypes = {
  // @ts-ignore https://github.com/DefinitelyTyped/DefinitelyTyped/issues/34692
  items: PropTypes.arrayOf(PropTypes.shape({
    qty: PropTypes.number.isRequired,
    value: PropTypes.number.isRequired,
    discount: PropTypes.number.isRequired
  }))
};

var _jsxFileName$17 = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Responsive/Responsive.tsx";

const ResponsiveInner = props => {
  const {
    theme,
    width,
    height
  } = props,
        rest = _objectWithoutPropertiesLoose(props, ["theme", "width", "height"]);

  let responsiveProps = {};

  if (width !== undefined) {
    responsiveProps = Object.assign({}, responsiveProps, {
      minWidth: theme.breakpoints[width] || width
    });
  }

  if (height !== undefined) {
    responsiveProps = Object.assign({}, responsiveProps, {
      minHeight: theme.breakpoints[height] || height
    });
  }

  return /*#__PURE__*/React__default.createElement(MediaQuery, _extends({}, responsiveProps, rest, {
    __source: {
      fileName: _jsxFileName$17,
      lineNumber: 32,
      columnNumber: 10
    }
  }));
};

const Responsive = falconUi.withTheme(ResponsiveInner);

var _jsxFileName$18 = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/Sidebar/Sidebar.tsx";
const Sidebar = ({
  close,
  isOpen,
  side,
  children
}) => /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(falconUi.Portal, {
  __source: {
    fileName: _jsxFileName$18,
    lineNumber: 13,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconUi.Sidebar, {
  visible: isOpen,
  side: side,
  __source: {
    fileName: _jsxFileName$18,
    lineNumber: 14,
    columnNumber: 7
  }
}, children), /*#__PURE__*/React__default.createElement(falconUi.Backdrop, {
  as: falconUi.Portal,
  visible: isOpen,
  onClick: () => close && close(),
  __source: {
    fileName: _jsxFileName$18,
    lineNumber: 17,
    columnNumber: 7
  }
})));
Sidebar.propTypes = {
  isOpen: PropTypes.bool,
  close: PropTypes.func,
  side: PropTypes.oneOf(['left', 'right'])
};
Sidebar.defaultProps = {
  side: 'right'
};

const SortOrderPickerLayout = falconUi.themed({
  tag: falconUi.Box,
  defaultTheme: {
    sortOrderPickerLayout: {
      display: 'flex',
      flexWrap: 'wrap',
      alignItems: 'center'
    }
  }
});

var _jsxFileName$19 = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/SortOrder/SortOrderPicker.tsx";
const SortOrderPicker = ({
  items,
  value,
  onChange
}) => /*#__PURE__*/React__default.createElement(SortOrderPickerLayout, {
  __source: {
    fileName: _jsxFileName$19,
    lineNumber: 13,
    columnNumber: 3
  }
}, /*#__PURE__*/React__default.createElement(falconUi.Text, {
  mr: "sm",
  __source: {
    fileName: _jsxFileName$19,
    lineNumber: 14,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconI18n.T, {
  id: "productList.sort.title",
  __source: {
    fileName: _jsxFileName$19,
    lineNumber: 15,
    columnNumber: 7
  }
})), /*#__PURE__*/React__default.createElement(falconUi.Box, {
  display: "flex",
  __source: {
    fileName: _jsxFileName$19,
    lineNumber: 17,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconUi.Dropdown, {
  css: {
    width: '100%',
    minWidth: 200
  },
  onChange: onChange,
  __source: {
    fileName: _jsxFileName$19,
    lineNumber: 18,
    columnNumber: 7
  }
}, /*#__PURE__*/React__default.createElement(falconUi.DropdownLabel, {
  __source: {
    fileName: _jsxFileName$19,
    lineNumber: 19,
    columnNumber: 9
  }
}, value.name), /*#__PURE__*/React__default.createElement(falconUi.DropdownMenu, {
  __source: {
    fileName: _jsxFileName$19,
    lineNumber: 20,
    columnNumber: 9
  }
}, items.map(x => /*#__PURE__*/React__default.createElement(falconUi.DropdownMenuItem, {
  key: x.name,
  value: x,
  __source: {
    fileName: _jsxFileName$19,
    lineNumber: 22,
    columnNumber: 13
  }
}, x.name))))));

var _jsxFileName$1a = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/ShippingMethod/ShippingMethodDetails.tsx";
const ShippingMethodDetails = ({
  carrierTitle,
  methodTitle,
  amount
}) => /*#__PURE__*/React__default.createElement(falconUi.FlexLayout, {
  justifyContent: "space-between",
  __source: {
    fileName: _jsxFileName$1a,
    lineNumber: 12,
    columnNumber: 3
  }
}, /*#__PURE__*/React__default.createElement(falconUi.FlexLayout, {
  __source: {
    fileName: _jsxFileName$1a,
    lineNumber: 13,
    columnNumber: 5
  }
}, /*#__PURE__*/React__default.createElement(falconUi.Text, {
  fontWeight: "bold",
  __source: {
    fileName: _jsxFileName$1a,
    lineNumber: 14,
    columnNumber: 7
  }
}, `${carrierTitle}`), methodTitle && /*#__PURE__*/React__default.createElement(falconUi.Text, {
  pl: "xs",
  color: "secondaryText",
  __source: {
    fileName: _jsxFileName$1a,
    lineNumber: 15,
    columnNumber: 23
  }
}, `(${methodTitle})`)), /*#__PURE__*/React__default.createElement(Price, {
  value: amount,
  __source: {
    fileName: _jsxFileName$1a,
    lineNumber: 17,
    columnNumber: 5
  }
}));
ShippingMethodDetails.propTypes = {
  carrierTitle: PropTypes.string.isRequired,
  methodTitle: PropTypes.string,
  amount: PropTypes.number.isRequired
};

var _jsxFileName$1b = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/SEO/JsonLd.tsx";
// Schema markup - https://schema.org/docs/gs.html
// Schema testing tool - https://search.google.com/structured-data/testing-tool/u/0/

const JsonLd = ({
  item
}) => /*#__PURE__*/React__default.createElement("script", {
  type: "application/ld+json",
  dangerouslySetInnerHTML: {
    __html: JSON.stringify(item)
  },
  __source: {
    fileName: _jsxFileName$1b,
    lineNumber: 8,
    columnNumber: 3
  }
});
JsonLd.propTypes = {
  item: PropTypes.object
};
JsonLd.defaultProps = {
  item: {}
};

var _jsxFileName$1c = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/SEO/BlogPostSchema.tsx";

function getWordCount(string) {
  return string.trim().split(/\s+/).length;
}

function addBackslash(slug) {
  return slug[0] === '/' ? slug : `/${slug}`;
}

/**
 * Get the schema data for a blog.
 * @param  blog
 */
const getBlogSchemaData = blog => {
  var _blog$image, _blog$author;

  if (!blog) {
    return null;
  }

  const schema = {
    '@context': 'https://schema.org',
    '@type': 'BlogPosting',
    headline: blog.title,
    dateCreated: blog.date,
    dateModified: blog.modified,
    description: blog.excerpt
  };

  if (blog != null && blog.content) {
    schema.articleBody = blog.content;
    schema.wordcount = getWordCount(blog.content);
  }

  if (blog != null && (_blog$image = blog.image) != null && _blog$image.url) {
    schema.image = blog.image.url;
  }

  if (blog != null && blog.slug) {
    schema.url = addBackslash(blog.slug);
  }

  if (blog != null && (_blog$author = blog.author) != null && _blog$author.name) {
    schema.author = {
      '@type': 'Person',
      name: blog.author.name
    };
  }

  return schema;
};

const BlogPostSchema = ({
  blog
}) => {
  const schemaData = getBlogSchemaData(blog);
  return /*#__PURE__*/React__default.createElement(JsonLd, {
    item: schemaData,
    __source: {
      fileName: _jsxFileName$1c,
      lineNumber: 84,
      columnNumber: 10
    }
  });
};

var _jsxFileName$1d = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/SEO/ProductSchema.tsx";
/**
 * Get the final price of a product
 * @param {*} price
 */

const getProductFinalPrice = price => {
  const {
    regular,
    special
  } = price;

  if (special > 0 && special < regular) {
    return special;
  }

  return regular;
};
/**
 * Get the image for a product
 * @param {*} product
 */


const getProductImage = product => {
  const {
    gallery = [],
    thumbnail = null
  } = product;

  if (gallery.length) {
    return gallery[0].thumbnail;
  }

  if (thumbnail) {
    return thumbnail;
  }

  return null;
};

/**
 * Get the schema data for a product.
 * @param product
 * @param fallbackCurrency currency to be used when product does not have one
 */
const getProductSchemaData = (product, fallbackCurrency) => {
  if (!product) {
    return null;
  }

  const schema = {
    '@context': 'http://schema.org',
    '@type': 'Product',
    name: product.name,
    image: getProductImage(product),
    sku: product.sku,
    description: product.description,
    offers: {
      '@type': 'Offer',
      priceCurrency: product.currency ? product.currency : fallbackCurrency,
      price: getProductFinalPrice(product.price),
      availability: 'http://schema.org/InStock'
    }
  };

  if (product.urlPath) {
    schema.url = product.urlPath;
  }

  return schema;
};

const ProductSchema = ({
  product
}) => {
  const {
    currency
  } = falconFrontKit.useCurrency();
  const schemaData = getProductSchemaData(product, currency);
  return /*#__PURE__*/React__default.createElement(JsonLd, {
    item: schemaData,
    __source: {
      fileName: _jsxFileName$1d,
      lineNumber: 95,
      columnNumber: 10
    }
  });
};
const ProductListSchema = ({
  items
}) => {
  const {
    currency
  } = falconFrontKit.useCurrency();

  if (!items.length) {
    return null;
  }

  const products = items.map(item => {
    return getProductSchemaData(item, currency);
  });
  const schemaData = {
    '@context': 'http://schema.org',
    '@graph': products
  };
  return /*#__PURE__*/React__default.createElement(JsonLd, {
    item: schemaData,
    __source: {
      fileName: _jsxFileName$1d,
      lineNumber: 112,
      columnNumber: 10
    }
  });
};

var _jsxFileName$1e = "/home/vsts/work/1/s/packages/falcon-ui-kit/src/SEO/OrganizationSchema.tsx";
const OrganizationSchema = props => {
  const {
    logo,
    name,
    url
  } = props,
        rest = _objectWithoutPropertiesLoose(props, ["logo", "name", "url"]);

  const schemaData = Object.assign({
    '@context': 'https://schema.org',
    '@type': 'Organization',
    name,
    url,
    logo
  }, rest);
  return /*#__PURE__*/React__default.createElement(JsonLd, {
    item: schemaData,
    __source: {
      fileName: _jsxFileName$1e,
      lineNumber: 23,
      columnNumber: 10
    }
  });
};

exports.AccountIcon = AccountIcon;
exports.AddAddressForm = AddAddressForm;
exports.AddressCard = AddressCard;
exports.AddressCardLayout = AddressCardLayout;
exports.AddressDetails = AddressDetails;
exports.AddressDetailsLayout = AddressDetailsLayout;
exports.AddressFormFields = AddressFormFields;
exports.AddressListLayout = AddressListLayout;
exports.AppLayout = AppLayout;
exports.BlogPostExcerpt = BlogPostExcerpt;
exports.BlogPostExcerptArea = BlogPostExcerptArea;
exports.BlogPostExcerptLayout = BlogPostExcerptLayout;
exports.BlogPostLayout = BlogPostLayout;
exports.BlogPostListLayout = BlogPostListLayout;
exports.BlogPostListPaginationLayout = BlogPostListPaginationLayout;
exports.BlogPostSchema = BlogPostSchema;
exports.BreadcrumbLink = BreadcrumbLink;
exports.Breadcrumbs = Breadcrumbs;
exports.CMSContent = CMSContent;
exports.CartIcon = CartIcon;
exports.CategoryArea = CategoryArea;
exports.CategoryLayout = CategoryLayout;
exports.CheckboxFormField = CheckboxFormField;
exports.CheckboxFormFieldLayout = CheckboxFormFieldLayout;
exports.ColorFilter = ColorFilter;
exports.ColorTile = ColorTile;
exports.Copyright = Copyright;
exports.CountryPicker = CountryPicker;
exports.CreditCardInput = CreditCardInput;
exports.CurrencyPicker = CurrencyPicker;
exports.CurrencyPickerLayout = CurrencyPickerLayout;
exports.Deferred = Deferred;
exports.EditAddressForm = EditAddressForm;
exports.EmptyMiniCart = EmptyMiniCart;
exports.EmptyMiniCartLayout = EmptyMiniCartLayout;
exports.EmptyOrderList = EmptyOrderList;
exports.EmptyProductList = EmptyProductList;
exports.EmptyProductListLayout = EmptyProductListLayout;
exports.Error = Error;
exports.ErrorListLayout = ErrorListLayout;
exports.ErrorSummary = ErrorSummary;
exports.FalconScopePicker = FalconScopePicker;
exports.FilterDetails = FilterDetails;
exports.FilterDetailsSummaryLayout = FilterDetailsSummaryLayout;
exports.FilterItem = FilterItem;
exports.FilterItemLayout = FilterItemLayout;
exports.FilterItemListLayout = FilterItemListLayout;
exports.FilterTile = FilterTile;
exports.FiltersPanelLayout = FiltersPanelLayout;
exports.FiltersSummary = FiltersSummary;
exports.FixCenteredLayout = FixCenteredLayout;
exports.Footer = Footer;
exports.FooterBanner = FooterBanner;
exports.FooterSectionLayout = FooterSectionLayout;
exports.FooterSectionListLayout = FooterSectionListLayout;
exports.ForgotPasswordForm = ForgotPasswordForm;
exports.Form = Form;
exports.FormErrorSummary = FormErrorSummary;
exports.FormField = FormField;
exports.FormFieldArea = FormFieldArea;
exports.FormFieldError = FormFieldError;
exports.FormFieldLabel = FormFieldLabel;
exports.FormFieldLayout = FormFieldLayout;
exports.FormSubmit = FormSubmit;
exports.FormattedDate = FormattedDate;
exports.HeaderBanner = HeaderBanner;
exports.HeaderBarArea = HeaderBarArea;
exports.HeaderBarLayout = HeaderBarLayout;
exports.Image = Image;
exports.InnerHTML = InnerHTML;
exports.InvalidResetPasswordToken = InvalidResetPasswordToken;
exports.JsonLd = JsonLd;
exports.Loader = Loader;
exports.MenuNavbar = MenuNavbar;
exports.MiniCart = MiniCart;
exports.MiniCartLayout = MiniCartLayout;
exports.MiniCartLayoutArea = MiniCartLayoutArea;
exports.MiniCartProduct = MiniCartProduct;
exports.MiniCartProductArea = MiniCartProductArea;
exports.MultipleFilter = MultipleFilter;
exports.NewAccount = NewAccount;
exports.Newsletter = Newsletter;
exports.NewsletterLayout = NewsletterLayout;
exports.NoProductImagePlaceholder = NoProductImagePlaceholder;
exports.NotFound = NotFound;
exports.OperationError = OperationError;
exports.OrderItemSummary = OrderItemSummary;
exports.OrderItemSummaryArea = OrderItemSummaryArea;
exports.OrderItemSummaryLayout = OrderItemSummaryLayout;
exports.OrderLayout = OrderLayout;
exports.OrderLayoutArea = OrderLayoutArea;
exports.OrderListHeader = OrderListHeader;
exports.OrderListHeaderLayout = OrderListHeaderLayout;
exports.OrderListItemArea = OrderListItemArea;
exports.OrderListItemLayout = OrderListItemLayout;
exports.OrderListLayout = OrderListLayout;
exports.OrganizationSchema = OrganizationSchema;
exports.PageLayout = PageLayout;
exports.PasswordRevealInput = PasswordRevealInput;
exports.Picker = Picker;
exports.PickerInnerDOM = PickerInnerDOM;
exports.Price = Price;
exports.ProductCard = ProductCard;
exports.ProductCardLayout = ProductCardLayout;
exports.ProductConfigurator = ProductConfigurator;
exports.ProductDescription = ProductDescription;
exports.ProductGallery = ProductGallery;
exports.ProductGalleryLayout = ProductGalleryLayout;
exports.ProductGalleryThumbLayout = ProductGalleryThumbLayout;
exports.ProductLayout = ProductLayout;
exports.ProductLayoutArea = ProductLayoutArea;
exports.ProductList = ProductList;
exports.ProductListLayout = ProductListLayout;
exports.ProductListSchema = ProductListSchema;
exports.ProductMeta = ProductMeta;
exports.ProductOptionList = ProductOptionList;
exports.ProductOptionRadio = ProductOptionRadio;
exports.ProductOptionRadioGroupField = ProductOptionRadioGroupField;
exports.ProductPrice = ProductPrice;
exports.ProductSchema = ProductSchema;
exports.ProductTierPrices = ProductTierPrices;
exports.PropertyRowLayout = PropertyRowLayout;
exports.RadioFormField = RadioFormField;
exports.RadioFormFieldLayout = RadioFormFieldLayout;
exports.RadioInput = RadioInput;
exports.RegionPicker = RegionPicker;
exports.ResetPasswordForm = ResetPasswordForm;
exports.ResetPasswordSuccess = ResetPasswordSuccess;
exports.Responsive = Responsive;
exports.RouterLink = RouterLink;
exports.SelectInput = SelectInput;
exports.SelectedFilterItemLayout = SelectedFilterItemLayout;
exports.SelectedFilterList = SelectedFilterList;
exports.ShippingMethodDetails = ShippingMethodDetails;
exports.Sidebar = Sidebar;
exports.SidebarContentLayout = SidebarContentLayout;
exports.SidebarLayout = SidebarLayout;
exports.SignInForm = SignInForm;
exports.SignInIcon = SignInIcon;
exports.SignUpForm = SignUpForm;
exports.SingleFilter = SingleFilter;
exports.SortOrderPicker = SortOrderPicker;
exports.SortOrderPickerLayout = SortOrderPickerLayout;
exports.TwoColumnsLayout = TwoColumnsLayout;
exports.TwoColumnsLayoutArea = TwoColumnsLayoutArea;
exports.UserIconFallback = UserIconFallback;
exports.getAddressType = getAddressType;
exports.isNativeLoadingAttrSupported = isNativeLoadingAttrSupported;
exports.lineClamp = lineClamp;
exports.noScrollbars = noScrollbars;
exports.placeholder = placeholder;
exports.prettyScrollbars = prettyScrollbars;
exports.productGalleryLayoutArea = productGalleryLayoutArea;
exports.toGridTemplate = toGridTemplate;
exports.useNativeLoadingAttrSupportCheck = useNativeLoadingAttrSupportCheck;
//# sourceMappingURL=falcon-ui-kit.cjs.js.map
