import React from 'react';
import { FieldProps as FormikFieldProps } from 'formik';
import { IValidator } from '@deity/falcon-front-kit';
import { ThemingProps } from '@deity/falcon-ui';
export declare type FormFieldRenderProps<TValue = any> = {
    form: FormikFieldProps<TValue>['form'] & {
        id?: number | string;
    };
    field: FormikFieldProps<TValue>['field'] & React.InputHTMLAttributes<HTMLInputElement> & React.SelectHTMLAttributes<HTMLSelectElement> & ThemingProps & {
        id?: string;
        placeholder?: string;
        invalid: boolean;
    };
};
export declare type FormFieldProps<TValue = any> = {
    id?: number | string;
    name: string;
    label?: string;
    placeholder?: string;
    /**
     * Allows you to extends default set of validators which are calculated based on HTML Input `type` attribute,
     * also if `required`, `min` or `max` HTML Input Attributes are passed, then corresponding validator will be automatically added.
     *
     * Please pass empty array (`[]`) in order to disable all default validators.
     * @see https://github.com/deity-io/falcon-platform/blob/db40dc1c61fc17eb3276cdeb7a46c6ba77337314/packages/falcon-front-kit/src/Forms/getDefaultInputValidators.ts#L9
     * @see https://www.w3schools.com/html/html_form_attributes.asp
     */
    validate?: IValidator[];
    children?: (props: FormFieldRenderProps<TValue>) => React.ReactNode;
} & React.InputHTMLAttributes<HTMLInputElement> & React.SelectHTMLAttributes<HTMLSelectElement> & ThemingProps;
export declare const FormField: React.SFC<FormFieldProps>;
//# sourceMappingURL=FormField.d.ts.map