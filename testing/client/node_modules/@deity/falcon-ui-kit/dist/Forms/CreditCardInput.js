"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.CreditCardInput = void 0;

var _extends2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/extends"));

var _inheritsLoose2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/inheritsLoose"));

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _reactCreditCardInput = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react-credit-card-input"));

var _falconUi = /*#__PURE__*/require("@deity/falcon-ui");

var _falconI18n = /*#__PURE__*/require("@deity/falcon-i18n");

var CreditCardLayout = /*#__PURE__*/(0, _falconUi.themed)({
  tag: _falconUi.Box,
  defaultTheme: {
    creditCardLayout: {
      css: function css(_ref) {
        var theme = _ref.theme;
        return {
          'label:after': {
            paddingLeft: theme.spacing.sm,
            paddingRight: theme.spacing.sm
          },
          input: {
            fontSize: theme.fontSizes.sm
          }
        };
      }
    }
  }
});

var CreditCardInputInner = /*#__PURE__*/function (_React$Component) {
  (0, _inheritsLoose2.default)(CreditCardInputInner, _React$Component);

  function CreditCardInputInner(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      number: undefined,
      expiry: undefined,
      cvc: undefined,
      name: undefined
    };
    return _this;
  }

  var _proto = CreditCardInputInner.prototype;

  _proto.componentDidUpdate = function componentDidUpdate(_prevProps, prevState) {
    var prevNumber = prevState.number,
        prevExpiry = prevState.expiry,
        prevCvc = prevState.cvc,
        prevName = prevState.name;
    var _this$state = this.state,
        number = _this$state.number,
        expiry = _this$state.expiry,
        cvc = _this$state.cvc,
        name = _this$state.name;

    if (number && expiry && cvc && name && (prevNumber !== number || prevCvc !== cvc || prevExpiry !== expiry || prevName !== name)) {
      this.props.onCompletion(this.state);
    }
  };

  _proto.render = function render() {
    var _this2 = this;

    var theme = this.props.theme;
    return /*#__PURE__*/_react.default.createElement(_falconI18n.I18n, null, function (t) {
      return /*#__PURE__*/_react.default.createElement(CreditCardLayout, null, /*#__PURE__*/_react.default.createElement(_falconUi.Box, {
        my: "xs"
      }, /*#__PURE__*/_react.default.createElement(_falconUi.Input, {
        my: "xs",
        autoComplete: "cc-name",
        name: "cc-name",
        placeholder: t('creditCard.namePlaceholder'),
        value: _this2.state.name,
        onChange: function onChange(_ref2) {
          var name = _ref2.target.value;

          _this2.setState({
            name: name
          });
        }
      })), /*#__PURE__*/_react.default.createElement(_reactCreditCardInput.default, {
        customTextLabels: {
          expiryError: {
            invalidExpiryDate: t('creditCard.errors.invalidExpiryDate'),
            monthOutOfRange: t('creditCard.errors.monthOutOfRange'),
            yearOutOfRange: t('creditCard.errors.yearOutOfRange'),
            dateOutOfRange: t('creditCard.errors.dateOutOfRange')
          },
          invalidCardNumber: t('creditCard.errors.invalidCardNumber'),
          invalidCvc: t('creditCard.errors.invalidCvc'),
          cardNumberPlaceholder: t('creditCard.numberPlaceholder'),
          expiryPlaceholder: t('creditCard.expiryPlaceholder'),
          cvcPlaceholder: t('creditCard.cvcPlaceholder')
        },
        fieldStyle: {
          border: '1px solid',
          borderColor: theme.colors.secondaryDark
        } // TODO: change any for better types
        ,
        cardNumberInputRenderer: function cardNumberInputRenderer(_ref3) {
          var handleCardNumberChange = _ref3.handleCardNumberChange,
              props = _ref3.props;
          return /*#__PURE__*/_react.default.createElement(_falconUi.Input, (0, _extends2.default)({}, props, {
            onChange: handleCardNumberChange(function (e) {
              return _this2.setState({
                number: e.target.value
              });
            })
          }));
        },
        cardExpiryInputRenderer: function cardExpiryInputRenderer(_ref4) {
          var handleCardExpiryChange = _ref4.handleCardExpiryChange,
              props = _ref4.props;
          return /*#__PURE__*/_react.default.createElement(_falconUi.Input, (0, _extends2.default)({}, props, {
            onChange: handleCardExpiryChange(function (e) {
              return _this2.setState({
                expiry: e.target.value
              });
            })
          }));
        },
        cardCVCInputRenderer: function cardCVCInputRenderer(_ref5) {
          var handleCardCVCChange = _ref5.handleCardCVCChange,
              props = _ref5.props;
          return /*#__PURE__*/_react.default.createElement(_falconUi.Input, (0, _extends2.default)({}, props, {
            onChange: handleCardCVCChange(function (e) {
              return _this2.setState({
                cvc: e.target.value
              });
            })
          }));
        }
      }));
    });
  };

  return CreditCardInputInner;
}(_react.default.Component);

var CreditCardInput = /*#__PURE__*/(0, _falconUi.withTheme)(CreditCardInputInner);
exports.CreditCardInput = CreditCardInput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,