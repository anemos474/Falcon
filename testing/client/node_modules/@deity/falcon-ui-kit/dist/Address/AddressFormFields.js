"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.AddressFormFields = void 0;

var _extends2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/extends"));

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _formik = /*#__PURE__*/require("formik");

var _falconI18n = /*#__PURE__*/require("@deity/falcon-i18n");

var _falconShopData = /*#__PURE__*/require("@deity/falcon-shop-data");

var _falconUi = /*#__PURE__*/require("@deity/falcon-ui");

var _Forms = /*#__PURE__*/require("../Forms");

var _Layouts = /*#__PURE__*/require("../Layouts");

var _Country = /*#__PURE__*/require("../Country");

var _Loader = /*#__PURE__*/require("../Loader");

var AddressFormFields = function AddressFormFields(props) {
  var twoColumns = props.twoColumns,
      askDefault = props.askDefault,
      askEmail = props.askEmail,
      autoCompleteSection = props.autoCompleteSection;

  var _useI18n = (0, _falconI18n.useI18n)(),
      t = _useI18n.t;

  var _useField = (0, _formik.useField)('country'),
      selectedCountry = _useField[0].value;

  var getAutoComplete = function getAutoComplete(attribute) {
    return [autoCompleteSection, attribute].filter(Boolean).join(' ');
  };

  var askDefaultFields = /*#__PURE__*/_react.default.createElement(_falconUi.Box, {
    mb: "sm"
  }, /*#__PURE__*/_react.default.createElement(_Forms.CheckboxFormField, {
    name: "defaultShipping"
  }), /*#__PURE__*/_react.default.createElement(_Forms.CheckboxFormField, {
    name: "defaultBilling"
  })); // the form content, not including default address fields and submit button(s)


  var mainContent = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_falconUi.GridLayout, {
    gridArea: twoColumns ? _Layouts.TwoColumnsLayoutArea.left : null
  }, askEmail && /*#__PURE__*/_react.default.createElement(_Forms.FormField, {
    name: "email",
    type: "email",
    required: true
  }), /*#__PURE__*/_react.default.createElement(_Forms.FormField, {
    name: "company",
    autoComplete: getAutoComplete('company')
  }), /*#__PURE__*/_react.default.createElement(_Forms.FormField, {
    name: "firstname",
    required: true,
    autoComplete: getAutoComplete('given-name')
  }), /*#__PURE__*/_react.default.createElement(_Forms.FormField, {
    name: "lastname",
    required: true,
    autoComplete: getAutoComplete('family-name')
  }), /*#__PURE__*/_react.default.createElement(_Forms.FormField, {
    name: "telephone",
    required: true,
    autoComplete: getAutoComplete('tel')
  })), /*#__PURE__*/_react.default.createElement(_falconUi.GridLayout, {
    gridArea: twoColumns ? _Layouts.TwoColumnsLayoutArea.right : null
  }, /*#__PURE__*/_react.default.createElement(_Forms.FormField, {
    name: "street1",
    required: true,
    autoComplete: getAutoComplete('address-line1')
  }), /*#__PURE__*/_react.default.createElement(_Forms.FormField, {
    name: "street2",
    autoComplete: getAutoComplete('address-line2')
  }), /*#__PURE__*/_react.default.createElement(_Forms.FormField, {
    name: "postcode",
    required: true,
    autoComplete: getAutoComplete('postal-code')
  }), /*#__PURE__*/_react.default.createElement(_Forms.FormField, {
    name: "city",
    required: true,
    autoComplete: getAutoComplete('address-level2')
  }), /*#__PURE__*/_react.default.createElement(_Forms.FormField, {
    name: "country",
    placeholder: t('addressForm.countryFieldPlaceholder'),
    required: true,
    autoComplete: getAutoComplete('country')
  }, function (_ref) {
    var field = _ref.field,
        form = _ref.form;
    return /*#__PURE__*/_react.default.createElement(_falconShopData.CountryListQuery, {
      passLoading: true
    }, function (_ref2) {
      var _ref2$data$countryLis = _ref2.data.countryList,
          countryList = _ref2$data$countryLis === void 0 ? {
        items: []
      } : _ref2$data$countryLis;
      return /*#__PURE__*/_react.default.createElement(_Country.CountryPicker, (0, _extends2.default)({}, field, {
        options: countryList.items,
        onChange: function onChange(e) {
          form.setFieldValue(field.name, e);
          form.setFieldValue('region', null);
        }
      }));
    });
  }), selectedCountry && selectedCountry.id ? /*#__PURE__*/_react.default.createElement(_falconShopData.RegionListQuery, {
    passLoading: true,
    variables: {
      countryId: selectedCountry.id
    }
  }, function (_ref3) {
    var _ref3$data$regionList = _ref3.data.regionList,
        regionList = _ref3$data$regionList === void 0 ? {
      items: []
    } : _ref3$data$regionList,
        loading = _ref3.loading;

    if (!regionList.items.length && !loading) {
      return null;
    }

    if (loading) {
      return /*#__PURE__*/_react.default.createElement(_Loader.Loader, null);
    }

    return /*#__PURE__*/_react.default.createElement(_falconUi.Box, {
      position: "relative"
    }, /*#__PURE__*/_react.default.createElement(_Forms.FormField, {
      name: "region",
      required: true,
      placeholder: t('addressForm.regionFieldPlaceholder'),
      autoComplete: getAutoComplete('region')
    }, function (_ref4) {
      var field = _ref4.field,
          form = _ref4.form;
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, loading && /*#__PURE__*/_react.default.createElement(_Loader.Loader, {
        variant: "overlaySmall"
      }), /*#__PURE__*/_react.default.createElement(_Country.RegionPicker, (0, _extends2.default)({}, field, {
        options: regionList.items,
        onChange: function onChange(e) {
          form.setFieldValue(field.name, e);
        }
      })));
    }));
  }) : null));

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, askDefault && askDefaultFields, twoColumns ? /*#__PURE__*/_react.default.createElement(_Layouts.TwoColumnsLayout, null, mainContent) : mainContent);
};

exports.AddressFormFields = AddressFormFields;
AddressFormFields.defaultProps = {
  twoColumns: false,
  askDefault: false,
  askEmail: false
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,