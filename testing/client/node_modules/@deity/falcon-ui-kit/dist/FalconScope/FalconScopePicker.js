"use strict";

var _interopRequireWildcard = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.FalconScopePicker = void 0;

var _extends2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/extends"));

var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));

var _falconI18n = /*#__PURE__*/require("@deity/falcon-i18n");

var _falconFrontKit = /*#__PURE__*/require("@deity/falcon-front-kit");

var _Picker = /*#__PURE__*/require("../Picker");

var FalconScopePicker = function FalconScopePicker(props) {
  var _useI18n = (0, _falconI18n.useI18n)(),
      t = _useI18n.t;

  var _useFalconScope = (0, _falconFrontKit.useFalconScope)(),
      available = _useFalconScope.available,
      current = _useFalconScope.current,
      set = _useFalconScope.set;

  var options = (0, _react.useMemo)(function () {
    return available.map(function (x) {
      return {
        value: x,
        label: t("scopes." + x.id)
      };
    });
  }, [available, t]);
  var selected = {
    value: current,
    label: t("scopes." + current.id)
  };

  if (options.length > 1) {
    return /*#__PURE__*/_react.default.createElement(_Picker.Picker, (0, _extends2.default)({
      options: options,
      selected: selected,
      onChange: function onChange(x) {
        return set(x.id);
      }
    }, props));
  }

  return null;
};

exports.FalconScopePicker = FalconScopePicker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9GYWxjb25TY29wZS9GYWxjb25TY29wZVBpY2tlci50c3giXSwibmFtZXMiOlsiRmFsY29uU2NvcGVQaWNrZXIiLCJwcm9wcyIsInQiLCJhdmFpbGFibGUiLCJjdXJyZW50Iiwic2V0Iiwib3B0aW9ucyIsIm1hcCIsIngiLCJ2YWx1ZSIsImxhYmVsIiwiaWQiLCJzZWxlY3RlZCIsImxlbmd0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFTyxJQUFNQSxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQW9CLENBQUFDLEtBQUssRUFBSTtBQUN4QyxpQkFBYywwQkFBZDtBQUFBLE1BQVFDLENBQVIsWUFBUUEsQ0FBUjs7QUFDQSx3QkFBb0MscUNBQXBDO0FBQUEsTUFBUUMsU0FBUixtQkFBUUEsU0FBUjtBQUFBLE1BQW1CQyxPQUFuQixtQkFBbUJBLE9BQW5CO0FBQUEsTUFBNEJDLEdBQTVCLG1CQUE0QkEsR0FBNUI7O0FBRUEsTUFBTUMsT0FBTyxHQUFHLG9CQUFRO0FBQUEsV0FBTUgsU0FBUyxDQUFDSSxHQUFWLENBQWMsVUFBQUMsQ0FBQztBQUFBLGFBQUs7QUFBRUMsUUFBQUEsS0FBSyxFQUFFRCxDQUFUO0FBQVlFLFFBQUFBLEtBQUssRUFBRVIsQ0FBQyxhQUFXTSxDQUFDLENBQUNHLEVBQWI7QUFBcEIsT0FBTDtBQUFBLEtBQWYsQ0FBTjtBQUFBLEdBQVIsRUFBOEUsQ0FBQ1IsU0FBRCxFQUFZRCxDQUFaLENBQTlFLENBQWhCO0FBQ0EsTUFBTVUsUUFBUSxHQUFHO0FBQ2ZILElBQUFBLEtBQUssRUFBRUwsT0FEUTtBQUVmTSxJQUFBQSxLQUFLLEVBQUVSLENBQUMsYUFBV0UsT0FBTyxDQUFDTyxFQUFuQjtBQUZPLEdBQWpCOztBQUtBLE1BQUlMLE9BQU8sQ0FBQ08sTUFBUixHQUFpQixDQUFyQixFQUF3QjtBQUN0Qix3QkFBTyw2QkFBQyxjQUFEO0FBQVEsTUFBQSxPQUFPLEVBQUVQLE9BQWpCO0FBQTBCLE1BQUEsUUFBUSxFQUFFTSxRQUFwQztBQUE4QyxNQUFBLFFBQVEsRUFBRSxrQkFBQUosQ0FBQztBQUFBLGVBQUlILEdBQUcsQ0FBQ0csQ0FBQyxDQUFDRyxFQUFILENBQVA7QUFBQTtBQUF6RCxPQUE0RVYsS0FBNUUsRUFBUDtBQUNEOztBQUVELFNBQU8sSUFBUDtBQUNELENBZk0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUkxOG4gfSBmcm9tICdAZGVpdHkvZmFsY29uLWkxOG4nO1xuaW1wb3J0IHsgdXNlRmFsY29uU2NvcGUgfSBmcm9tICdAZGVpdHkvZmFsY29uLWZyb250LWtpdCc7XG5pbXBvcnQgeyBQaWNrZXIgfSBmcm9tICcuLi9QaWNrZXInO1xuXG5leHBvcnQgY29uc3QgRmFsY29uU2NvcGVQaWNrZXIgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlSTE4bigpO1xuICBjb25zdCB7IGF2YWlsYWJsZSwgY3VycmVudCwgc2V0IH0gPSB1c2VGYWxjb25TY29wZSgpO1xuXG4gIGNvbnN0IG9wdGlvbnMgPSB1c2VNZW1vKCgpID0+IGF2YWlsYWJsZS5tYXAoeCA9PiAoeyB2YWx1ZTogeCwgbGFiZWw6IHQoYHNjb3Blcy4ke3guaWR9YCkgfSkpLCBbYXZhaWxhYmxlLCB0XSk7XG4gIGNvbnN0IHNlbGVjdGVkID0ge1xuICAgIHZhbHVlOiBjdXJyZW50LFxuICAgIGxhYmVsOiB0KGBzY29wZXMuJHtjdXJyZW50LmlkfWApXG4gIH07XG5cbiAgaWYgKG9wdGlvbnMubGVuZ3RoID4gMSkge1xuICAgIHJldHVybiA8UGlja2VyIG9wdGlvbnM9e29wdGlvbnN9IHNlbGVjdGVkPXtzZWxlY3RlZH0gb25DaGFuZ2U9e3ggPT4gc2V0KHguaWQpfSB7Li4ucHJvcHN9IC8+O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuIl19