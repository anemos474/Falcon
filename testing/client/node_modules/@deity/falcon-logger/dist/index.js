"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _pino = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("pino"));

var _symbols = /*#__PURE__*/require("pino/lib/symbols");

var levelToSeverity = function levelToSeverity(level) {
  switch (level) {
    case 'trace':
    case 'debug':
      return 'DEBUG';

    case 'info':
      return 'INFO';

    case 'warn':
      return 'WARNING';

    case 'error':
      return 'ERROR';

    case 'fatal':
      return 'CRITICAL';

    default:
      return 'DEFAULT';
  }
};

var isAppSet = false;
var logger = /*#__PURE__*/(0, _pino.default)({
  name: 'falcon-logger',
  formatters: {
    level: /*#__PURE__*/function (_level) {
      function level(_x, _x2) {
        return _level.apply(this, arguments);
      }

      level.toString = function () {
        return _level.toString();
      };

      return level;
    }(function (level, number) {
      return {
        level: number,
        severity: levelToSeverity(level)
      };
    })
  }
});
/**
 * Sets the log level for the logger instance
 * @param level Required log level
 * @returns {void}
 */

logger.setLogLevel = function (level) {
  logger.level = level;
};
/**
 * Sets the "app" key to every log message via the root logger instance.
 * It can be called only once, preferably at the very beginning of your application.
 * @param name Application name
 * @returns {void}
 */


logger.setApp = function (name) {
  if (isAppSet) {
    logger.warn('logger.setApp() can be called only once.');
    return;
  } // @ts-ignore: Tweaking internal Pino settings


  logger[_symbols.chindingsSym] += ",\"app\":\"" + name + "\"";
  isAppSet = true;
};
/**
 * Initializes an extra sub-logger instance for the provided module name
 * and adds "module" key to every log message automatically.
 * Handy for defining sub-loggers for your nested modules.
 * In conjunction with `falcon-pretty` formatter - it will render an additional "[my-module]" section in the log message output.
 * @example
 * logger.getFor("my-module").info("Calling my-module...");
 * @param moduleName Module name
 * @param extra map with values that will be added to each logger call automatically
 * @returns {Logger} Module-specific Logger instance
 */


logger.getFor = function (moduleName, extra) {
  if (extra === void 0) {
    extra = {};
  }

  return logger.child(Object.assign({
    module: moduleName
  }, extra));
};
/**
 * Measures the timing for the provided callback.
 * If your log level is set to trace - Logger will produce the following log message:
 * "TRACE: My time (XX ms)"
 * @param label Log label
 * @param fn Function to trace the execution time of
 * @returns {Promise<T>} `fn` result
 */


logger.traceTime = function traceTime(label, fn) {
  var _this = this;

  // using `function()` statement to preserve the context in case of "getFor" call
  if (!this.isLevelEnabled('trace')) {
    return fn();
  }

  var startTime = Date.now();
  return fn().finally(function () {
    var duration = Date.now() - startTime;

    _this.trace(label + " (" + duration + "ms)");
  });
};

var _default = logger;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJsZXZlbFRvU2V2ZXJpdHkiLCJsZXZlbCIsImlzQXBwU2V0IiwibG9nZ2VyIiwibmFtZSIsImZvcm1hdHRlcnMiLCJudW1iZXIiLCJzZXZlcml0eSIsInNldExvZ0xldmVsIiwic2V0QXBwIiwid2FybiIsImNoaW5kaW5nc1N5bSIsImdldEZvciIsIm1vZHVsZU5hbWUiLCJleHRyYSIsImNoaWxkIiwibW9kdWxlIiwidHJhY2VUaW1lIiwibGFiZWwiLCJmbiIsImlzTGV2ZWxFbmFibGVkIiwic3RhcnRUaW1lIiwiRGF0ZSIsIm5vdyIsImZpbmFsbHkiLCJkdXJhdGlvbiIsInRyYWNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBU0EsSUFBTUEsZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixDQUFDQyxLQUFELEVBQW1DO0FBQ3pELFVBQVFBLEtBQVI7QUFDRSxTQUFLLE9BQUw7QUFDQSxTQUFLLE9BQUw7QUFDRSxhQUFPLE9BQVA7O0FBQ0YsU0FBSyxNQUFMO0FBQ0UsYUFBTyxNQUFQOztBQUNGLFNBQUssTUFBTDtBQUNFLGFBQU8sU0FBUDs7QUFDRixTQUFLLE9BQUw7QUFDRSxhQUFPLE9BQVA7O0FBQ0YsU0FBSyxPQUFMO0FBQ0UsYUFBTyxVQUFQOztBQUNGO0FBQ0UsYUFBTyxTQUFQO0FBYko7QUFlRCxDQWhCRDs7QUFrQkEsSUFBSUMsUUFBaUIsR0FBRyxLQUF4QjtBQUNBLElBQU1DLE1BQWMsZ0JBQUcsbUJBQUs7QUFDMUJDLEVBQUFBLElBQUksRUFBRSxlQURvQjtBQUUxQkMsRUFBQUEsVUFBVSxFQUFFO0FBQ1ZKLElBQUFBLEtBQUs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUEsTUFBRSxVQUFDQSxLQUFELEVBQVFLLE1BQVI7QUFBQSxhQUFvQjtBQUN6QkwsUUFBQUEsS0FBSyxFQUFFSyxNQURrQjtBQUV6QkMsUUFBQUEsUUFBUSxFQUFFUCxlQUFlLENBQUNDLEtBQUQ7QUFGQSxPQUFwQjtBQUFBLEtBQUY7QUFESztBQUZjLENBQUwsQ0FBdkI7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBRSxNQUFNLENBQUNLLFdBQVAsR0FBcUIsVUFBQ1AsS0FBRCxFQUF3QjtBQUMzQ0UsRUFBQUEsTUFBTSxDQUFDRixLQUFQLEdBQWVBLEtBQWY7QUFDRCxDQUZEO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQUUsTUFBTSxDQUFDTSxNQUFQLEdBQWdCLFVBQUNMLElBQUQsRUFBd0I7QUFDdEMsTUFBSUYsUUFBSixFQUFjO0FBQ1pDLElBQUFBLE1BQU0sQ0FBQ08sSUFBUCxDQUFZLDBDQUFaO0FBQ0E7QUFDRCxHQUpxQyxDQUt0Qzs7O0FBQ0FQLEVBQUFBLE1BQU0sQ0FBQ1EscUJBQUQsQ0FBTixvQkFBbUNQLElBQW5DO0FBQ0FGLEVBQUFBLFFBQVEsR0FBRyxJQUFYO0FBQ0QsQ0FSRDtBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBQyxNQUFNLENBQUNTLE1BQVAsR0FBZ0IsVUFBQ0MsVUFBRCxFQUFxQkMsS0FBckI7QUFBQSxNQUFxQkEsS0FBckI7QUFBcUJBLElBQUFBLEtBQXJCLEdBQXFELEVBQXJEO0FBQUE7O0FBQUEsU0FDZFgsTUFBTSxDQUFDWSxLQUFQO0FBQWVDLElBQUFBLE1BQU0sRUFBRUg7QUFBdkIsS0FBc0NDLEtBQXRDLEVBRGM7QUFBQSxDQUFoQjtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBWCxNQUFNLENBQUNjLFNBQVAsR0FBbUIsU0FBU0EsU0FBVCxDQUE0QkMsS0FBNUIsRUFBMkNDLEVBQTNDLEVBQTZFO0FBQUE7O0FBQzlGO0FBQ0EsTUFBSSxDQUFDLEtBQUtDLGNBQUwsQ0FBb0IsT0FBcEIsQ0FBTCxFQUFtQztBQUNqQyxXQUFPRCxFQUFFLEVBQVQ7QUFDRDs7QUFFRCxNQUFNRSxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsR0FBTCxFQUFsQjtBQUNBLFNBQU9KLEVBQUUsR0FBR0ssT0FBTCxDQUFhLFlBQU07QUFDeEIsUUFBTUMsUUFBUSxHQUFHSCxJQUFJLENBQUNDLEdBQUwsS0FBYUYsU0FBOUI7O0FBQ0EsSUFBQSxLQUFJLENBQUNLLEtBQUwsQ0FBY1IsS0FBZCxVQUF3Qk8sUUFBeEI7QUFDRCxHQUhNLENBQVA7QUFJRCxDQVhEOztlQWFldEIsTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwaW5vLCB7IExvZ2dlciBhcyBQaW5vTG9nZ2VyLCBMZXZlbCB9IGZyb20gJ3Bpbm8nO1xuaW1wb3J0IHsgY2hpbmRpbmdzU3ltIH0gZnJvbSAncGluby9saWIvc3ltYm9scyc7XG5cbnR5cGUgTG9nZ2VyID0ge1xuICBzZXRMb2dMZXZlbDogKGxldmVsOiBMZXZlbCkgPT4gdm9pZDtcbiAgc2V0QXBwOiAobmFtZTogc3RyaW5nKSA9PiB2b2lkO1xuICBnZXRGb3I6IChtb2R1bGVOYW1lOiBzdHJpbmcsIGV4dHJhPzogeyBba2V5OiBzdHJpbmddOiBhbnkgfSkgPT4gTG9nZ2VyO1xuICB0cmFjZVRpbWU6IChsYWJlbDogc3RyaW5nLCBmbjogKCkgPT4gUHJvbWlzZTxhbnk+KSA9PiBQcm9taXNlPGFueT47XG59ICYgUGlub0xvZ2dlcjtcblxuY29uc3QgbGV2ZWxUb1NldmVyaXR5ID0gKGxldmVsOiBMZXZlbCB8IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHN3aXRjaCAobGV2ZWwpIHtcbiAgICBjYXNlICd0cmFjZSc6XG4gICAgY2FzZSAnZGVidWcnOlxuICAgICAgcmV0dXJuICdERUJVRyc7XG4gICAgY2FzZSAnaW5mbyc6XG4gICAgICByZXR1cm4gJ0lORk8nO1xuICAgIGNhc2UgJ3dhcm4nOlxuICAgICAgcmV0dXJuICdXQVJOSU5HJztcbiAgICBjYXNlICdlcnJvcic6XG4gICAgICByZXR1cm4gJ0VSUk9SJztcbiAgICBjYXNlICdmYXRhbCc6XG4gICAgICByZXR1cm4gJ0NSSVRJQ0FMJztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICdERUZBVUxUJztcbiAgfVxufTtcblxubGV0IGlzQXBwU2V0OiBib29sZWFuID0gZmFsc2U7XG5jb25zdCBsb2dnZXI6IExvZ2dlciA9IHBpbm8oe1xuICBuYW1lOiAnZmFsY29uLWxvZ2dlcicsXG4gIGZvcm1hdHRlcnM6IHtcbiAgICBsZXZlbDogKGxldmVsLCBudW1iZXIpID0+ICh7XG4gICAgICBsZXZlbDogbnVtYmVyLFxuICAgICAgc2V2ZXJpdHk6IGxldmVsVG9TZXZlcml0eShsZXZlbClcbiAgICB9KVxuICB9XG59KSBhcyBMb2dnZXI7XG5cbi8qKlxuICogU2V0cyB0aGUgbG9nIGxldmVsIGZvciB0aGUgbG9nZ2VyIGluc3RhbmNlXG4gKiBAcGFyYW0gbGV2ZWwgUmVxdWlyZWQgbG9nIGxldmVsXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xubG9nZ2VyLnNldExvZ0xldmVsID0gKGxldmVsOiBMZXZlbCk6IHZvaWQgPT4ge1xuICBsb2dnZXIubGV2ZWwgPSBsZXZlbDtcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgXCJhcHBcIiBrZXkgdG8gZXZlcnkgbG9nIG1lc3NhZ2UgdmlhIHRoZSByb290IGxvZ2dlciBpbnN0YW5jZS5cbiAqIEl0IGNhbiBiZSBjYWxsZWQgb25seSBvbmNlLCBwcmVmZXJhYmx5IGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICogQHBhcmFtIG5hbWUgQXBwbGljYXRpb24gbmFtZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmxvZ2dlci5zZXRBcHAgPSAobmFtZTogc3RyaW5nKTogdm9pZCA9PiB7XG4gIGlmIChpc0FwcFNldCkge1xuICAgIGxvZ2dlci53YXJuKCdsb2dnZXIuc2V0QXBwKCkgY2FuIGJlIGNhbGxlZCBvbmx5IG9uY2UuJyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIEB0cy1pZ25vcmU6IFR3ZWFraW5nIGludGVybmFsIFBpbm8gc2V0dGluZ3NcbiAgbG9nZ2VyW2NoaW5kaW5nc1N5bV0gKz0gYCxcImFwcFwiOlwiJHtuYW1lfVwiYDtcbiAgaXNBcHBTZXQgPSB0cnVlO1xufTtcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBleHRyYSBzdWItbG9nZ2VyIGluc3RhbmNlIGZvciB0aGUgcHJvdmlkZWQgbW9kdWxlIG5hbWVcbiAqIGFuZCBhZGRzIFwibW9kdWxlXCIga2V5IHRvIGV2ZXJ5IGxvZyBtZXNzYWdlIGF1dG9tYXRpY2FsbHkuXG4gKiBIYW5keSBmb3IgZGVmaW5pbmcgc3ViLWxvZ2dlcnMgZm9yIHlvdXIgbmVzdGVkIG1vZHVsZXMuXG4gKiBJbiBjb25qdW5jdGlvbiB3aXRoIGBmYWxjb24tcHJldHR5YCBmb3JtYXR0ZXIgLSBpdCB3aWxsIHJlbmRlciBhbiBhZGRpdGlvbmFsIFwiW215LW1vZHVsZV1cIiBzZWN0aW9uIGluIHRoZSBsb2cgbWVzc2FnZSBvdXRwdXQuXG4gKiBAZXhhbXBsZVxuICogbG9nZ2VyLmdldEZvcihcIm15LW1vZHVsZVwiKS5pbmZvKFwiQ2FsbGluZyBteS1tb2R1bGUuLi5cIik7XG4gKiBAcGFyYW0gbW9kdWxlTmFtZSBNb2R1bGUgbmFtZVxuICogQHBhcmFtIGV4dHJhIG1hcCB3aXRoIHZhbHVlcyB0aGF0IHdpbGwgYmUgYWRkZWQgdG8gZWFjaCBsb2dnZXIgY2FsbCBhdXRvbWF0aWNhbGx5XG4gKiBAcmV0dXJucyB7TG9nZ2VyfSBNb2R1bGUtc3BlY2lmaWMgTG9nZ2VyIGluc3RhbmNlXG4gKi9cbmxvZ2dlci5nZXRGb3IgPSAobW9kdWxlTmFtZTogc3RyaW5nLCBleHRyYTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9IHt9KTogTG9nZ2VyID0+XG4gIGxvZ2dlci5jaGlsZCh7IG1vZHVsZTogbW9kdWxlTmFtZSwgLi4uZXh0cmEgfSkgYXMgTG9nZ2VyO1xuXG4vKipcbiAqIE1lYXN1cmVzIHRoZSB0aW1pbmcgZm9yIHRoZSBwcm92aWRlZCBjYWxsYmFjay5cbiAqIElmIHlvdXIgbG9nIGxldmVsIGlzIHNldCB0byB0cmFjZSAtIExvZ2dlciB3aWxsIHByb2R1Y2UgdGhlIGZvbGxvd2luZyBsb2cgbWVzc2FnZTpcbiAqIFwiVFJBQ0U6IE15IHRpbWUgKFhYIG1zKVwiXG4gKiBAcGFyYW0gbGFiZWwgTG9nIGxhYmVsXG4gKiBAcGFyYW0gZm4gRnVuY3Rpb24gdG8gdHJhY2UgdGhlIGV4ZWN1dGlvbiB0aW1lIG9mXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxUPn0gYGZuYCByZXN1bHRcbiAqL1xubG9nZ2VyLnRyYWNlVGltZSA9IGZ1bmN0aW9uIHRyYWNlVGltZTxUID0gYW55PihsYWJlbDogc3RyaW5nLCBmbjogKCkgPT4gUHJvbWlzZTxUPik6IFByb21pc2U8VD4ge1xuICAvLyB1c2luZyBgZnVuY3Rpb24oKWAgc3RhdGVtZW50IHRvIHByZXNlcnZlIHRoZSBjb250ZXh0IGluIGNhc2Ugb2YgXCJnZXRGb3JcIiBjYWxsXG4gIGlmICghdGhpcy5pc0xldmVsRW5hYmxlZCgndHJhY2UnKSkge1xuICAgIHJldHVybiBmbigpO1xuICB9XG5cbiAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgcmV0dXJuIGZuKCkuZmluYWxseSgoKSA9PiB7XG4gICAgY29uc3QgZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuICAgIHRoaXMudHJhY2UoYCR7bGFiZWx9ICgke2R1cmF0aW9ufW1zKWApO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvZ2dlcjtcbiJdfQ==