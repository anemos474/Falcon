"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.readSourceFromStack = exports.prettifyErrorLog = exports.prettifyObject = exports.prettifyGraphQLParsingErrorLog = exports.prettifyGraphQLErrorLog = exports.prettifyModule = exports.jsonParser = exports.prettifyTime = exports.prettifyMetadata = exports.prettifyMessage = exports.prettifyLevel = void 0;

var _bourne = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@hapi/bourne"));

var _getSource = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("get-source"));

var _utils = /*#__PURE__*/require("pino-pretty/lib/utils");

exports.internals = _utils.internals;
exports.isObject = _utils.isObject;
exports.prettifyLevel = _utils.prettifyLevel;
exports.prettifyMessage = _utils.prettifyMessage;
exports.prettifyMetadata = _utils.prettifyMetadata;
exports.prettifyTime = _utils.prettifyTime;

var _colors = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("./colors"));

var _constants = /*#__PURE__*/require("./constants");

var defaultColorizer = /*#__PURE__*/(0, _colors.default)();

var jsonParser = function jsonParser(input) {
  try {
    return {
      value: _bourne.default.parse(input, {
        protoAction: 'remove'
      })
    };
  } catch (err) {
    return {
      err: err
    };
  }
};

exports.jsonParser = jsonParser;

var prettifyModule = function prettifyModule(_ref) {
  var log = _ref.log,
      _ref$colorizer = _ref.colorizer,
      colorizer = _ref$colorizer === void 0 ? defaultColorizer : _ref$colorizer;

  if (log.module) {
    return "[" + colorizer.random(log.module) + "]";
  }

  return undefined;
};

exports.prettifyModule = prettifyModule;

var prettifyGraphQLErrorLog = function prettifyGraphQLErrorLog(_ref2) {
  var log = _ref2.log,
      ident = _ref2.ident,
      eol = _ref2.eol,
      _ref2$colorizer = _ref2.colorizer,
      colorizer = _ref2$colorizer === void 0 ? defaultColorizer : _ref2$colorizer;
  var path = log.path,
      extensions = log.extensions;
  var result = "" + eol;

  if (extensions.code) {
    result += "GraphQL Error Code: " + colorizer.error(extensions.code) + eol;
  }

  if (path) {
    var pathString = '';
    path.forEach(function (item) {
      var limiter = pathString.length ? '.' : '';

      if (Number.isInteger(item)) {
        pathString += "[" + item + "]";
      } else {
        pathString += "" + limiter + item;
      }
    });
    result += "Path: " + colorizer.error(pathString) + eol + eol;
  }

  var stack = extensions && extensions.exception && extensions.exception.stacktrace;

  if (stack && stack.length > 1) {
    var codeLine = stack[1]; // Highlighting the actual code line

    stack[1] = colorizer.error(codeLine);
    var codeSnippet = readSourceFromStack({
      colorizer: colorizer,
      stack: stack,
      setLineNumber: true,
      paddingLines: 5
    });

    if (codeSnippet.length) {
      result += "" + codeSnippet.join(eol) + eol + eol;
    }

    var joinedLines = _utils.internals.joinLinesWithIndentation({
      input: stack.join(eol),
      ident: ident,
      eol: eol
    });

    result += "" + ident + joinedLines + eol;
  }

  return "" + result + eol;
};

exports.prettifyGraphQLErrorLog = prettifyGraphQLErrorLog;

var prettifyGraphQLParsingErrorLog = function prettifyGraphQLParsingErrorLog(_ref3) {
  var log = _ref3.log,
      colorizer = _ref3.colorizer,
      _ref3$eol = _ref3.eol,
      eol = _ref3$eol === void 0 ? '\n' : _ref3$eol;
  var _ref4 = log,
      body = _ref4.body,
      locations = _ref4.locations;
  var currentLocation = locations[0];
  return "" + colorSection({
    output: body,
    colorizer: colorizer,
    line: currentLocation.line - 1,
    position: currentLocation.column,
    paddingLines: 5
  }).join(eol) + eol;
};

exports.prettifyGraphQLParsingErrorLog = prettifyGraphQLParsingErrorLog;

var prettifyObject = function prettifyObject(_ref5) {
  var log = _ref5.log,
      _ref5$ident = _ref5.ident,
      ident = _ref5$ident === void 0 ? '    ' : _ref5$ident,
      _ref5$eol = _ref5.eol,
      eol = _ref5$eol === void 0 ? '\n' : _ref5$eol,
      _ref5$skipKeys = _ref5.skipKeys,
      skipKeys = _ref5$skipKeys === void 0 ? [] : _ref5$skipKeys,
      _ref5$errorLikeKeys = _ref5.errorLikeKeys,
      errorLikeKeys = _ref5$errorLikeKeys === void 0 ? _constants.ERROR_LIKE_KEYS : _ref5$errorLikeKeys,
      _ref5$excludeLoggerKe = _ref5.excludeLoggerKeys,
      excludeLoggerKeys = _ref5$excludeLoggerKe === void 0 ? true : _ref5$excludeLoggerKe;
  return (0, _utils.prettifyObject)({
    input: log,
    ident: ident,
    eol: eol,
    skipKeys: [].concat(_constants.LOGGER_KEYS, skipKeys),
    errorLikeKeys: errorLikeKeys,
    excludeLoggerKeys: excludeLoggerKeys
  });
};

exports.prettifyObject = prettifyObject;

var prettifyErrorLog = function prettifyErrorLog(_ref6) {
  var log = _ref6.log,
      _ref6$messageKey = _ref6.messageKey,
      messageKey = _ref6$messageKey === void 0 ? _constants.MESSAGE_KEY : _ref6$messageKey,
      colorizer = _ref6.colorizer,
      _ref6$ident = _ref6.ident,
      ident = _ref6$ident === void 0 ? '    ' : _ref6$ident,
      _ref6$eol = _ref6.eol,
      eol = _ref6$eol === void 0 ? '\n' : _ref6$eol,
      _ref6$errorLikeKeys = _ref6.errorLikeKeys,
      errorLikeKeys = _ref6$errorLikeKeys === void 0 ? _constants.ERROR_LIKE_KEYS : _ref6$errorLikeKeys,
      _ref6$errorProperties = _ref6.errorProperties,
      errorProperties = _ref6$errorProperties === void 0 ? [] : _ref6$errorProperties;
  var stack = log.stack;
  var result = '';

  if (stack) {
    var codeSnippet = readSourceFromStack({
      colorizer: colorizer,
      stack: stack.split(eol),
      setLineNumber: true,
      paddingLines: 5
    });

    if (codeSnippet.length) {
      result += "" + eol + codeSnippet.join(eol) + eol + eol;
    }
  }

  var joinedLines = _utils.internals.joinLinesWithIndentation({
    input: stack,
    ident: ident,
    eol: eol
  });

  result += "" + ident + joinedLines + eol;

  if (errorProperties.length > 0) {
    var excludeProperties = _constants.LOGGER_KEYS.concat(messageKey, 'type', 'stack');

    var propertiesToPrint;

    if (errorProperties[0] === '*') {
      // Print all sibling properties except for the standard exclusions.
      propertiesToPrint = Object.keys(log).filter(function (key) {
        return excludeProperties.includes(key) === false;
      });
    } else {
      // Print only sepcified properties unless the property is a standard exclusion.
      propertiesToPrint = errorProperties.filter(function (key) {
        return excludeProperties.includes(key) === false;
      });
    }

    for (var i = 0; i < propertiesToPrint.length; i += 1) {
      var key = propertiesToPrint[i];
      if (key in log === false) continue;

      if ((0, _utils.isObject)(log[key])) {
        // The nested object may have "logger" type keys but since they are not
        // at the root level of the object being processed, we want to print them.
        // Thus, we invoke with `excludeLoggerKeys: false`.
        var prettifiedObject = prettifyObject({
          log: log[key],
          errorLikeKeys: errorLikeKeys,
          excludeLoggerKeys: false,
          eol: eol,
          ident: ident
        });
        result = "" + result + key + ": {" + eol + prettifiedObject + "}" + eol;
        continue;
      }

      result = "" + result + key + ": " + log[key] + eol;
    }
  }

  return result;
};

exports.prettifyErrorLog = prettifyErrorLog;

var readSourceFromStack = function readSourceFromStack(_ref7) {
  var colorizer = _ref7.colorizer,
      stack = _ref7.stack,
      _ref7$setLineNumber = _ref7.setLineNumber,
      setLineNumber = _ref7$setLineNumber === void 0 ? false : _ref7$setLineNumber,
      _ref7$paddingLines = _ref7.paddingLines,
      paddingLines = _ref7$paddingLines === void 0 ? 0 : _ref7$paddingLines;

  if (!stack || stack.length < 2) {
    return [];
  }

  var match = stack[1].match(/\((.+):(\d+):(\d+)\)/);

  if (!match) {
    return [];
  }

  var filePath = match[1],
      codeLine = match[2],
      codeColumn = match[3];
  var line = Number.parseInt(codeLine, 10);
  var column = Number.parseInt(codeColumn, 10);
  var file = (0, _getSource.default)(filePath);
  var codeLines = [];
  codeLines.push.apply(codeLines, colorSection({
    colorizer: colorizer,
    line: line - 1,
    output: file.text,
    position: column,
    setLineNumber: setLineNumber,
    paddingLines: paddingLines
  }));
  codeLines.unshift("File: " + colorizer.error(file.path));
  return codeLines;
};

exports.readSourceFromStack = readSourceFromStack;

var colorSection = function colorSection(_ref8) {
  var output = _ref8.output,
      line = _ref8.line,
      position = _ref8.position,
      colorizer = _ref8.colorizer,
      _ref8$setLineNumber = _ref8.setLineNumber,
      setLineNumber = _ref8$setLineNumber === void 0 ? false : _ref8$setLineNumber,
      _ref8$paddingLines = _ref8.paddingLines,
      paddingLines = _ref8$paddingLines === void 0 ? 0 : _ref8$paddingLines;
  var lines = output.split('\n');
  var totalLines = lines.length;
  var topLine = line;
  var bottomLine = line;
  var longestLine = 1;
  var codeLines = [];

  if (paddingLines) {
    // keeping line numbers within the file range
    topLine = Math.max(topLine - paddingLines, 1);
    bottomLine = Math.min(bottomLine + paddingLines, totalLines);
  }

  for (var i = topLine; i <= bottomLine; i++) {
    var currentLine = lines[i];
    longestLine = Math.max(longestLine, currentLine.length);

    if (i === line) {
      codeLines.push(colorizer.error(currentLine));

      if (position) {
        codeLines.push(colorizer.error(' '.repeat(position - 1) + "^"));
      }
    } else {
      codeLines.push(colorizer.message(currentLine));
    }
  }

  if (setLineNumber) {
    var colWidth = bottomLine.toString().length;

    for (var _i = topLine; _i <= bottomLine; _i++) {
      var numberedLine = codeLines.shift();
      numberedLine = " " + _i.toString().padStart(colWidth, ' ') + " | " + numberedLine;
      longestLine = Math.max(longestLine, numberedLine.length);
      codeLines.push(numberedLine);
    }
  }

  codeLines.push('-'.repeat(longestLine));
  codeLines.unshift('-'.repeat(longestLine));
  return codeLines;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,