"use strict";

var _interopRequireWildcard = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.CONSTANTS = exports.falconPrettyFactory = void 0;

var _chalk = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("chalk"));

var _jmespath = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("jmespath"));

var CONSTANTS = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./constants"));

exports.CONSTANTS = CONSTANTS;

var _colors = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("./colors"));

exports.colors = _colors.default;

var _minimal = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("./minimal"));

var _utils = /*#__PURE__*/require("./utils");

exports.isObject = _utils.isObject;
exports.jsonParser = _utils.jsonParser;
exports.prettifyErrorLog = _utils.prettifyErrorLog;
exports.prettifyGraphQLErrorLog = _utils.prettifyGraphQLErrorLog;
exports.prettifyLevel = _utils.prettifyLevel;
exports.prettifyMessage = _utils.prettifyMessage;
exports.prettifyMetadata = _utils.prettifyMetadata;
exports.prettifyObject = _utils.prettifyObject;
exports.prettifyModule = _utils.prettifyModule;
exports.prettifyTime = _utils.prettifyTime;
var defaultOptions = {
  colorize: _chalk.default.supportsColor,
  crlf: false,
  errorLikeObjectKeys: CONSTANTS.ERROR_LIKE_KEYS,
  errorProps: '',
  levelFirst: false,
  messageKey: CONSTANTS.MESSAGE_KEY,
  timestampKey: CONSTANTS.TIMESTAMP_KEY,
  translateTime: 'SYS:yyyy-mm-dd HH:MM:ss.l',
  useMetadata: false,
  outputStream: process.stdout
};

var falconPrettyFactory = function falconPrettyFactory(options) {
  var opts = Object.assign({}, defaultOptions, options);
  var EOL = opts.crlf ? '\r\n' : '\n';
  var IDENT = '    ';
  var messageKey = opts.messageKey;
  var timestampKey = opts.timestampKey;
  var errorLikeObjectKeys = opts.errorLikeObjectKeys;
  var errorProps = opts.errorProps.split(',');
  var ignoreKeys = opts.ignore ? new Set(opts.ignore.split(',')) : undefined;
  var colorizer = (0, _colors.default)(opts.colorize);
  var search = opts.search;

  if (opts.minimal) {
    return (0, _minimal.default)({
      IDENT: IDENT,
      EOL: EOL
    });
  }

  var formatMessage = function formatMessage(inputData) {
    var log;

    if (!(0, _utils.isObject)(inputData)) {
      var parsed = (0, _utils.jsonParser)(inputData);
      log = parsed.value;

      if (parsed.err || !(0, _utils.isObject)(log)) {
        // pass through
        return inputData + EOL;
      }
    } else {
      log = inputData;
    } // Short-circuit for spec allowed primitive values.


    if ([null, true, false].includes(log)) {
      return log + "\n";
    }

    if (search && !_jmespath.default.search(log, search)) {
      return undefined;
    }

    if (ignoreKeys) {
      log = Object.keys(log).filter(function (key) {
        return !ignoreKeys.has(key);
      }).reduce(function (res, key) {
        res[key] = log[key];
        return res;
      }, {});
    }

    var prettifiedLevel = (0, _utils.prettifyLevel)({
      log: log,
      colorizer: colorizer
    });
    var prettifiedMessage = (0, _utils.prettifyMessage)({
      log: log,
      messageKey: messageKey,
      colorizer: colorizer
    });
    var prettifiedMetadata = (0, _utils.prettifyMetadata)({
      log: log
    });
    var prettifiedTime = (0, _utils.prettifyTime)({
      log: log,
      translateFormat: opts.translateTime,
      timestampKey: timestampKey
    });
    var prettifiedModule = (0, _utils.prettifyModule)({
      log: log,
      colorizer: colorizer
    });
    var line = '';

    if (opts.levelFirst && prettifiedLevel) {
      line = "" + prettifiedLevel;
    }

    if (prettifiedTime && line === '') {
      line = "" + prettifiedTime;
    } else if (prettifiedTime) {
      line = line + " " + prettifiedTime;
    }

    if (!opts.levelFirst && prettifiedLevel) {
      if (line.length > 0) {
        line = line + " " + prettifiedLevel;
      } else {
        line = prettifiedLevel;
      }
    }

    if (opts.useMetadata && prettifiedMetadata) {
      line = line + " " + prettifiedMetadata;
    }

    if (prettifiedModule) {
      line = line + " " + prettifiedModule;
    }

    if (line.endsWith(':') === false && line !== '') {
      line += ':';
    }

    if (prettifiedMessage) {
      line = line + " " + prettifiedMessage;
    }

    if (line.length > 0) {
      line += EOL;
    }

    if (log.type === 'Error' && (log.stack || log.extensions || log.body)) {
      var prettifiedErrorLog = '';

      if (log.body && log.locations) {
        prettifiedErrorLog = (0, _utils.prettifyGraphQLParsingErrorLog)({
          log: log,
          colorizer: colorizer,
          ident: IDENT,
          eol: EOL
        });
      } else if (log.stack) {
        prettifiedErrorLog = (0, _utils.prettifyErrorLog)({
          log: log,
          messageKey: messageKey,
          colorizer: colorizer,
          errorLikeKeys: errorLikeObjectKeys,
          errorProperties: errorProps,
          ident: IDENT,
          eol: EOL
        });
      } else if (log.extensions) {
        prettifiedErrorLog = (0, _utils.prettifyGraphQLErrorLog)({
          log: log,
          colorizer: colorizer,
          ident: IDENT,
          eol: EOL
        });
      }

      line += prettifiedErrorLog;
    } else {
      var skipKeys = typeof log[messageKey] === 'string' ? [messageKey] : undefined;
      var prettifiedObject = (0, _utils.prettifyObject)({
        log: log,
        skipKeys: skipKeys,
        errorLikeKeys: errorLikeObjectKeys,
        eol: EOL,
        ident: IDENT
      });
      line += prettifiedObject;
    }

    return line;
  };

  return function (inputData) {
    try {
      return formatMessage(inputData);
    } catch (_unused) {
      return typeof inputData === 'string' ? inputData : JSON.stringify(inputData);
    }
  };
};

exports.falconPrettyFactory = falconPrettyFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mb3JtYXQvaW5kZXgudHMiXSwibmFtZXMiOlsiZGVmYXVsdE9wdGlvbnMiLCJjb2xvcml6ZSIsImNoYWxrIiwic3VwcG9ydHNDb2xvciIsImNybGYiLCJlcnJvckxpa2VPYmplY3RLZXlzIiwiQ09OU1RBTlRTIiwiRVJST1JfTElLRV9LRVlTIiwiZXJyb3JQcm9wcyIsImxldmVsRmlyc3QiLCJtZXNzYWdlS2V5IiwiTUVTU0FHRV9LRVkiLCJ0aW1lc3RhbXBLZXkiLCJUSU1FU1RBTVBfS0VZIiwidHJhbnNsYXRlVGltZSIsInVzZU1ldGFkYXRhIiwib3V0cHV0U3RyZWFtIiwicHJvY2VzcyIsInN0ZG91dCIsImZhbGNvblByZXR0eUZhY3RvcnkiLCJvcHRpb25zIiwib3B0cyIsIkVPTCIsIklERU5UIiwic3BsaXQiLCJpZ25vcmVLZXlzIiwiaWdub3JlIiwiU2V0IiwidW5kZWZpbmVkIiwiY29sb3JpemVyIiwic2VhcmNoIiwibWluaW1hbCIsImZvcm1hdE1lc3NhZ2UiLCJpbnB1dERhdGEiLCJsb2ciLCJwYXJzZWQiLCJ2YWx1ZSIsImVyciIsImluY2x1ZGVzIiwiam1lc3BhdGgiLCJPYmplY3QiLCJrZXlzIiwiZmlsdGVyIiwia2V5IiwiaGFzIiwicmVkdWNlIiwicmVzIiwicHJldHRpZmllZExldmVsIiwicHJldHRpZmllZE1lc3NhZ2UiLCJwcmV0dGlmaWVkTWV0YWRhdGEiLCJwcmV0dGlmaWVkVGltZSIsInRyYW5zbGF0ZUZvcm1hdCIsInByZXR0aWZpZWRNb2R1bGUiLCJsaW5lIiwibGVuZ3RoIiwiZW5kc1dpdGgiLCJ0eXBlIiwic3RhY2siLCJleHRlbnNpb25zIiwiYm9keSIsInByZXR0aWZpZWRFcnJvckxvZyIsImxvY2F0aW9ucyIsImlkZW50IiwiZW9sIiwiZXJyb3JMaWtlS2V5cyIsImVycm9yUHJvcGVydGllcyIsInNraXBLZXlzIiwicHJldHRpZmllZE9iamVjdCIsIkpTT04iLCJzdHJpbmdpZnkiXSwibWFwcGluZ3Mi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Q0EsVUFBTXVDLGdCQUFnQixHQUFHLDJCQUFlO0FBQ3RDakMsUUFBQUEsR0FBRyxFQUFIQSxHQURzQztBQUV0Q2dDLFFBQUFBLFFBQVEsRUFBUkEsUUFGc0M7QUFHdENGLFFBQUFBLGFBQWEsRUFBRTNELG1CQUh1QjtBQUl0QzBELFFBQUFBLEdBQUcsRUFBRXpDLEdBSmlDO0FBS3RDd0MsUUFBQUEsS0FBSyxFQUFFdkM7QUFMK0IsT0FBZixDQUF6QjtBQU9BOEIsTUFBQUEsSUFBSSxJQUFJYyxnQkFBUjtBQUNEOztBQUVELFdBQU9kLElBQVA7QUFDRCxHQXJIRDs7QUF1SEEsU0FBTyxVQUFDcEIsU0FBRCxFQUF3QztBQUM3QyxRQUFJO0FBQ0YsYUFBT0QsYUFBYSxDQUFDQyxTQUFELENBQXBCO0FBQ0QsS0FGRCxDQUVFLGdCQUFNO0FBQ04sYUFBTyxPQUFPQSxTQUFQLEtBQXFCLFFBQXJCLEdBQWdDQSxTQUFoQyxHQUE0Q21DLElBQUksQ0FBQ0MsU0FBTCxDQUFlcEMsU0FBZixDQUFuRDtBQUNEO0FBQ0YsR0FORDtBQU9ELENBOUlNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBqbWVzcGF0aCBmcm9tICdqbWVzcGF0aCc7XG5pbXBvcnQgKiBhcyBDT05TVEFOVFMgZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IGNvbG9ycyBmcm9tICcuL2NvbG9ycyc7XG5pbXBvcnQgbWluaW1hbCBmcm9tICcuL21pbmltYWwnO1xuaW1wb3J0IHtcbiAgaXNPYmplY3QsXG4gIGpzb25QYXJzZXIsXG4gIHByZXR0aWZ5RXJyb3JMb2csXG4gIHByZXR0aWZ5R3JhcGhRTEVycm9yTG9nLFxuICBwcmV0dGlmeUdyYXBoUUxQYXJzaW5nRXJyb3JMb2csXG4gIHByZXR0aWZ5TGV2ZWwsXG4gIHByZXR0aWZ5TWVzc2FnZSxcbiAgcHJldHRpZnlNZXRhZGF0YSxcbiAgcHJldHRpZnlPYmplY3QsXG4gIHByZXR0aWZ5TW9kdWxlLFxuICBwcmV0dGlmeVRpbWVcbn0gZnJvbSAnLi91dGlscyc7XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge1xuICBjb2xvcml6ZTogY2hhbGsuc3VwcG9ydHNDb2xvcixcbiAgY3JsZjogZmFsc2UsXG4gIGVycm9yTGlrZU9iamVjdEtleXM6IENPTlNUQU5UUy5FUlJPUl9MSUtFX0tFWVMsXG4gIGVycm9yUHJvcHM6ICcnLFxuICBsZXZlbEZpcnN0OiBmYWxzZSxcbiAgbWVzc2FnZUtleTogQ09OU1RBTlRTLk1FU1NBR0VfS0VZLFxuICB0aW1lc3RhbXBLZXk6IENPTlNUQU5UUy5USU1FU1RBTVBfS0VZLFxuICB0cmFuc2xhdGVUaW1lOiAnU1lTOnl5eXktbW0tZGQgSEg6TU06c3MubCcsXG4gIHVzZU1ldGFkYXRhOiBmYWxzZSxcbiAgb3V0cHV0U3RyZWFtOiBwcm9jZXNzLnN0ZG91dFxufTtcblxuZXhwb3J0IHtcbiAgQ09OU1RBTlRTLFxuICBjb2xvcnMsXG4gIGlzT2JqZWN0LFxuICBqc29uUGFyc2VyLFxuICBwcmV0dGlmeUVycm9yTG9nLFxuICBwcmV0dGlmeUdyYXBoUUxFcnJvckxvZyxcbiAgcHJldHRpZnlMZXZlbCxcbiAgcHJldHRpZnlNZXNzYWdlLFxuICBwcmV0dGlmeU1ldGFkYXRhLFxuICBwcmV0dGlmeU9iamVjdCxcbiAgcHJldHRpZnlNb2R1bGUsXG4gIHByZXR0aWZ5VGltZVxufTtcblxuZXhwb3J0IGNvbnN0IGZhbGNvblByZXR0eUZhY3RvcnkgPSAob3B0aW9uczogb2JqZWN0KSA9PiB7XG4gIGNvbnN0IG9wdHMgPSB7IC4uLmRlZmF1bHRPcHRpb25zLCAuLi5vcHRpb25zIH07XG4gIGNvbnN0IEVPTCA9IG9wdHMuY3JsZiA/ICdcXHJcXG4nIDogJ1xcbic7XG4gIGNvbnN0IElERU5UID0gJyAgICAnO1xuICBjb25zdCB7IG1lc3NhZ2VLZXkgfSA9IG9wdHM7XG4gIGNvbnN0IHsgdGltZXN0YW1wS2V5IH0gPSBvcHRzO1xuICBjb25zdCB7IGVycm9yTGlrZU9iamVjdEtleXMgfSA9IG9wdHM7XG4gIGNvbnN0IGVycm9yUHJvcHMgPSBvcHRzLmVycm9yUHJvcHMuc3BsaXQoJywnKTtcbiAgY29uc3QgaWdub3JlS2V5cyA9IG9wdHMuaWdub3JlID8gbmV3IFNldChvcHRzLmlnbm9yZS5zcGxpdCgnLCcpKSA6IHVuZGVmaW5lZDtcbiAgY29uc3QgY29sb3JpemVyID0gY29sb3JzKG9wdHMuY29sb3JpemUpO1xuICBjb25zdCB7IHNlYXJjaCB9ID0gb3B0cztcblxuICBpZiAob3B0cy5taW5pbWFsKSB7XG4gICAgcmV0dXJuIG1pbmltYWwoeyBJREVOVCwgRU9MIH0pO1xuICB9XG5cbiAgY29uc3QgZm9ybWF0TWVzc2FnZSA9IChpbnB1dERhdGE6IHN0cmluZyB8IG9iamVjdCk6IHN0cmluZyA9PiB7XG4gICAgbGV0IGxvZztcbiAgICBpZiAoIWlzT2JqZWN0KGlucHV0RGF0YSkpIHtcbiAgICAgIGNvbnN0IHBhcnNlZCA9IGpzb25QYXJzZXIoaW5wdXREYXRhIGFzIHN0cmluZyk7XG4gICAgICBsb2cgPSBwYXJzZWQudmFsdWU7XG4gICAgICBpZiAocGFyc2VkLmVyciB8fCAhaXNPYmplY3QobG9nKSkge1xuICAgICAgICAvLyBwYXNzIHRocm91Z2hcbiAgICAgICAgcmV0dXJuIGlucHV0RGF0YSArIEVPTDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbG9nID0gaW5wdXREYXRhO1xuICAgIH1cblxuICAgIC8vIFNob3J0LWNpcmN1aXQgZm9yIHNwZWMgYWxsb3dlZCBwcmltaXRpdmUgdmFsdWVzLlxuICAgIGlmIChbbnVsbCwgdHJ1ZSwgZmFsc2VdLmluY2x1ZGVzKGxvZykpIHtcbiAgICAgIHJldHVybiBgJHtsb2d9XFxuYDtcbiAgICB9XG5cbiAgICBpZiAoc2VhcmNoICYmICFqbWVzcGF0aC5zZWFyY2gobG9nLCBzZWFyY2gpKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmIChpZ25vcmVLZXlzKSB7XG4gICAgICBsb2cgPSBPYmplY3Qua2V5cyhsb2cpXG4gICAgICAgIC5maWx0ZXIoa2V5ID0+ICFpZ25vcmVLZXlzLmhhcyhrZXkpKVxuICAgICAgICAucmVkdWNlKChyZXMsIGtleSkgPT4ge1xuICAgICAgICAgIHJlc1trZXldID0gbG9nW2tleV07XG4gICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSwge30pO1xuICAgIH1cblxuICAgIGNvbnN0IHByZXR0aWZpZWRMZXZlbCA9IHByZXR0aWZ5TGV2ZWwoeyBsb2csIGNvbG9yaXplciB9KTtcbiAgICBjb25zdCBwcmV0dGlmaWVkTWVzc2FnZSA9IHByZXR0aWZ5TWVzc2FnZSh7IGxvZywgbWVzc2FnZUtleSwgY29sb3JpemVyIH0pO1xuICAgIGNvbnN0IHByZXR0aWZpZWRNZXRhZGF0YSA9IHByZXR0aWZ5TWV0YWRhdGEoeyBsb2cgfSk7XG4gICAgY29uc3QgcHJldHRpZmllZFRpbWUgPSBwcmV0dGlmeVRpbWUoeyBsb2csIHRyYW5zbGF0ZUZvcm1hdDogb3B0cy50cmFuc2xhdGVUaW1lLCB0aW1lc3RhbXBLZXkgfSk7XG4gICAgY29uc3QgcHJldHRpZmllZE1vZHVsZSA9IHByZXR0aWZ5TW9kdWxlKHsgbG9nLCBjb2xvcml6ZXIgfSk7XG5cbiAgICBsZXQgbGluZTogc3RyaW5nID0gJyc7XG4gICAgaWYgKG9wdHMubGV2ZWxGaXJzdCAmJiBwcmV0dGlmaWVkTGV2ZWwpIHtcbiAgICAgIGxpbmUgPSBgJHtwcmV0dGlmaWVkTGV2ZWx9YDtcbiAgICB9XG5cbiAgICBpZiAocHJldHRpZmllZFRpbWUgJiYgbGluZSA9PT0gJycpIHtcbiAgICAgIGxpbmUgPSBgJHtwcmV0dGlmaWVkVGltZX1gO1xuICAgIH0gZWxzZSBpZiAocHJldHRpZmllZFRpbWUpIHtcbiAgICAgIGxpbmUgPSBgJHtsaW5lfSAke3ByZXR0aWZpZWRUaW1lfWA7XG4gICAgfVxuXG4gICAgaWYgKCFvcHRzLmxldmVsRmlyc3QgJiYgcHJldHRpZmllZExldmVsKSB7XG4gICAgICBpZiAobGluZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxpbmUgPSBgJHtsaW5lfSAke3ByZXR0aWZpZWRMZXZlbH1gO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGluZSA9IHByZXR0aWZpZWRMZXZlbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0cy51c2VNZXRhZGF0YSAmJiBwcmV0dGlmaWVkTWV0YWRhdGEpIHtcbiAgICAgIGxpbmUgPSBgJHtsaW5lfSAke3ByZXR0aWZpZWRNZXRhZGF0YX1gO1xuICAgIH1cblxuICAgIGlmIChwcmV0dGlmaWVkTW9kdWxlKSB7XG4gICAgICBsaW5lID0gYCR7bGluZX0gJHtwcmV0dGlmaWVkTW9kdWxlfWA7XG4gICAgfVxuXG4gICAgaWYgKGxpbmUuZW5kc1dpdGgoJzonKSA9PT0gZmFsc2UgJiYgbGluZSAhPT0gJycpIHtcbiAgICAgIGxpbmUgKz0gJzonO1xuICAgIH1cblxuICAgIGlmIChwcmV0dGlmaWVkTWVzc2FnZSkge1xuICAgICAgbGluZSA9IGAke2xpbmV9ICR7cHJldHRpZmllZE1lc3NhZ2V9YDtcbiAgICB9XG5cbiAgICBpZiAobGluZS5sZW5ndGggPiAwKSB7XG4gICAgICBsaW5lICs9IEVPTDtcbiAgICB9XG5cbiAgICBpZiAobG9nLnR5cGUgPT09ICdFcnJvcicgJiYgKGxvZy5zdGFjayB8fCBsb2cuZXh0ZW5zaW9ucyB8fCBsb2cuYm9keSkpIHtcbiAgICAgIGxldCBwcmV0dGlmaWVkRXJyb3JMb2c6IHN0cmluZyA9ICcnO1xuICAgICAgaWYgKGxvZy5ib2R5ICYmIGxvZy5sb2NhdGlvbnMpIHtcbiAgICAgICAgcHJldHRpZmllZEVycm9yTG9nID0gcHJldHRpZnlHcmFwaFFMUGFyc2luZ0Vycm9yTG9nKHtcbiAgICAgICAgICBsb2csXG4gICAgICAgICAgY29sb3JpemVyLFxuICAgICAgICAgIGlkZW50OiBJREVOVCxcbiAgICAgICAgICBlb2w6IEVPTFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAobG9nLnN0YWNrKSB7XG4gICAgICAgIHByZXR0aWZpZWRFcnJvckxvZyA9IHByZXR0aWZ5RXJyb3JMb2coe1xuICAgICAgICAgIGxvZyxcbiAgICAgICAgICBtZXNzYWdlS2V5LFxuICAgICAgICAgIGNvbG9yaXplcixcbiAgICAgICAgICBlcnJvckxpa2VLZXlzOiBlcnJvckxpa2VPYmplY3RLZXlzLFxuICAgICAgICAgIGVycm9yUHJvcGVydGllczogZXJyb3JQcm9wcyxcbiAgICAgICAgICBpZGVudDogSURFTlQsXG4gICAgICAgICAgZW9sOiBFT0xcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGxvZy5leHRlbnNpb25zKSB7XG4gICAgICAgIHByZXR0aWZpZWRFcnJvckxvZyA9IHByZXR0aWZ5R3JhcGhRTEVycm9yTG9nKHtcbiAgICAgICAgICBsb2csXG4gICAgICAgICAgY29sb3JpemVyLFxuICAgICAgICAgIGlkZW50OiBJREVOVCxcbiAgICAgICAgICBlb2w6IEVPTFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGxpbmUgKz0gcHJldHRpZmllZEVycm9yTG9nO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBza2lwS2V5cyA9IHR5cGVvZiBsb2dbbWVzc2FnZUtleV0gPT09ICdzdHJpbmcnID8gW21lc3NhZ2VLZXldIDogdW5kZWZpbmVkO1xuICAgICAgY29uc3QgcHJldHRpZmllZE9iamVjdCA9IHByZXR0aWZ5T2JqZWN0KHtcbiAgICAgICAgbG9nLFxuICAgICAgICBza2lwS2V5cyxcbiAgICAgICAgZXJyb3JMaWtlS2V5czogZXJyb3JMaWtlT2JqZWN0S2V5cyxcbiAgICAgICAgZW9sOiBFT0wsXG4gICAgICAgIGlkZW50OiBJREVOVFxuICAgICAgfSk7XG4gICAgICBsaW5lICs9IHByZXR0aWZpZWRPYmplY3Q7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpbmU7XG4gIH07XG5cbiAgcmV0dXJuIChpbnB1dERhdGE6IHN0cmluZyB8IG9iamVjdCk6IHN0cmluZyA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmb3JtYXRNZXNzYWdlKGlucHV0RGF0YSk7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gdHlwZW9mIGlucHV0RGF0YSA9PT0gJ3N0cmluZycgPyBpbnB1dERhdGEgOiBKU09OLnN0cmluZ2lmeShpbnB1dERhdGEpO1xuICAgIH1cbiAgfTtcbn07XG4iXX0=