"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _chalk = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("chalk"));

var _constants = /*#__PURE__*/require("./constants");

var nocolor = function nocolor(input) {
  return input;
};

var plain = {
  default: nocolor,
  60: nocolor,
  50: nocolor,
  40: nocolor,
  30: nocolor,
  20: nocolor,
  10: nocolor,
  message: nocolor,
  random: nocolor,
  error: nocolor
};
var ctx = /*#__PURE__*/new _chalk.default.constructor({
  enabled: true,
  level: 3
});
var randomColorDictionary = {};
var randomColors = [ctx.green, ctx.yellow, ctx.magenta, /*#__PURE__*/ctx.hex('00FF00'), /*#__PURE__*/ctx.hex('9932CC'), /*#__PURE__*/ctx.hex('A52A2A'), /*#__PURE__*/ctx.hex('1E90FF'), /*#__PURE__*/ctx.hex('ADFF2F'), ctx.redBright];

var randomColor = function randomColor(input) {
  if (!(input in randomColorDictionary)) {
    var color = randomColors.shift();
    randomColors.push(color);
    randomColorDictionary[input] = color;
  }

  return randomColorDictionary[input](input);
};

var colored = {
  default: ctx.white,
  60: ctx.bgRed,
  50: ctx.red,
  40: ctx.yellow,
  30: ctx.green,
  20: ctx.blue,
  10: ctx.grey,
  message: ctx.cyan,
  random: randomColor,
  error: ctx.red
};

var colorizeLevel = function colorizeLevel(level, colorizer) {
  if (Number.isInteger(+level)) {
    return level in _constants.LEVELS ? colorizer[level](_constants.LEVELS[level]) : colorizer.default(_constants.LEVELS.default);
  }

  var levelNum = _constants.LEVEL_NAMES[level.toLowerCase()] || 'default';
  return colorizer[levelNum](_constants.LEVELS[levelNum]);
};

var plainColorizer = function plainColorizer(level) {
  return colorizeLevel(level, plain);
};

plainColorizer.message = plain.message;
plainColorizer.default = plain.default;
plainColorizer.random = plain.random;
plainColorizer.error = plain.error;

var coloredColorizer = function coloredColorizer(level) {
  return colorizeLevel(level, colored);
};

coloredColorizer.message = colored.message;
coloredColorizer.default = colored.default;
coloredColorizer.random = colored.random;
coloredColorizer.error = colored.error;
/**
 * Factory function get a function to colorized levels. The returned function
 * also includes a `.message(str)` method to colorize strings.
 * @param {bool} [useColors=false] When `true` a function that applies standard
 * terminal colors is returned.
 *
 * @returns {Function} `function (level) {}` has a `.message(str)` method to
 * apply colorization to a string. The core function accepts either an integer
 * `level` or a `string` level. The integer level will map to a known level
 * string or to `USERLVL` if not known.  The string `level` will map to the same
 * colors as the integer `level` and will also default to `USERLVL` if the given
 * string is not a recognized level name.
 */

var _default = function _default(useColors) {
  if (useColors === void 0) {
    useColors = false;
  }

  return useColors ? coloredColorizer : plainColorizer;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,