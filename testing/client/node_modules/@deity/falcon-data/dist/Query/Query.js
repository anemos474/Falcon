"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.Query = void 0;

var _objectWithoutPropertiesLoose2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _inheritsLoose2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/inheritsLoose"));

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _propTypes = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("prop-types"));

var _client = /*#__PURE__*/require("@apollo/client");

var _components = /*#__PURE__*/require("@apollo/client/react/components");

var _Loader = /*#__PURE__*/require("./Loader");

var _OperationError = /*#__PURE__*/require("./OperationError");

var Query = /*#__PURE__*/function (_React$Component) {
  (0, _inheritsLoose2.default)(Query, _React$Component);

  function Query() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Query.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        children = _this$props.children,
        fetchMore = _this$props.fetchMore,
        passLoading = _this$props.passLoading,
        passError = _this$props.passError,
        restProps = (0, _objectWithoutPropertiesLoose2.default)(_this$props, ["children", "fetchMore", "passLoading", "passError"]);
    return /*#__PURE__*/_react.default.createElement(_components.Query, restProps, function (result) {
      var networkStatus = result.networkStatus,
          error = result.error,
          data = result.data,
          apolloFetchMore = result.fetchMore;

      if (!passError && error) {
        return /*#__PURE__*/_react.default.createElement(_OperationError.OperationError, error);
      }

      var loading = networkStatus === _client.NetworkStatus.loading || networkStatus !== _client.NetworkStatus.fetchMore && result.loading;

      if (!passLoading && loading) {
        if (data) {
          return children(Object.assign({}, result, {
            data: data,
            fetchMore: fetchMore ? function () {
              return fetchMore(data, apolloFetchMore);
            } : apolloFetchMore
          }));
        }

        return /*#__PURE__*/_react.default.createElement(_Loader.Loader, null);
      }

      return children(Object.assign({}, result, {
        data: data || {},
        fetchMore: fetchMore ? function () {
          return fetchMore(data, apolloFetchMore);
        } : apolloFetchMore
      }));
    });
  };

  return Query;
}(_react.default.Component);

exports.Query = Query;
Query.propTypes = /*#__PURE__*/Object.assign({}, _components.Query.propTypes, {
  passLoading: _propTypes.default.bool,
  passError: _propTypes.default.bool
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9RdWVyeS9RdWVyeS50c3giXSwibmFtZXMiOlsiUXVlcnkiLCJyZW5kZXIiLCJwcm9wcyIsImNoaWxkcmVuIiwiZmV0Y2hNb3JlIiwicGFzc0xvYWRpbmciLCJwYXNzRXJyb3IiLCJyZXN0UHJvcHMiLCJyZXN1bHQiLCJuZXR3b3JrU3RhdHVzIiwiZXJyb3IiLCJkYXRhIiwiYXBvbGxvRmV0Y2hNb3JlIiwibG9hZGluZyIsIk5ldHdvcmtTdGF0dXMiLCJSZWFjdCIsIkNvbXBvbmVudCIsInByb3BUeXBlcyIsIkFwb2xsb1F1ZXJ5IiwiUHJvcFR5cGVzIiwiYm9vbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7SUFjYUEsSzs7Ozs7Ozs7O1NBU1hDLE0sR0FBQSxrQkFBUztBQUNQLHNCQUFzRSxLQUFLQyxLQUEzRTtBQUFBLFFBQVFDLFFBQVIsZUFBUUEsUUFBUjtBQUFBLFFBQWtCQyxTQUFsQixlQUFrQkEsU0FBbEI7QUFBQSxRQUE2QkMsV0FBN0IsZUFBNkJBLFdBQTdCO0FBQUEsUUFBMENDLFNBQTFDLGVBQTBDQSxTQUExQztBQUFBLFFBQXdEQyxTQUF4RDtBQUVBLHdCQUNFLDZCQUFDLGlCQUFELEVBQWlCQSxTQUFqQixFQUNHLFVBQUNDLE1BQUQsRUFBNEM7QUFDM0MsVUFBUUMsYUFBUixHQUFtRUQsTUFBbkUsQ0FBUUMsYUFBUjtBQUFBLFVBQXVCQyxLQUF2QixHQUFtRUYsTUFBbkUsQ0FBdUJFLEtBQXZCO0FBQUEsVUFBOEJDLElBQTlCLEdBQW1FSCxNQUFuRSxDQUE4QkcsSUFBOUI7QUFBQSxVQUErQ0MsZUFBL0MsR0FBbUVKLE1BQW5FLENBQW9DSixTQUFwQzs7QUFFQSxVQUFJLENBQUNFLFNBQUQsSUFBY0ksS0FBbEIsRUFBeUI7QUFDdkIsNEJBQU8sNkJBQUMsOEJBQUQsRUFBb0JBLEtBQXBCLENBQVA7QUFDRDs7QUFFRCxVQUFNRyxPQUFPLEdBQ1hKLGFBQWEsS0FBS0ssc0JBQWNELE9BQWhDLElBQTRDSixhQUFhLEtBQUtLLHNCQUFjVixTQUFoQyxJQUE2Q0ksTUFBTSxDQUFDSyxPQURsRzs7QUFFQSxVQUFJLENBQUNSLFdBQUQsSUFBZ0JRLE9BQXBCLEVBQTZCO0FBQzNCLFlBQUlGLElBQUosRUFBVTtBQUNSLGlCQUFPUixRQUFRLG1CQUNWSyxNQURVO0FBRWJHLFlBQUFBLElBQUksRUFBSkEsSUFGYTtBQUdiUCxZQUFBQSxTQUFTLEVBQUVBLFNBQVMsR0FBRztBQUFBLHFCQUFNQSxTQUFTLENBQUNPLElBQUQsRUFBUUMsZUFBUixDQUFmO0FBQUEsYUFBSCxHQUE2Q0E7QUFIcEQsYUFBZjtBQUtEOztBQUVELDRCQUFPLDZCQUFDLGNBQUQsT0FBUDtBQUNEOztBQUVELGFBQU9ULFFBQVEsbUJBQ1ZLLE1BRFU7QUFFYkcsUUFBQUEsSUFBSSxFQUFFQSxJQUFJLElBQUssRUFGRjtBQUdiUCxRQUFBQSxTQUFTLEVBQUVBLFNBQVMsR0FBRztBQUFBLGlCQUFNQSxTQUFTLENBQUNPLElBQUQsRUFBUUMsZUFBUixDQUFmO0FBQUEsU0FBSCxHQUE2Q0E7QUFIcEQsU0FBZjtBQUtELEtBM0JILENBREY7QUErQkQsRzs7O0VBM0NzRUcsZUFBTUMsUzs7O0FBQWxFaEIsSyxDQUdKaUIsUyxrQ0FDRkMsa0JBQVlELFM7QUFDZlosRUFBQUEsV0FBVyxFQUFFYyxtQkFBVUMsSTtBQUN2QmQsRUFBQUEsU0FBUyxFQUFFYSxtQkFBVUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IE5ldHdvcmtTdGF0dXMsIE9wZXJhdGlvblZhcmlhYmxlcywgUXVlcnlSZXN1bHQgfSBmcm9tICdAYXBvbGxvL2NsaWVudCc7XG5pbXBvcnQgeyBRdWVyeSBhcyBBcG9sbG9RdWVyeSwgUXVlcnlDb21wb25lbnRPcHRpb25zIH0gZnJvbSAnQGFwb2xsby9jbGllbnQvcmVhY3QvY29tcG9uZW50cyc7XG5pbXBvcnQgeyBMb2FkZXIgfSBmcm9tICcuL0xvYWRlcic7XG5pbXBvcnQgeyBPcGVyYXRpb25FcnJvciB9IGZyb20gJy4vT3BlcmF0aW9uRXJyb3InO1xuaW1wb3J0IHsgRmV0Y2hNb3JlLCBBcG9sbG9GZXRjaE1vcmUgfSBmcm9tICcuL2ZldGNoTW9yZSc7XG5cbmV4cG9ydCB0eXBlIFF1ZXJ5UmVuZGVyUHJvcHM8VERhdGEgPSBhbnksIFRWYXJpYWJsZXMgPSBPcGVyYXRpb25WYXJpYWJsZXM+ID0ge1xuICBmZXRjaE1vcmU6ICgoKSA9PiBhbnkpIHwgQXBvbGxvRmV0Y2hNb3JlPFREYXRhLCBUVmFyaWFibGVzPjtcbn0gJiBPbWl0PFF1ZXJ5UmVzdWx0PFREYXRhLCBUVmFyaWFibGVzPiwgJ2ZldGNoTW9yZSc+O1xuXG5leHBvcnQgdHlwZSBRdWVyeVByb3BzPFREYXRhLCBUVmFyaWFibGVzPiA9IHtcbiAgZmV0Y2hNb3JlPzogRmV0Y2hNb3JlPFREYXRhLCBUVmFyaWFibGVzPjtcbiAgcGFzc0xvYWRpbmc/OiBib29sZWFuO1xuICBwYXNzRXJyb3I/OiBib29sZWFuO1xuICBjaGlsZHJlbj86IChyZW5kZXJQcm9wczogUXVlcnlSZW5kZXJQcm9wczxURGF0YSwgVFZhcmlhYmxlcz4pID0+IGFueTtcbn0gJiBPbWl0PFF1ZXJ5Q29tcG9uZW50T3B0aW9uczxURGF0YSwgVFZhcmlhYmxlcz4sICdjaGlsZHJlbic+O1xuXG5leHBvcnQgY2xhc3MgUXVlcnk8VERhdGEgPSBhbnksIFRWYXJpYWJsZXMgPSBPcGVyYXRpb25WYXJpYWJsZXM+IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFxuICBRdWVyeVByb3BzPFREYXRhLCBUVmFyaWFibGVzPlxuPiB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgLi4uQXBvbGxvUXVlcnkucHJvcFR5cGVzLFxuICAgIHBhc3NMb2FkaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBwYXNzRXJyb3I6IFByb3BUeXBlcy5ib29sXG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4sIGZldGNoTW9yZSwgcGFzc0xvYWRpbmcsIHBhc3NFcnJvciwgLi4ucmVzdFByb3BzIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBcG9sbG9RdWVyeSB7Li4ucmVzdFByb3BzfT5cbiAgICAgICAgeyhyZXN1bHQ6IFF1ZXJ5UmVzdWx0PFREYXRhLCBUVmFyaWFibGVzPikgPT4ge1xuICAgICAgICAgIGNvbnN0IHsgbmV0d29ya1N0YXR1cywgZXJyb3IsIGRhdGEsIGZldGNoTW9yZTogYXBvbGxvRmV0Y2hNb3JlIH0gPSByZXN1bHQ7XG5cbiAgICAgICAgICBpZiAoIXBhc3NFcnJvciAmJiBlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIDxPcGVyYXRpb25FcnJvciB7Li4uZXJyb3J9IC8+O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGxvYWRpbmcgPVxuICAgICAgICAgICAgbmV0d29ya1N0YXR1cyA9PT0gTmV0d29ya1N0YXR1cy5sb2FkaW5nIHx8IChuZXR3b3JrU3RhdHVzICE9PSBOZXR3b3JrU3RhdHVzLmZldGNoTW9yZSAmJiByZXN1bHQubG9hZGluZyk7XG4gICAgICAgICAgaWYgKCFwYXNzTG9hZGluZyAmJiBsb2FkaW5nKSB7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICByZXR1cm4gY2hpbGRyZW4oe1xuICAgICAgICAgICAgICAgIC4uLnJlc3VsdCxcbiAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICAgIGZldGNoTW9yZTogZmV0Y2hNb3JlID8gKCkgPT4gZmV0Y2hNb3JlKGRhdGEhLCBhcG9sbG9GZXRjaE1vcmUpIDogYXBvbGxvRmV0Y2hNb3JlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gPExvYWRlciAvPjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gY2hpbGRyZW4oe1xuICAgICAgICAgICAgLi4ucmVzdWx0LFxuICAgICAgICAgICAgZGF0YTogZGF0YSB8fCAoe30gYXMgVERhdGEpLFxuICAgICAgICAgICAgZmV0Y2hNb3JlOiBmZXRjaE1vcmUgPyAoKSA9PiBmZXRjaE1vcmUoZGF0YSEsIGFwb2xsb0ZldGNoTW9yZSkgOiBhcG9sbG9GZXRjaE1vcmVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfX1cbiAgICAgIDwvQXBvbGxvUXVlcnk+XG4gICAgKTtcbiAgfVxufVxuIl19