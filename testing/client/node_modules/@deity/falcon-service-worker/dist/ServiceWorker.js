"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.ServiceWorker = void 0;

var _assertThisInitialized2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/inheritsLoose"));

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _ServiceWorkerContext = /*#__PURE__*/require("./ServiceWorkerContext");

var ServiceWorker = function ServiceWorker(_ref) {
  var children = _ref.children;
  return /*#__PURE__*/_react.default.createElement(_ServiceWorkerContext.ServiceWorkerContext.Consumer, null, function (_ref2) {
    var isSupported = _ref2.isSupported,
        registration = _ref2.registration;
    return isSupported && registration ? /*#__PURE__*/_react.default.createElement(ServiceWorkerInner, {
      registration: registration
    }, function (_ref3) {
      var isWaiting = _ref3.isWaiting,
          skipWaiting = _ref3.skipWaiting;
      return children({
        isSupported: isSupported,
        registration: registration,
        isWaiting: isWaiting,
        skipWaiting: skipWaiting
      });
    }) : children({
      isSupported: isSupported,
      isWaiting: false,
      skipWaiting: function skipWaiting() {}
    });
  });
};

exports.ServiceWorker = ServiceWorker;

var ServiceWorkerInner = /*#__PURE__*/function (_React$Component) {
  (0, _inheritsLoose2.default)(ServiceWorkerInner, _React$Component);

  function ServiceWorkerInner(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.skipWaiting = _this.skipWaiting.bind((0, _assertThisInitialized2.default)(_this));
    _this.onUpdateFound = _this.onUpdateFound.bind((0, _assertThisInitialized2.default)(_this));
    _this.state = {
      isWaiting: false
    };
    return _this;
  }

  var _proto = ServiceWorkerInner.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var registration = this.props.registration;

    if (!navigator.serviceWorker.controller) {
      return;
    }

    if (registration.active && registration.waiting) {
      this.setState(function (state) {
        return Object.assign({}, state, {
          isWaiting: true
        });
      });
      return;
    }

    if (registration.installing) {
      return this.onUpdateFound();
    }

    registration.addEventListener('updatefound', this.onUpdateFound);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    var registration = this.props.registration;
    registration.removeEventListener('updatefound', this.onUpdateFound);
  };

  _proto.onUpdateFound = function onUpdateFound() {
    var _this2 = this;

    var registration = this.props.registration;

    if (registration.installing) {
      registration.installing.addEventListener('statechange', function (event) {
        if (event.target.state === 'installed') {
          _this2.setState(function (state) {
            return Object.assign({}, state, {
              isWaiting: true
            });
          });
        }
      });
    }
  };

  _proto.skipWaiting = function skipWaiting() {
    var registration = this.props.registration;
    return registration.waiting ? registration.waiting.postMessage({
      type: 'SKIP_WAITING',
      payload: undefined
    }) : function () {};
  };

  _proto.render = function render() {
    var children = this.props.children;
    var isWaiting = this.state.isWaiting;
    return children({
      isWaiting: isWaiting,
      skipWaiting: this.skipWaiting
    });
  };

  return ServiceWorkerInner;
}(_react.default.Component);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9TZXJ2aWNlV29ya2VyLnRzeCJdLCJuYW1lcyI6WyJTZXJ2aWNlV29ya2VyIiwiY2hpbGRyZW4iLCJpc1N1cHBvcnRlZCIsInJlZ2lzdHJhdGlvbiIsImlzV2FpdGluZyIsInNraXBXYWl0aW5nIiwiU2VydmljZVdvcmtlcklubmVyIiwicHJvcHMiLCJiaW5kIiwib25VcGRhdGVGb3VuZCIsInN0YXRlIiwiY29tcG9uZW50RGlkTW91bnQiLCJuYXZpZ2F0b3IiLCJzZXJ2aWNlV29ya2VyIiwiY29udHJvbGxlciIsImFjdGl2ZSIsIndhaXRpbmciLCJzZXRTdGF0ZSIsImluc3RhbGxpbmciLCJhZGRFdmVudExpc3RlbmVyIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJ0YXJnZXQiLCJwb3N0TWVzc2FnZSIsInR5cGUiLCJwYXlsb2FkIiwidW5kZWZpbmVkIiwicmVuZGVyIiwiUmVhY3QiLCJDb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBZU8sSUFBTUEsYUFBNEMsR0FBRyxTQUEvQ0EsYUFBK0M7QUFBQSxNQUFHQyxRQUFILFFBQUdBLFFBQUg7QUFBQSxzQkFDMUQsNkJBQUMsMENBQUQsQ0FBc0IsUUFBdEIsUUFDRztBQUFBLFFBQUdDLFdBQUgsU0FBR0EsV0FBSDtBQUFBLFFBQWdCQyxZQUFoQixTQUFnQkEsWUFBaEI7QUFBQSxXQUNDRCxXQUFXLElBQUlDLFlBQWYsZ0JBQ0UsNkJBQUMsa0JBQUQ7QUFBb0IsTUFBQSxZQUFZLEVBQUVBO0FBQWxDLE9BQ0c7QUFBQSxVQUFHQyxTQUFILFNBQUdBLFNBQUg7QUFBQSxVQUFjQyxXQUFkLFNBQWNBLFdBQWQ7QUFBQSxhQUNDSixRQUFRLENBQUM7QUFDUEMsUUFBQUEsV0FBVyxFQUFYQSxXQURPO0FBRVBDLFFBQUFBLFlBQVksRUFBWkEsWUFGTztBQUdQQyxRQUFBQSxTQUFTLEVBQVRBLFNBSE87QUFJUEMs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bEU4QndCLGVBQU1DLFMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU2VydmljZVdvcmtlckNvbnRleHQgfSBmcm9tICcuL1NlcnZpY2VXb3JrZXJDb250ZXh0JztcblxuZXhwb3J0IHR5cGUgU2VydmljZVdvcmtlclJlbmRlclByb3BzID0ge1xuICAvKiogRGV0ZXJtaW5lcyBpZiBTZXJ2aWNlIFdvcmtlciBBUEkgaXMgc3VwcG9ydGVkIGJ5IHRoZSBXZWIgQnJvd3NlciAqL1xuICBpc1N1cHBvcnRlZDogYm9vbGVhbjtcbiAgcmVnaXN0cmF0aW9uPzogU2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbjtcbiAgLyoqIElmIHRoZXJlJ3MgYWxyZWFkeSBhbiBhY3RpdmUgU2VydmljZSBXb3JrZXIsIHRoZW4gdGhlIHVzZXIgbmVlZHMgdG8gY2xvc2UgYWxsIHRoZWlyIHRhYnMgYmVmb3JlIHRoZXknbGwgZ2V0IHVwZGF0ZXMgKi9cbiAgaXNXYWl0aW5nOiBib29sZWFuO1xuICAvKiogRm9yY2UgdXBkYXRlIChhdXRvIHJlbG9hZCBpbiBlYWNoIG9wZW4gdGFiKS4gKi9cbiAgc2tpcFdhaXRpbmc6IEZ1bmN0aW9uO1xufTtcblxuZXhwb3J0IHR5cGUgU2VydmljZVdvcmtlclByb3BzID0ge1xuICBjaGlsZHJlbjogKHJlbmRlclByb3BzOiBTZXJ2aWNlV29ya2VyUmVuZGVyUHJvcHMpID0+IFJlYWN0LlJlYWN0Tm9kZTtcbn07XG5leHBvcnQgY29uc3QgU2VydmljZVdvcmtlcjogUmVhY3QuU0ZDPFNlcnZpY2VXb3JrZXJQcm9wcz4gPSAoeyBjaGlsZHJlbiB9KSA9PiAoXG4gIDxTZXJ2aWNlV29ya2VyQ29udGV4dC5Db25zdW1lcj5cbiAgICB7KHsgaXNTdXBwb3J0ZWQsIHJlZ2lzdHJhdGlvbiB9KSA9PlxuICAgICAgaXNTdXBwb3J0ZWQgJiYgcmVnaXN0cmF0aW9uID8gKFxuICAgICAgICA8U2VydmljZVdvcmtlcklubmVyIHJlZ2lzdHJhdGlvbj17cmVnaXN0cmF0aW9ufT5cbiAgICAgICAgICB7KHsgaXNXYWl0aW5nLCBza2lwV2FpdGluZyB9KSA9PlxuICAgICAgICAgICAgY2hpbGRyZW4oe1xuICAgICAgICAgICAgICBpc1N1cHBvcnRlZCxcbiAgICAgICAgICAgICAgcmVnaXN0cmF0aW9uLFxuICAgICAgICAgICAgICBpc1dhaXRpbmcsXG4gICAgICAgICAgICAgIHNraXBXYWl0aW5nXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgPC9TZXJ2aWNlV29ya2VySW5uZXI+XG4gICAgICApIDogKFxuICAgICAgICBjaGlsZHJlbih7XG4gICAgICAgICAgaXNTdXBwb3J0ZWQsXG4gICAgICAgICAgaXNXYWl0aW5nOiBmYWxzZSxcbiAgICAgICAgICBza2lwV2FpdGluZzogKCkgPT4ge31cbiAgICAgICAgfSlcbiAgICAgIClcbiAgICB9XG4gIDwvU2VydmljZVdvcmtlckNvbnRleHQuQ29uc3VtZXI+XG4pO1xuXG50eXBlIFNlcnZpY2VXb3JrZXJJbm5lclByb3BzID0ge1xuICByZWdpc3RyYXRpb246IFNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb247XG4gIGNoaWxkcmVuOiAocmVuZGVyUHJvcHM6IHsgaXNXYWl0aW5nOiBib29sZWFuOyBza2lwV2FpdGluZzogRnVuY3Rpb24gfSkgPT4gUmVhY3QuUmVhY3ROb2RlO1xufTtcbnR5cGUgU2VydmljZVdvcmtlcklubmVyU3RhdGUgPSB7fSAmIFBpY2s8U2VydmljZVdvcmtlclJlbmRlclByb3BzLCAnaXNXYWl0aW5nJz47XG5jbGFzcyBTZXJ2aWNlV29ya2VySW5uZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8U2VydmljZVdvcmtlcklubmVyUHJvcHMsIFNlcnZpY2VXb3JrZXJJbm5lclN0YXRlPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5za2lwV2FpdGluZyA9IHRoaXMuc2tpcFdhaXRpbmcuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uVXBkYXRlRm91bmQgPSB0aGlzLm9uVXBkYXRlRm91bmQuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc1dhaXRpbmc6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IHsgcmVnaXN0cmF0aW9uIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKCFuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHJlZ2lzdHJhdGlvbi5hY3RpdmUgJiYgcmVnaXN0cmF0aW9uLndhaXRpbmcpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUgPT4gKHsgLi4uc3RhdGUsIGlzV2FpdGluZzogdHJ1ZSB9KSk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocmVnaXN0cmF0aW9uLmluc3RhbGxpbmcpIHtcbiAgICAgIHJldHVybiB0aGlzLm9uVXBkYXRlRm91bmQoKTtcbiAgICB9XG5cbiAgICByZWdpc3RyYXRpb24uYWRkRXZlbnRMaXN0ZW5lcigndXBkYXRlZm91bmQnLCB0aGlzLm9uVXBkYXRlRm91bmQpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgY29uc3QgeyByZWdpc3RyYXRpb24gfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZWdpc3RyYXRpb24ucmVtb3ZlRXZlbnRMaXN0ZW5lcigndXBkYXRlZm91bmQnLCB0aGlzLm9uVXBkYXRlRm91bmQpO1xuICB9XG5cbiAgb25VcGRhdGVGb3VuZCgpIHtcbiAgICBjb25zdCB7IHJlZ2lzdHJhdGlvbiB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmIChyZWdpc3RyYXRpb24uaW5zdGFsbGluZykge1xuICAgICAgcmVnaXN0cmF0aW9uLmluc3RhbGxpbmcuYWRkRXZlbnRMaXN0ZW5lcignc3RhdGVjaGFuZ2UnLCBldmVudCA9PiB7XG4gICAgICAgIGlmICgoZXZlbnQudGFyZ2V0IGFzIGFueSkuc3RhdGUgPT09ICdpbnN0YWxsZWQnKSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSA9PiAoeyAuLi5zdGF0ZSwgaXNXYWl0aW5nOiB0cnVlIH0pKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgc2tpcFdhaXRpbmcoKSB7XG4gICAgY29uc3QgeyByZWdpc3RyYXRpb24gfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gcmVnaXN0cmF0aW9uLndhaXRpbmdcbiAgICAgID8gcmVnaXN0cmF0aW9uLndhaXRpbmcucG9zdE1lc3NhZ2UoeyB0eXBlOiAnU0tJUF9XQUlUSU5HJywgcGF5bG9hZDogdW5kZWZpbmVkIH0pXG4gICAgICA6ICgpID0+IHt9O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBpc1dhaXRpbmcgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gY2hpbGRyZW4oe1xuICAgICAgaXNXYWl0aW5nLFxuICAgICAgc2tpcFdhaXRpbmc6IHRoaXMuc2tpcFdhaXRpbmdcbiAgICB9KTtcbiAgfVxufVxuIl19