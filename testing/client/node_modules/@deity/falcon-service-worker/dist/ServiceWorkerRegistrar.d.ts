import React from 'react';
import PropTypes from 'prop-types';
export declare type ServiceWorkerRegistrarProps = {
    scriptUrl?: string;
    options?: RegistrationOptions;
};
export declare type ServiceWorkerRegistrarState = {
    isSupported: boolean;
    registration?: ServiceWorkerRegistration;
};
export declare class ServiceWorkerRegistrar extends React.Component<ServiceWorkerRegistrarProps, ServiceWorkerRegistrarState> {
    static propTypes: {
        scriptUrl: PropTypes.Requireable<string>;
        options: PropTypes.Requireable<PropTypes.InferProps<{
            scope: PropTypes.Requireable<string>;
            type: PropTypes.Requireable<string>;
            updateViaCache: PropTypes.Requireable<string>;
        }>>;
    };
    static defaultProps: {
        scriptUrl: string;
    };
    constructor(props: any);
    componentDidMount(): void;
    componentWillUnmount(): void;
    onControllerChange(event: any): void;
    get isSupported(): boolean | RegExpMatchArray;
    /**
     * if `document.readyState` is `complete` invoke `callback` immediately, otherwise delay it until `load` event is fired
     * @param {Function} callback function
     */
    whenReady(callback: any): void;
    render(): JSX.Element;
}
//# sourceMappingURL=ServiceWorkerRegistrar.d.ts.map