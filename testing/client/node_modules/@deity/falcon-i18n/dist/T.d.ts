import React from 'react';
import PropTypes from 'prop-types';
import { TOptions } from 'i18next';
export declare type TProps = {
    id: string;
} & TOptions;
export declare class T extends React.Component<TProps> {
    static propTypes: {
        id: PropTypes.Validator<string>;
        defaultValue: PropTypes.Requireable<string>;
        count: PropTypes.Requireable<number>;
        context: PropTypes.Requireable<any>;
        replace: PropTypes.Requireable<PropTypes.InferProps<{}>>;
        lng: PropTypes.Requireable<string>;
        lngs: PropTypes.Requireable<string[]>;
        fallbackLng: PropTypes.Requireable<string | string[]>;
        ns: PropTypes.Requireable<string | string[]>;
        keySeparator: PropTypes.Requireable<string>;
        nsSeparator: PropTypes.Requireable<string>;
        returnObjects: PropTypes.Requireable<boolean>;
        joinArrays: PropTypes.Requireable<string>;
        postProcess: PropTypes.Requireable<string | string[]>;
        interpolation: PropTypes.Requireable<PropTypes.InferProps<{}>>;
    };
    render(): JSX.Element;
}
//# sourceMappingURL=T.d.ts.map