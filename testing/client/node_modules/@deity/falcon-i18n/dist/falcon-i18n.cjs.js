'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));
require('i18next');

const defaultOptions = {
  rerenderOn: ['languageChanged', 'loaded', 'added', 'removed']
};
let i18nInstance;
function setI18n(instance) {
  i18nInstance = instance;
}
function getI18n() {
  return i18nInstance;
}
const I18nContext = /*#__PURE__*/React__default.createContext({
  updatedAt: new Date(),
  i18n: undefined,
  language: undefined,
  t: x => x,
  options: defaultOptions
});

var _jsxFileName = "/home/vsts/work/1/s/packages/falcon-i18n/src/I18nProvider.tsx";
class I18nProvider extends React__default.Component {
  constructor(props) {
    super(props);
    this.state = {
      updatedAt: new Date()
    };
    this.onI18nChanged = this.onI18nChanged.bind(this);
  }

  componentDidMount() {
    const {
      i18n
    } = this.props;
    defaultOptions.rerenderOn.forEach(x => i18n.on(x, this.onI18nChanged));
  }

  componentWillUnmount() {
    const {
      i18n
    } = this.props;
    defaultOptions.rerenderOn.forEach(x => i18n.off(x, this.onI18nChanged));
  }

  onI18nChanged() {
    this.setState({
      updatedAt: new Date()
    });
  }

  render() {
    const {
      i18n,
      children
    } = this.props;
    const {
      updatedAt
    } = this.state;
    setI18n(i18n);
    return /*#__PURE__*/React__default.createElement(I18nContext.Provider, {
      value: {
        updatedAt,
        i18n,
        language: i18n.language,
        t: i18n.t.bind(i18n),
        options: defaultOptions
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 46,
        columnNumber: 7
      }
    }, children);
  }

}

var _jsxFileName$1 = "/home/vsts/work/1/s/packages/falcon-i18n/src/I18n.tsx";
class I18n extends React__default.Component {
  render() {
    const {
      children
    } = this.props;
    return /*#__PURE__*/React__default.createElement(I18nContext.Consumer, {
      __source: {
        fileName: _jsxFileName$1,
        lineNumber: 17,
        columnNumber: 12
      }
    }, x => children(x.t, x.i18n));
  }

}
I18n.propTypes = {
  children: PropTypes.oneOfType([PropTypes.func]).isRequired
};
const useI18n = () => React.useContext(I18nContext);

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var _jsxFileName$2 = "/home/vsts/work/1/s/packages/falcon-i18n/src/T.tsx";
// eslint-disable-next-line id-length
class T extends React__default.Component {
  render() {
    const _this$props = this.props,
          {
      id
    } = _this$props,
          translationOptions = _objectWithoutPropertiesLoose(_this$props, ["id"]);

    return /*#__PURE__*/React__default.createElement(I18nContext.Consumer, {
      __source: {
        fileName: _jsxFileName$2,
        lineNumber: 34,
        columnNumber: 12
      }
    }, ({
      t
    }) => t(id, translationOptions));
  }

}
T.propTypes = {
  id: PropTypes.string.isRequired,
  defaultValue: PropTypes.oneOfType([PropTypes.string]),
  count: PropTypes.number,
  // eslint-disable-next-line react/forbid-prop-types
  context: PropTypes.any,
  // used for contexts (eg. male\female)
  replace: PropTypes.shape({}),
  // object with vars for interpolation - or put them directly in options
  lng: PropTypes.string,
  lngs: PropTypes.arrayOf(PropTypes.string),
  fallbackLng: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),
  ns: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),
  keySeparator: PropTypes.string,
  nsSeparator: PropTypes.string,
  returnObjects: PropTypes.bool,
  // accessing an object not a translation string
  joinArrays: PropTypes.string,
  // char, eg. '\n' that arrays will be joined by (can be set globally too)
  postProcess: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),
  // postProcessors to apply see interval plurals as a sample
  interpolation: PropTypes.shape({})
};

exports.I18n = I18n;
exports.I18nContext = I18nContext;
exports.I18nProvider = I18nProvider;
exports.T = T;
exports.defaultOptions = defaultOptions;
exports.getI18n = getI18n;
exports.setI18n = setI18n;
exports.useI18n = useI18n;
//# sourceMappingURL=falcon-i18n.cjs.js.map
