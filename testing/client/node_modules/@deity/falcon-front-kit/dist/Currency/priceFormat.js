"use strict";

exports.__esModule = true;
exports.priceFormatFactory = priceFormatFactory;

var getPriceFormatter = function getPriceFormatter(locales, numberFormatOptions) {
  return new Intl.NumberFormat(locales.filter(function (x) {
    return x;
  }), Object.assign({}, numberFormatOptions, {
    style: 'currency'
  }));
};

/**
 * Price Format function factory based on Intl api
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat
 * @param {string[]} localeCodes localization codes
 * @param {PriceFormatOptions} options formatting options
 * @returns {ReturnType<typeof priceFormatFactory>} price formatter
 */
function priceFormatFactory(localeCodes, options) {
  var memoizedFormatter = getPriceFormatter([options.locale].concat(localeCodes), options);
  /**
   * Price Format (memoized)
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat
   * @param {number} value value to format
   * @returns {string} formatted value
   */

  function priceFormat(value, overrides) {
    return overrides ? getPriceFormatter([overrides.locale, options.locale].concat(localeCodes), Object.assign({}, options, overrides)).format(value) : memoizedFormatter.format(value);
  }

  return priceFormat;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9DdXJyZW5jeS9wcmljZUZvcm1hdC50cyJdLCJuYW1lcyI6WyJnZXRQcmljZUZvcm1hdHRlciIsImxvY2FsZXMiLCJudW1iZXJGb3JtYXRPcHRpb25zIiwiSW50bCIsIk51bWJlckZvcm1hdCIsImZpbHRlciIsIngiLCJzdHlsZSIsInByaWNlRm9ybWF0RmFjdG9yeSIsImxvY2FsZUNvZGVzIiwib3B0aW9ucyIsIm1lbW9pemVkRm9ybWF0dGVyIiwibG9jYWxlIiwicHJpY2VGb3JtYXQiLCJ2YWx1ZSIsIm92ZXJyaWRlcyIsImZvcm1hdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFNQSxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQW9CLENBQUNDLE9BQUQsRUFBb0JDLG1CQUFwQjtBQUFBLFNBQ3hCLElBQUlDLElBQUksQ0FBQ0MsWUFBVCxDQUNFSCxPQUFPLENBQUNJLE1BQVIsQ0FBZSxVQUFBQyxDQUFDO0FBQUEsV0FBSUEsQ0FBSjtBQUFBLEdBQWhCLENBREYsb0JBRU9KLG1CQUZQO0FBRTRCSyxJQUFBQSxLQUFLLEVBQUU7QUFGbkMsS0FEd0I7QUFBQSxDQUExQjs7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNDLGtCQUFULENBQTRCQyxXQUE1QixFQUFtREMsT0FBbkQsRUFBZ0Y7QUFDckYsTUFBTUMsaUJBQWlCLEdBQUdYLGlCQUFpQixFQUFFVSxPQUFPLENBQUNFLE1BQVYsU0FBcUJILFdBQXJCLEdBQW1DQyxPQUFuQyxDQUEzQztBQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFVRSxXQUFTRyxXQUFULENBQXFCQyxLQUFyQixFQUFvQ0MsU0FBcEMsRUFBNEU7QUFDMUUsV0FBT0EsU0FBUyxHQUNaZixpQkFBaUIsRUFBRWUsU0FBUyxDQUFDSCxNQUFaLEVBQW9CRixPQUFPLENBQUNFLE1BQTVCLFNBQXVDSCxXQUF2QyxxQkFDWkMsT0FEWSxFQUVaSyxTQUZZLEVBQWpCLENBR0dDLE1BSEgsQ0FHVUYsS0FIVixDQURZLEdBS1pILGlCQUFpQixDQUFDSyxNQUFsQixDQUF5QkYsS0FBekIsQ0FMSjtBQU1EOztBQUVELFNBQU9ELFdBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGdldFByaWNlRm9ybWF0dGVyID0gKGxvY2FsZXM6IHN0cmluZ1tdLCBudW1iZXJGb3JtYXRPcHRpb25zOiBJbnRsLk51bWJlckZvcm1hdE9wdGlvbnMpID0+XG4gIG5ldyBJbnRsLk51bWJlckZvcm1hdChcbiAgICBsb2NhbGVzLmZpbHRlcih4ID0+IHgpLFxuICAgIHsgLi4ubnVtYmVyRm9ybWF0T3B0aW9ucywgc3R5bGU6ICdjdXJyZW5jeScgfVxuICApO1xuXG5leHBvcnQgdHlwZSBQcmljZUZvcm1hdE9wdGlvbnMgPSB7XG4gIGxvY2FsZT86IHN0cmluZztcbn0gJiBPbWl0PEludGwuTnVtYmVyRm9ybWF0T3B0aW9ucywgJ3N0eWxlJz47XG5cbi8qKlxuICogUHJpY2UgRm9ybWF0IGZ1bmN0aW9uIGZhY3RvcnkgYmFzZWQgb24gSW50bCBhcGlcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTnVtYmVyRm9ybWF0XG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBsb2NhbGVDb2RlcyBsb2NhbGl6YXRpb24gY29kZXNcbiAqIEBwYXJhbSB7UHJpY2VGb3JtYXRPcHRpb25zfSBvcHRpb25zIGZvcm1hdHRpbmcgb3B0aW9uc1xuICogQHJldHVybnMge1JldHVyblR5cGU8dHlwZW9mIHByaWNlRm9ybWF0RmFjdG9yeT59IHByaWNlIGZvcm1hdHRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJpY2VGb3JtYXRGYWN0b3J5KGxvY2FsZUNvZGVzOiBzdHJpbmdbXSwgb3B0aW9uczogUHJpY2VGb3JtYXRPcHRpb25zKSB7XG4gIGNvbnN0IG1lbW9pemVkRm9ybWF0dGVyID0gZ2V0UHJpY2VGb3JtYXR0ZXIoW29wdGlvbnMubG9jYWxlLCAuLi5sb2NhbGVDb2Rlc10sIG9wdGlvbnMpO1xuXG4gIC8qKlxuICAgKiBQcmljZSBGb3JtYXQgKG1lbW9pemVkKVxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL051bWJlckZvcm1hdFxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgdmFsdWUgdG8gZm9ybWF0XG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IGZvcm1hdHRlZCB2YWx1ZVxuICAgKi9cbiAgZnVuY3Rpb24gcHJpY2VGb3JtYXQodmFsdWU6IG51bWJlcik6IHN0cmluZztcbiAgLyoqXG4gICAqIFByaWNlIEZvcm1hdCAobm90IG1lbW9pemVkLCBiZWNhdXNlIG9mIGN1c3RvbSBvcHRpb25zLCBzbyB0aGUgcGVyZm9ybWFuY2UgcGVuYWx0eSBjb3VsZCBiZSBwYWlkKVxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL051bWJlckZvcm1hdFxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgdmFsdWUgdG8gZm9ybWF0XG4gICAqIEBwYXJhbSB7UHJpY2VGb3JtYXRPcHRpb25zfSBvdmVycmlkZXMgYExvY2FsZVByb3ZpZGVyLnByaWNlRm9ybWF0T3B0aW9uc2Agb3B0aW9ucyBvdmVycmlkZXNcbiAgICogQHJldHVybnMge3N0cmluZ30gZm9ybWF0dGVkIHZhbHVlXG4gICAqL1xuICBmdW5jdGlvbiBwcmljZUZvcm1hdCh2YWx1ZTogbnVtYmVyLCBvdmVycmlkZXM6IFByaWNlRm9ybWF0T3B0aW9ucyk6IHN0cmluZztcbiAgZnVuY3Rpb24gcHJpY2VGb3JtYXQodmFsdWU6IG51bWJlciwgb3ZlcnJpZGVzPzogUHJpY2VGb3JtYXRPcHRpb25zKTogc3RyaW5nIHtcbiAgICByZXR1cm4gb3ZlcnJpZGVzXG4gICAgICA/IGdldFByaWNlRm9ybWF0dGVyKFtvdmVycmlkZXMubG9jYWxlLCBvcHRpb25zLmxvY2FsZSwgLi4ubG9jYWxlQ29kZXNdLCB7XG4gICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAuLi5vdmVycmlkZXNcbiAgICAgICAgfSkuZm9ybWF0KHZhbHVlKVxuICAgICAgOiBtZW1vaXplZEZvcm1hdHRlci5mb3JtYXQodmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIHByaWNlRm9ybWF0O1xufVxuIl19