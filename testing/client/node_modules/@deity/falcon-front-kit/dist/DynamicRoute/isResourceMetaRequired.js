"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.isResourceMetaRequired = void 0;

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _reactRouterDom = /*#__PURE__*/require("react-router-dom");

/**
 * Determines if for provided location is handled via Route component which requires to fetch resource metadata first
 * @param children set of Route components to search for matching
 * @param location location to which Route component needs to be matched
 */
var isResourceMetaRequired = function isResourceMetaRequired(children, location) {
  var result = false;
  var match; // We use React.Children.forEach instead of React.Children.toArray().find()
  // here because toArray adds keys to all child elements and we do not want
  // to trigger an unmount/remount for two <Route>s that render the same
  // component at different URLs.

  _react.default.Children.forEach(children, function (child) {
    if (!result && match == null && /*#__PURE__*/_react.default.isValidElement(child)) {
      var path = child.props.path || child.props.from;

      if (path) {
        match = (0, _reactRouterDom.matchPath)(location.pathname, Object.assign({}, child.props, {
          path: path
        }));
      } else {
        result = !!child.props.type;
      }
    }
  });

  return result;
};

exports.isResourceMetaRequired = isResourceMetaRequired;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9EeW5hbWljUm91dGUvaXNSZXNvdXJjZU1ldGFSZXF1aXJlZC50cyJdLCJuYW1lcyI6WyJpc1Jlc291cmNlTWV0YVJlcXVpcmVkIiwiY2hpbGRyZW4iLCJsb2NhdGlvbiIsInJlc3VsdCIsIm1hdGNoIiwiUmVhY3QiLCJDaGlsZHJlbiIsImZvckVhY2giLCJjaGlsZCIsImlzVmFsaWRFbGVtZW50IiwicGF0aCIsInByb3BzIiwiZnJvbSIsInBhdGhuYW1lIiwidHlwZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxJQUFNQSxzQkFBc0IsR0FBRyxTQUF6QkEsc0JBQXlCLENBQUNDLFFBQUQsRUFBNEJDLFFBQTVCLEVBQTREO0FBQ2hHLE1BQUlDLE1BQU0sR0FBRyxLQUFiO0FBQ0EsTUFBSUMsS0FBSixDQUZnRyxDQUloRztBQUNBO0FBQ0E7QUFDQTs7QUFDQUMsaUJBQU1DLFFBQU4sQ0FBZUMsT0FBZixDQUF1Qk4sUUFBdkIsRUFBaUMsVUFBQU8sS0FBSyxFQUFJO0FBQ3hDLFFBQUksQ0FBQ0wsTUFBRCxJQUFXQyxLQUFLLElBQUksSUFBcEIsaUJBQTRCQyxlQUFNSSxjQUFOLENBQXFCRCxLQUFyQixDQUFoQyxFQUE2RDtBQUMzRCxVQUFNRSxJQUFJLEdBQUdGLEtBQUssQ0FBQ0csS0FBTixDQUFZRCxJQUFaLElBQW9CRixLQUFLLENBQUNHLEtBQU4sQ0FBWUMsSUFBN0M7O0FBQ0EsVUFBSUYsSUFBSixFQUFVO0FBQ1JOLFFBQUFBLEtBQUssR0FBRywrQkFBVUYsUUFBUSxDQUFDVyxRQUFuQixvQkFBa0NMLEtBQUssQ0FBQ0csS0FBeEM7QUFBK0NELFVBQUFBLElBQUksRUFBSkE7QUFBL0MsV0FBUjtBQUNELE9BRkQsTUFFTztBQUNMUCxRQUFBQSxNQUFNLEdBQUcsQ0FBQyxDQUFDSyxLQUFLLENBQUNHLEtBQU4sQ0FBWUcsSUFBdkI7QUFDRDtBQUNGO0FBQ0YsR0FURDs7QUFXQSxTQUFPWCxNQUFQO0FBQ0QsQ0FwQk0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgbWF0Y2hQYXRoLCBtYXRjaCBhcyBNYXRjaCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgTG9jYXRpb24gfSBmcm9tICdoaXN0b3J5JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGZvciBwcm92aWRlZCBsb2NhdGlvbiBpcyBoYW5kbGVkIHZpYSBSb3V0ZSBjb21wb25lbnQgd2hpY2ggcmVxdWlyZXMgdG8gZmV0Y2ggcmVzb3VyY2UgbWV0YWRhdGEgZmlyc3RcbiAqIEBwYXJhbSBjaGlsZHJlbiBzZXQgb2YgUm91dGUgY29tcG9uZW50cyB0byBzZWFyY2ggZm9yIG1hdGNoaW5nXG4gKiBAcGFyYW0gbG9jYXRpb24gbG9jYXRpb24gdG8gd2hpY2ggUm91dGUgY29tcG9uZW50IG5lZWRzIHRvIGJlIG1hdGNoZWRcbiAqL1xuZXhwb3J0IGNvbnN0IGlzUmVzb3VyY2VNZXRhUmVxdWlyZWQgPSAoY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSwgbG9jYXRpb246IExvY2F0aW9uKTogYm9vbGVhbiA9PiB7XG4gIGxldCByZXN1bHQgPSBmYWxzZTtcbiAgbGV0IG1hdGNoOiBNYXRjaDxhbnk+IHwgbnVsbDtcblxuICAvLyBXZSB1c2UgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCBpbnN0ZWFkIG9mIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoKS5maW5kKClcbiAgLy8gaGVyZSBiZWNhdXNlIHRvQXJyYXkgYWRkcyBrZXlzIHRvIGFsbCBjaGlsZCBlbGVtZW50cyBhbmQgd2UgZG8gbm90IHdhbnRcbiAgLy8gdG8gdHJpZ2dlciBhbiB1bm1vdW50L3JlbW91bnQgZm9yIHR3byA8Um91dGU+cyB0aGF0IHJlbmRlciB0aGUgc2FtZVxuICAvLyBjb21wb25lbnQgYXQgZGlmZmVyZW50IFVSTHMuXG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGNoaWxkID0+IHtcbiAgICBpZiAoIXJlc3VsdCAmJiBtYXRjaCA9PSBudWxsICYmIFJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgY29uc3QgcGF0aCA9IGNoaWxkLnByb3BzLnBhdGggfHwgY2hpbGQucHJvcHMuZnJvbTtcbiAgICAgIGlmIChwYXRoKSB7XG4gICAgICAgIG1hdGNoID0gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCB7IC4uLmNoaWxkLnByb3BzLCBwYXRoIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gISFjaGlsZC5wcm9wcy50eXBlO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iXX0=