"use strict";

exports.__esModule = true;
exports.tryGetFalconScopeConfig = void 0;

/** @see import { useCookie } from 'react-cookie' */

/** Falcon Client side scope data - the selected scope based on current context (url, cookie, etc) */

/** Falcon Client side scopes configuration */

/**
 * TODO: instead of using `Cookies` and `CookieInterface` we should be able to provide single and consistent interface
 */

/** extracts Falcon Client side Scope configuration
 * @param falconScopeConfig
 * @param context
 */
var tryGetFalconScopeConfig = function tryGetFalconScopeConfig(config, context, getter) {
  var defaultScopeId = config.defaultId;
  var selectedScope;

  if (!config.scopes.length) {
    throw new Error('Server returned empty list of scopes. Please configure the server to return at least one scope!');
  }

  try {
    selectedScope = getter(config, context);
  } catch (error) {
    console.warn("Can not get FalconScope! Trying to get the default FalconScope instead.");
    selectedScope = config.scopes.find(function (x) {
      return x.id === config.defaultId;
    });

    if (!selectedScope) {
      console.warn("The default scope with id=\"" + config.defaultId + "\" was not returned from the server. Using the first scope from the list as default (id=\"" + config.scopes[0].id + "\")");
      selectedScope = config.scopes[0];
      defaultScopeId = selectedScope.id;
    }
  }

  return {
    available: config.scopes,
    defaultId: defaultScopeId,
    currentId: selectedScope.id,
    pathBasename: selectedScope.pathBasename
  };
};
/** sets Falcon Client side Scope configuration */


exports.tryGetFalconScopeConfig = tryGetFalconScopeConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9GYWxjb25TY29wZS9GYWxjb25DbGllbnRTY29wZUNvbmZpZy50cyJdLCJuYW1lcyI6WyJ0cnlHZXRGYWxjb25TY29wZUNvbmZpZyIsImNvbmZpZyIsImNvbnRleHQiLCJnZXR0ZXIiLCJkZWZhdWx0U2NvcGVJZCIsImRlZmF1bHRJZCIsInNlbGVjdGVkU2NvcGUiLCJzY29wZXMiLCJsZW5ndGgiLCJFcnJvciIsImVycm9yIiwiY29uc29sZSIsIndhcm4iLCJmaW5kIiwieCIsImlkIiwiYXZhaWxhYmxlIiwiY3VycmVudElkIiwicGF0aEJhc2VuYW1lIl0sIm1hcHBpbmdzIjoiOzs7OztBQUtBOztBQU9BOztBQVFBOztBQVlBO0FBQ0E7QUFDQTs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQU1PLElBQU1BLHVCQUF1QixHQUFHLFNBQTFCQSx1QkFBMEIsQ0FDckNDLE1BRHFDLEVBRXJDQyxPQUZxQyxFQUdyQ0MsTUFIcUMsRUFJUjtBQUM3QixNQUFJQyxjQUFjLEdBQUdILE1BQU0sQ0FBQ0ksU0FBNUI7QUFDQSxNQUFJQyxhQUFKOztBQUVBLE1BQUksQ0FBQ0wsTUFBTSxDQUFDTSxNQUFQLENBQWNDLE1BQW5CLEVBQTJCO0FBQ3pCLFVBQU0sSUFBSUMsS0FBSixDQUFVLGlHQUFWLENBQU47QUFDRDs7QUFFRCxNQUFJO0FBQ0ZILElBQUFBLGFBQWEsR0FBR0gsTUFBTSxDQUFDRixNQUFELEVBQVNDLE9BQVQsQ0FBdEI7QUFDRCxHQUZELENBRUUsT0FBT1EsS0FBUCxFQUFjO0FBQ2RDLElBQUFBLE9BQU8sQ0FBQ0MsSUFBUjtBQUNBTixJQUFBQSxhQUFhLEdBQUdMLE1BQU0sQ0FBQ00sTUFBUCxDQUFjTSxJQUFkLENBQW1CLFVBQUFDLENBQUM7QUFBQSxhQUFJQSxDQUFDLENBQUNDLEVBQUYsS0FBU2QsTUFBTSxDQUFDSSxTQUFwQjtBQUFBLEtBQXBCLENBQWhCOztBQUNBLFFBQUksQ0FBQ0MsYUFBTCxFQUFvQjtBQUNsQkssTUFBQUEsT0FBTyxDQUFDQyxJQUFSLGtDQUNnQ1gsTUFBTSxDQUFDSSxTQUR2QyxrR0FDMklKLE1BQU0sQ0FBQ00sTUFBUCxDQUFjLENBQWQsRUFBaUJRLEVBRDVKO0FBR0FULE1BQUFBLGFBQWEsR0FBR0wsTUFBTSxDQUFDTSxNQUFQLENBQWMsQ0FBZCxDQUFoQjtBQUNBSCxNQUFBQSxjQUFjLEdBQUdFLGFBQWEsQ0FBQ1MsRUFBL0I7QUFDRDtBQUNGOztBQUVELFNBQU87QUFDTEMsSUFBQUEsU0FBUyxFQUFFZixNQUFNLENBQUNNLE1BRGI7QUFFTEYsSUFBQUEsU0FBUyxFQUFFRCxjQUZOO0FBR0xhLElBQUFBLFNBQVMsRUFBRVgsYUFBYSxDQUFDUyxFQUhwQjtBQUlMRyxJQUFBQSxZQUFZLEVBQUVaLGFBQWEsQ0FBQ1k7QUFKdkIsR0FBUDtBQU1ELENBaENNO0FBa0NQIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVXJsV2l0aFN0cmluZ1F1ZXJ5IH0gZnJvbSAndXJsJztcbmltcG9ydCB7IENvb2tpZXMsIHVzZUNvb2tpZXMgfSBmcm9tICdyZWFjdC1jb29raWUnO1xuaW1wb3J0IHsgRmFsY29uU2NvcGUsIEdlb0xvY2F0aW9uIH0gZnJvbSAnQGRlaXR5L2ZhbGNvbi1kYXRhJztcbmltcG9ydCB7IEZhbGNvblNjb3BlQ29uZmlnIH0gZnJvbSAnLi9GYWxjb25TY29wZUNvbmZpZyc7XG5cbi8qKiBAc2VlIGltcG9ydCB7IHVzZUNvb2tpZSB9IGZyb20gJ3JlYWN0LWNvb2tpZScgKi9cbmV4cG9ydCB0eXBlIENvb2tpZXNJbnRlcmZhY2UgPSB7XG4gIGFsbDogUmV0dXJuVHlwZTx0eXBlb2YgdXNlQ29va2llcz5bMF07XG4gIHNldDogUmV0dXJuVHlwZTx0eXBlb2YgdXNlQ29va2llcz5bMV07XG4gIHJlbW92ZTogUmV0dXJuVHlwZTx0eXBlb2YgdXNlQ29va2llcz5bMl07XG59O1xuXG4vKiogRmFsY29uIENsaWVudCBzaWRlIHNjb3BlIGRhdGEgLSB0aGUgc2VsZWN0ZWQgc2NvcGUgYmFzZWQgb24gY3VycmVudCBjb250ZXh0ICh1cmwsIGNvb2tpZSwgZXRjKSAqL1xuZXhwb3J0IHR5cGUgRmFsY29uQ2xpZW50Q3VycmVudFNjb3BlQ29uZmlnID0ge1xuICAvKiogc2NvcGUgaWQgKi9cbiAgaWQ6IHN0cmluZztcbiAgLyoqIHJvdXRlciBwYXRoIGJhc2VuYW1lICovXG4gIHBhdGhCYXNlbmFtZT86IHN0cmluZztcbn07XG5cbi8qKiBGYWxjb24gQ2xpZW50IHNpZGUgc2NvcGVzIGNvbmZpZ3VyYXRpb24gKi9cbmV4cG9ydCB0eXBlIEZhbGNvbkNsaWVudFNjb3Blc0NvbmZpZyA9IHtcbiAgLyoqIGF2YWlsYWJsZSBzY29wZXMgKi9cbiAgYXZhaWxhYmxlOiBGYWxjb25TY29wZVtdO1xuICAvKiogaWQgb2YgY3VycmVudGx5IHNlbGVjdGVkIHNjb3BlICovXG4gIGN1cnJlbnRJZDogc3RyaW5nO1xuICAvKiogZGVmYXVsdCBzY29wZSBpZCAobWlnaHQgYmUgZGlmZmVyZW50IGZyb20gcGFzc2VkIGRlZmF1bHQgc2NvcGUgaWYgdGhhdCBvbmUgaXMgbm90IGF2YWlsYWJsZSAqL1xuICBkZWZhdWx0SWQ6IHN0cmluZztcbiAgLyoqIHJvdXRlciBwYXRoIGJhc2VuYW1lICovXG4gIHBhdGhCYXNlbmFtZT86IHN0cmluZztcbn07XG5cbi8qKlxuICogVE9ETzogaW5zdGVhZCBvZiB1c2luZyBgQ29va2llc2AgYW5kIGBDb29raWVJbnRlcmZhY2VgIHdlIHNob3VsZCBiZSBhYmxlIHRvIHByb3ZpZGUgc2luZ2xlIGFuZCBjb25zaXN0ZW50IGludGVyZmFjZVxuICovXG5leHBvcnQgdHlwZSBTY29wZUNvbnRleHQ8VENvb2tpZT4gPSB7XG4gIHVybDogVXJsV2l0aFN0cmluZ1F1ZXJ5O1xuICBjb29raWVzOiBUQ29va2llO1xuICBnZW9Mb2NhdGlvbjogR2VvTG9jYXRpb247XG59O1xuXG4vKiogZXh0cmFjdHMgRmFsY29uIENsaWVudCBzaWRlIFNjb3BlIGNvbmZpZ3VyYXRpb25cbiAqIEBwYXJhbSBmYWxjb25TY29wZUNvbmZpZ1xuICogQHBhcmFtIGNvbnRleHRcbiAqL1xuZXhwb3J0IHR5cGUgR2V0RmFsY29uQ2xpZW50U2NvcGVDb25maWcgPSAoXG4gIGNvbmZpZzogRmFsY29uU2NvcGVDb25maWcsXG4gIGNvbnRleHQ6IFNjb3BlQ29udGV4dDxDb29raWVzPlxuKSA9PiBGYWxjb25DbGllbnRDdXJyZW50U2NvcGVDb25maWc7XG5cbmV4cG9ydCBjb25zdCB0cnlHZXRGYWxjb25TY29wZUNvbmZpZyA9IChcbiAgY29uZmlnOiBGYWxjb25TY29wZUNvbmZpZyxcbiAgY29udGV4dDogU2NvcGVDb250ZXh0PENvb2tpZXM+LFxuICBnZXR0ZXI6IEdldEZhbGNvbkNsaWVudFNjb3BlQ29uZmlnXG4pOiBGYWxjb25DbGllbnRTY29wZXNDb25maWcgPT4ge1xuICBsZXQgZGVmYXVsdFNjb3BlSWQgPSBjb25maWcuZGVmYXVsdElkO1xuICBsZXQgc2VsZWN0ZWRTY29wZTtcblxuICBpZiAoIWNvbmZpZy5zY29wZXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZXJ2ZXIgcmV0dXJuZWQgZW1wdHkgbGlzdCBvZiBzY29wZXMuIFBsZWFzZSBjb25maWd1cmUgdGhlIHNlcnZlciB0byByZXR1cm4gYXQgbGVhc3Qgb25lIHNjb3BlIScpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBzZWxlY3RlZFNjb3BlID0gZ2V0dGVyKGNvbmZpZywgY29udGV4dCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS53YXJuKGBDYW4gbm90IGdldCBGYWxjb25TY29wZSEgVHJ5aW5nIHRvIGdldCB0aGUgZGVmYXVsdCBGYWxjb25TY29wZSBpbnN0ZWFkLmApO1xuICAgIHNlbGVjdGVkU2NvcGUgPSBjb25maWcuc2NvcGVzLmZpbmQoeCA9PiB4LmlkID09PSBjb25maWcuZGVmYXVsdElkKTtcbiAgICBpZiAoIXNlbGVjdGVkU2NvcGUpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgYFRoZSBkZWZhdWx0IHNjb3BlIHdpdGggaWQ9XCIke2NvbmZpZy5kZWZhdWx0SWR9XCIgd2FzIG5vdCByZXR1cm5lZCBmcm9tIHRoZSBzZXJ2ZXIuIFVzaW5nIHRoZSBmaXJzdCBzY29wZSBmcm9tIHRoZSBsaXN0IGFzIGRlZmF1bHQgKGlkPVwiJHtjb25maWcuc2NvcGVzWzBdLmlkfVwiKWBcbiAgICAgICk7XG4gICAgICBzZWxlY3RlZFNjb3BlID0gY29uZmlnLnNjb3Blc1swXTtcbiAgICAgIGRlZmF1bHRTY29wZUlkID0gc2VsZWN0ZWRTY29wZS5pZDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGF2YWlsYWJsZTogY29uZmlnLnNjb3BlcyxcbiAgICBkZWZhdWx0SWQ6IGRlZmF1bHRTY29wZUlkLFxuICAgIGN1cnJlbnRJZDogc2VsZWN0ZWRTY29wZS5pZCxcbiAgICBwYXRoQmFzZW5hbWU6IHNlbGVjdGVkU2NvcGUucGF0aEJhc2VuYW1lXG4gIH07XG59O1xuXG4vKiogc2V0cyBGYWxjb24gQ2xpZW50IHNpZGUgU2NvcGUgY29uZmlndXJhdGlvbiAqL1xuZXhwb3J0IHR5cGUgU2V0RmFsY29uQ2xpZW50U2NvcGVDb25maWcgPSAoXG4gIGZhbGNvblNjb3BlSWQ6IHN0cmluZyxcbiAgY29uZmlnOiBGYWxjb25TY29wZUNvbmZpZyxcbiAgY29udGV4dDogU2NvcGVDb250ZXh0PENvb2tpZXNJbnRlcmZhY2U+XG4pID0+IEZhbGNvbkNsaWVudEN1cnJlbnRTY29wZUNvbmZpZyB8IHVuZGVmaW5lZDtcbiJdfQ==