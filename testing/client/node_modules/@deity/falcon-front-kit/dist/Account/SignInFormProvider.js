"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.SignInFormProvider = void 0;

var _extends2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _formik = /*#__PURE__*/require("formik");

var _falconData = /*#__PURE__*/require("@deity/falcon-data");

var _falconShopData = /*#__PURE__*/require("@deity/falcon-shop-data");

var _React = /*#__PURE__*/require("../React");

var SignInFormProvider = function SignInFormProvider(props) {
  var onSuccess = props.onSuccess,
      initialValues = props.initialValues,
      mutationOptions = props.mutationOptions,
      formikProps = (0, _objectWithoutPropertiesLoose2.default)(props, ["onSuccess", "initialValues", "mutationOptions"]);
  var defaultInitialValues = {
    email: '',
    password: ''
  };

  var _useSignInMutation = (0, _falconShopData.useSignInMutation)(),
      signIn = _useSignInMutation[0];

  var getUserError = (0, _falconData.useGetUserError)();
  var isMounted = (0, _React.useMounted)();
  return /*#__PURE__*/_react.default.createElement(_formik.Formik, (0, _extends2.default)({
    initialStatus: {},
    initialValues: initialValues || defaultInitialValues,
    onSubmit: function onSubmit(values, _ref) {
      var setSubmitting = _ref.setSubmitting,
          setStatus = _ref.setStatus;
      return signIn(Object.assign({
        variables: {
          input: values
        }
      }, mutationOptions || {})).then(function (_ref2) {
        var data = _ref2.data;

        if (isMounted.current) {
          setSubmitting(false);
          setStatus({
            data: data
          });
          return onSuccess && onSuccess(data);
        }
      }).catch(function (e) {
        var error = getUserError(e);

        if (error.length && isMounted.current) {
          setStatus({
            error: error
          });
          setSubmitting(false);
        }
      });
    }
  }, formikProps));
};

exports.SignInFormProvider = SignInFormProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BY2NvdW50L1NpZ25JbkZvcm1Qcm92aWRlci50c3giXSwibmFtZXMiOlsiU2lnbkluRm9ybVByb3ZpZGVyIiwicHJvcHMiLCJvblN1Y2Nlc3MiLCJpbml0aWFsVmFsdWVzIiwibXV0YXRpb25PcHRpb25zIiwiZm9ybWlrUHJvcHMiLCJkZWZhdWx0SW5pdGlhbFZhbHVlcyIsImVtYWlsIiwicGFzc3dvcmQiLCJzaWduSW4iLCJnZXRVc2VyRXJyb3IiLCJpc01vdW50ZWQiLCJ2YWx1ZXMiLCJzZXRTdWJtaXR0aW5nIiwic2V0U3RhdHVzIiwidmFyaWFibGVzIiwiaW5wdXQiLCJ0aGVuIiwiZGF0YSIsImN1cnJlbnQiLCJjYXRjaCIsImUiLCJlcnJvciIsImxlbmd0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFPTyxJQUFNQSxrQkFBcUQsR0FBRyxTQUF4REEsa0JBQXdELENBQUFDLEtBQUssRUFBSTtBQUM1RSxNQUFRQyxTQUFSLEdBQXNFRCxLQUF0RSxDQUFRQyxTQUFSO0FBQUEsTUFBbUJDLGFBQW5CLEdBQXNFRixLQUF0RSxDQUFtQkUsYUFBbkI7QUFBQSxNQUFrQ0MsZUFBbEMsR0FBc0VILEtBQXRFLENBQWtDRyxlQUFsQztBQUFBLE1BQXNEQyxXQUF0RCwrQ0FBc0VKLEtBQXRFO0FBQ0EsTUFBTUssb0JBQW9CLEdBQUc7QUFDM0JDLElBQUFBLEtBQUssRUFBRSxFQURvQjtBQUUzQkMsSUFBQUEsUUFBUSxFQUFFO0FBRmlCLEdBQTdCOztBQUtBLDJCQUFpQix3Q0FBakI7QUFBQSxNQUFPQyxNQUFQOztBQUNBLE1BQU1DLFlBQVksR0FBRyxrQ0FBckI7QUFDQSxNQUFNQyxTQUFTLEdBQUcsd0JBQWxCO0FBRUEsc0JBQ0UsNkJBQUMsY0FBRDtBQUNFLElBQUEsYUFBYSxFQUFFLEVBRGpCO0FBRUUsSUFBQSxhQUFhLEVBQUVSLGFBQWEsSUFBSUcsb0JBRmxDO0FBR0UsSUFBQSxRQUFRLEVBQUUsa0JBQUNNLE1BQUQ7QUFBQSxVQUFXQyxhQUFYLFFBQVdBLGFBQVg7QUFBQSxVQUEwQkMsU0FBMUIsUUFBMEJBLFNBQTFCO0FBQUEsYUFDUkwsTUFBTTtBQUFHTSxRQUFBQSxTQUFTLEVBQUU7QUFBRUMsVUFBQUEsS0FBSyxFQUFFSjtBQUFUO0FBQWQsU0FBcUNSLGVBQWUsSUFBSSxFQUF4RCxFQUFOLENBQ0dhLElBREgsQ0FDUSxpQkFBYztBQUFBLFlBQVhDLElBQVcsU0FBWEEsSUFBVzs7QUFDbEIsWUFBSVAsU0FBUyxDQUFDUSxPQUFkLEVBQXVCO0FBQ3JCTixVQUFBQSxhQUFhLENBQUMsS0FBRCxDQUFiO0FBQ0FDLFVBQUFBLFNBQVMsQ0FBQztBQUFFSSxZQUFBQSxJQUFJLEVBQUpBO0FBQUYsV0FBRCxDQUFUO0FBQ0EsaUJBQU9oQixTQUFTLElBQUlBLFNBQVMsQ0FBQ2dCLElBQUQsQ0FBN0I7QUFDRDtBQUNGLE9BUEgsRUFRR0UsS0FSSCxDQVFTLFVBQUFDLENBQUMsRUFBSTtBQUNWLFlBQU1DLEtBQUssR0FBR1osWUFBWSxDQUFDVyxDQUFELENBQTFCOztBQUNBLFlBQUlDLEtBQUssQ0FBQ0MsTUFBTixJQUFnQlosU0FBUyxDQUFDUSxPQUE5QixFQUF1QztBQUNyQ0wsVUFBQUEsU0FBUyxDQUFDO0FBQUVRLFlBQUFBLEtBQUssRUFBTEE7QUFBRixXQUFELENBQVQ7QUFDQVQsVUFBQUEsYUFBYSxDQUFDLEtBQUQsQ0FBYjtBQUNEO0FBQ0YsT0FkSCxDQURRO0FBQUE7QUFIWixLQW9CTVIsV0FwQk4sRUFERjtBQXdCRCxDQW5DTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBGb3JtaWsgfSBmcm9tICdmb3JtaWsnO1xuaW1wb3J0IHsgdXNlR2V0VXNlckVycm9yIH0gZnJvbSAnQGRlaXR5L2ZhbGNvbi1kYXRhJztcbmltcG9ydCB7IHVzZVNpZ25Jbk11dGF0aW9uLCBTaWduSW5SZXNwb25zZSB9IGZyb20gJ0BkZWl0eS9mYWxjb24tc2hvcC1kYXRhJztcbmltcG9ydCB7IEZvcm1Qcm92aWRlclByb3BzIH0gZnJvbSAnLi4vRm9ybXMnO1xuaW1wb3J0IHsgdXNlTW91bnRlZCB9IGZyb20gJy4uL1JlYWN0JztcblxuZXhwb3J0IHR5cGUgU2lnbkluRm9ybVZhbHVlcyA9IHtcbiAgZW1haWw6IHN0cmluZztcbiAgcGFzc3dvcmQ6IHN0cmluZztcbn07XG5leHBvcnQgdHlwZSBTaWduSW5Gb3JtUHJvdmlkZXJQcm9wcyA9IEZvcm1Qcm92aWRlclByb3BzPFNpZ25JbkZvcm1WYWx1ZXMsIFNpZ25JblJlc3BvbnNlPjtcbmV4cG9ydCBjb25zdCBTaWduSW5Gb3JtUHJvdmlkZXI6IFJlYWN0LkZDPFNpZ25JbkZvcm1Qcm92aWRlclByb3BzPiA9IHByb3BzID0+IHtcbiAgY29uc3QgeyBvblN1Y2Nlc3MsIGluaXRpYWxWYWx1ZXMsIG11dGF0aW9uT3B0aW9ucywgLi4uZm9ybWlrUHJvcHMgfSA9IHByb3BzO1xuICBjb25zdCBkZWZhdWx0SW5pdGlhbFZhbHVlcyA9IHtcbiAgICBlbWFpbDogJycsXG4gICAgcGFzc3dvcmQ6ICcnXG4gIH07XG5cbiAgY29uc3QgW3NpZ25Jbl0gPSB1c2VTaWduSW5NdXRhdGlvbigpO1xuICBjb25zdCBnZXRVc2VyRXJyb3IgPSB1c2VHZXRVc2VyRXJyb3IoKTtcbiAgY29uc3QgaXNNb3VudGVkID0gdXNlTW91bnRlZCgpO1xuXG4gIHJldHVybiAoXG4gICAgPEZvcm1pa1xuICAgICAgaW5pdGlhbFN0YXR1cz17e319XG4gICAgICBpbml0aWFsVmFsdWVzPXtpbml0aWFsVmFsdWVzIHx8IGRlZmF1bHRJbml0aWFsVmFsdWVzfVxuICAgICAgb25TdWJtaXQ9eyh2YWx1ZXMsIHsgc2V0U3VibWl0dGluZywgc2V0U3RhdHVzIH0pID0+XG4gICAgICAgIHNpZ25Jbih7IHZhcmlhYmxlczogeyBpbnB1dDogdmFsdWVzIH0sIC4uLihtdXRhdGlvbk9wdGlvbnMgfHwge30pIH0pXG4gICAgICAgICAgLnRoZW4oKHsgZGF0YSB9KSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNNb3VudGVkLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgc2V0U3VibWl0dGluZyhmYWxzZSk7XG4gICAgICAgICAgICAgIHNldFN0YXR1cyh7IGRhdGEgfSk7XG4gICAgICAgICAgICAgIHJldHVybiBvblN1Y2Nlc3MgJiYgb25TdWNjZXNzKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBnZXRVc2VyRXJyb3IoZSk7XG4gICAgICAgICAgICBpZiAoZXJyb3IubGVuZ3RoICYmIGlzTW91bnRlZC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgIHNldFN0YXR1cyh7IGVycm9yIH0pO1xuICAgICAgICAgICAgICBzZXRTdWJtaXR0aW5nKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgfVxuICAgICAgey4uLmZvcm1pa1Byb3BzfVxuICAgIC8+XG4gICk7XG59O1xuIl19