"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.ResetPasswordFormProvider = void 0;

var _extends2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _formik = /*#__PURE__*/require("formik");

var _falconData = /*#__PURE__*/require("@deity/falcon-data");

var _falconShopData = /*#__PURE__*/require("@deity/falcon-shop-data");

var _React = /*#__PURE__*/require("../React");

var ResetPasswordFormProvider = function ResetPasswordFormProvider(props) {
  var onSuccess = props.onSuccess,
      initialValues = props.initialValues,
      mutationOptions = props.mutationOptions,
      formikProps = (0, _objectWithoutPropertiesLoose2.default)(props, ["onSuccess", "initialValues", "mutationOptions"]);
  var defaultInitialValues = {
    resetToken: '',
    password: ''
  };

  var _useResetPasswordMuta = (0, _falconShopData.useResetPasswordMutation)(),
      resetPassword = _useResetPasswordMuta[0];

  var getUserError = (0, _falconData.useGetUserError)();
  var isMounted = (0, _React.useMounted)();
  return /*#__PURE__*/_react.default.createElement(_formik.Formik, (0, _extends2.default)({
    initialStatus: {},
    initialValues: initialValues || defaultInitialValues,
    onSubmit: function onSubmit(values, _ref) {
      var setSubmitting = _ref.setSubmitting,
          setStatus = _ref.setStatus;
      return resetPassword(Object.assign({
        variables: {
          input: values
        }
      }, mutationOptions || {})).then(function (_ref2) {
        var data = _ref2.data;

        if (isMounted.current) {
          setSubmitting(false);
          setStatus({
            data: data
          });
          return onSuccess && onSuccess(data);
        }
      }).catch(function (e) {
        var error = getUserError(e);

        if (error.length && isMounted.current) {
          setStatus({
            error: error
          });
          setSubmitting(false);
        }
      });
    }
  }, formikProps));
};

exports.ResetPasswordFormProvider = ResetPasswordFormProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BY2NvdW50L1Jlc2V0UGFzc3dvcmRGb3JtUHJvdmlkZXIudHN4Il0sIm5hbWVzIjpbIlJlc2V0UGFzc3dvcmRGb3JtUHJvdmlkZXIiLCJwcm9wcyIsIm9uU3VjY2VzcyIsImluaXRpYWxWYWx1ZXMiLCJtdXRhdGlvbk9wdGlvbnMiLCJmb3JtaWtQcm9wcyIsImRlZmF1bHRJbml0aWFsVmFsdWVzIiwicmVzZXRUb2tlbiIsInBhc3N3b3JkIiwicmVzZXRQYXNzd29yZCIsImdldFVzZXJFcnJvciIsImlzTW91bnRlZCIsInZhbHVlcyIsInNldFN1Ym1pdHRpbmciLCJzZXRTdGF0dXMiLCJ2YXJpYWJsZXMiLCJpbnB1dCIsInRoZW4iLCJkYXRhIiwiY3VycmVudCIsImNhdGNoIiwiZSIsImVycm9yIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBOztBQUVBOztBQUdPLElBQU1BLHlCQUFvRSxHQUFHLFNBQXZFQSx5QkFBdUUsQ0FBQUMsS0FBSyxFQUFJO0FBQzNGLE1BQVFDLFNBQVIsR0FBc0VELEtBQXRFLENBQVFDLFNBQVI7QUFBQSxNQUFtQkMsYUFBbkIsR0FBc0VGLEtBQXRFLENBQW1CRSxhQUFuQjtBQUFBLE1BQWtDQyxlQUFsQyxHQUFzRUgsS0FBdEUsQ0FBa0NHLGVBQWxDO0FBQUEsTUFBc0RDLFdBQXRELCtDQUFzRUosS0FBdEU7QUFDQSxNQUFNSyxvQkFBd0MsR0FBRztBQUMvQ0MsSUFBQUEsVUFBVSxFQUFFLEVBRG1DO0FBRS9DQyxJQUFBQSxRQUFRLEVBQUU7QUFGcUMsR0FBakQ7O0FBS0EsOEJBQXdCLCtDQUF4QjtBQUFBLE1BQU9DLGFBQVA7O0FBQ0EsTUFBTUMsWUFBWSxHQUFHLGtDQUFyQjtBQUNBLE1BQU1DLFNBQVMsR0FBRyx3QkFBbEI7QUFFQSxzQkFDRSw2QkFBQyxjQUFEO0FBQ0UsSUFBQSxhQUFhLEVBQUUsRUFEakI7QUFFRSxJQUFBLGFBQWEsRUFBRVIsYUFBYSxJQUFJRyxvQkFGbEM7QUFHRSxJQUFBLFFBQVEsRUFBRSxrQkFBQ00sTUFBRDtBQUFBLFVBQVdDLGFBQVgsUUFBV0EsYUFBWDtBQUFBLFVBQTBCQyxTQUExQixRQUEwQkEsU0FBMUI7QUFBQSxhQUNSTCxhQUFhO0FBQUdNLFFBQUFBLFNBQVMsRUFBRTtBQUFFQyxVQUFBQSxLQUFLLEVBQUVKO0FBQVQ7QUFBZCxTQUFxQ1IsZUFBZSxJQUFJLEVBQXhELEVBQWIsQ0FDR2EsSUFESCxDQUNRLGlCQUFjO0FBQUEsWUFBWEMsSUFBVyxTQUFYQSxJQUFXOztBQUNsQixZQUFJUCxTQUFTLENBQUNRLE9BQWQsRUFBdUI7QUFDckJOLFVBQUFBLGFBQWEsQ0FBQyxLQUFELENBQWI7QUFDQUMsVUFBQUEsU0FBUyxDQUFDO0FBQUVJLFlBQUFBLElBQUksRUFBSkE7QUFBRixXQUFELENBQVQ7QUFDQSxpQkFBT2hCLFNBQVMsSUFBSUEsU0FBUyxDQUFDZ0IsSUFBRCxDQUE3QjtBQUNEO0FBQ0YsT0FQSCxFQVFHRSxLQVJILENBUVMsVUFBQUMsQ0FBQyxFQUFJO0FBQ1YsWUFBTUMsS0FBSyxHQUFHWixZQUFZLENBQUNXLENBQUQsQ0FBMUI7O0FBQ0EsWUFBSUMsS0FBSyxDQUFDQyxNQUFOLElBQWdCWixTQUFTLENBQUNRLE9BQTlCLEVBQXVDO0FBQ3JDTCxVQUFBQSxTQUFTLENBQUM7QUFBRVEsWUFBQUEsS0FBSyxFQUFMQTtBQUFGLFdBQUQsQ0FBVDtBQUNBVCxVQUFBQSxhQUFhLENBQUMsS0FBRCxDQUFiO0FBQ0Q7QUFDRixPQWRILENBRFE7QUFBQTtBQUhaLEtBb0JNUixXQXBCTixFQURGO0FBd0JELENBbkNNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEZvcm1payB9IGZyb20gJ2Zvcm1payc7XG5pbXBvcnQgeyB1c2VHZXRVc2VyRXJyb3IgfSBmcm9tICdAZGVpdHkvZmFsY29uLWRhdGEnO1xuaW1wb3J0IHsgUmVzZXRQYXNzd29yZElucHV0IH0gZnJvbSAnQGRlaXR5L2ZhbGNvbi1zaG9wLWV4dGVuc2lvbic7XG5pbXBvcnQgeyB1c2VSZXNldFBhc3N3b3JkTXV0YXRpb24sIFJlc2V0UGFzc3dvcmRSZXNwb25zZSB9IGZyb20gJ0BkZWl0eS9mYWxjb24tc2hvcC1kYXRhJztcbmltcG9ydCB7IEZvcm1Qcm92aWRlclByb3BzIH0gZnJvbSAnLi4vRm9ybXMnO1xuaW1wb3J0IHsgdXNlTW91bnRlZCB9IGZyb20gJy4uL1JlYWN0JztcblxuZXhwb3J0IHR5cGUgUmVzZXRQYXNzd29yZEZvcm1Qcm92aWRlclByb3BzID0gRm9ybVByb3ZpZGVyUHJvcHM8UmVzZXRQYXNzd29yZElucHV0LCBSZXNldFBhc3N3b3JkUmVzcG9uc2U+O1xuZXhwb3J0IGNvbnN0IFJlc2V0UGFzc3dvcmRGb3JtUHJvdmlkZXI6IFJlYWN0LlNGQzxSZXNldFBhc3N3b3JkRm9ybVByb3ZpZGVyUHJvcHM+ID0gcHJvcHMgPT4ge1xuICBjb25zdCB7IG9uU3VjY2VzcywgaW5pdGlhbFZhbHVlcywgbXV0YXRpb25PcHRpb25zLCAuLi5mb3JtaWtQcm9wcyB9ID0gcHJvcHM7XG4gIGNvbnN0IGRlZmF1bHRJbml0aWFsVmFsdWVzOiBSZXNldFBhc3N3b3JkSW5wdXQgPSB7XG4gICAgcmVzZXRUb2tlbjogJycsXG4gICAgcGFzc3dvcmQ6ICcnXG4gIH07XG5cbiAgY29uc3QgW3Jlc2V0UGFzc3dvcmRdID0gdXNlUmVzZXRQYXNzd29yZE11dGF0aW9uKCk7XG4gIGNvbnN0IGdldFVzZXJFcnJvciA9IHVzZUdldFVzZXJFcnJvcigpO1xuICBjb25zdCBpc01vdW50ZWQgPSB1c2VNb3VudGVkKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8Rm9ybWlrXG4gICAgICBpbml0aWFsU3RhdHVzPXt7fX1cbiAgICAgIGluaXRpYWxWYWx1ZXM9e2luaXRpYWxWYWx1ZXMgfHwgZGVmYXVsdEluaXRpYWxWYWx1ZXN9XG4gICAgICBvblN1Ym1pdD17KHZhbHVlcywgeyBzZXRTdWJtaXR0aW5nLCBzZXRTdGF0dXMgfSkgPT5cbiAgICAgICAgcmVzZXRQYXNzd29yZCh7IHZhcmlhYmxlczogeyBpbnB1dDogdmFsdWVzIH0sIC4uLihtdXRhdGlvbk9wdGlvbnMgfHwge30pIH0pXG4gICAgICAgICAgLnRoZW4oKHsgZGF0YSB9KSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNNb3VudGVkLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgc2V0U3VibWl0dGluZyhmYWxzZSk7XG4gICAgICAgICAgICAgIHNldFN0YXR1cyh7IGRhdGEgfSk7XG4gICAgICAgICAgICAgIHJldHVybiBvblN1Y2Nlc3MgJiYgb25TdWNjZXNzKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBnZXRVc2VyRXJyb3IoZSk7XG4gICAgICAgICAgICBpZiAoZXJyb3IubGVuZ3RoICYmIGlzTW91bnRlZC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgIHNldFN0YXR1cyh7IGVycm9yIH0pO1xuICAgICAgICAgICAgICBzZXRTdWJtaXR0aW5nKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgfVxuICAgICAgey4uLmZvcm1pa1Byb3BzfVxuICAgIC8+XG4gICk7XG59O1xuIl19