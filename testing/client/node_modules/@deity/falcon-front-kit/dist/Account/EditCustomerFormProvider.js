"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.EditCustomerFormProvider = void 0;

var _extends2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _formik = /*#__PURE__*/require("formik");

var _falconData = /*#__PURE__*/require("@deity/falcon-data");

var _falconShopData = /*#__PURE__*/require("@deity/falcon-shop-data");

var _React = /*#__PURE__*/require("../React");

var EditCustomerFormProvider = function EditCustomerFormProvider(props) {
  var onSuccess = props.onSuccess,
      initialValues = props.initialValues,
      customer = props.customer,
      mutationOptions = props.mutationOptions,
      formikProps = (0, _objectWithoutPropertiesLoose2.default)(props, ["onSuccess", "initialValues", "customer", "mutationOptions"]);
  var defaultInitialValues = {
    websiteId: customer.websiteId,
    email: customer.email,
    firstname: customer.firstname,
    lastname: customer.lastname
  };

  var _useEditCustomerMutat = (0, _falconShopData.useEditCustomerMutation)(),
      editCustomerMutation = _useEditCustomerMutat[0];

  var getUserError = (0, _falconData.useGetUserError)();
  var isMounted = (0, _React.useMounted)();
  return /*#__PURE__*/_react.default.createElement(_formik.Formik, (0, _extends2.default)({
    initialStatus: {},
    initialValues: initialValues || defaultInitialValues,
    onSubmit: function onSubmit(values, _ref) {
      var setSubmitting = _ref.setSubmitting,
          setStatus = _ref.setStatus;
      return editCustomerMutation(Object.assign({
        variables: {
          input: values
        }
      }, mutationOptions || {})).then(function (_ref2) {
        var data = _ref2.data;

        if (isMounted.current) {
          setSubmitting(false);
          setStatus({
            data: data
          });
          return onSuccess && onSuccess(data);
        }
      }).catch(function (e) {
        var error = getUserError(e);

        if (error.length && isMounted.current) {
          setStatus({
            error: error
          });
          setSubmitting(false);
        }
      });
    }
  }, formikProps));
};

exports.EditCustomerFormProvider = EditCustomerFormProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BY2NvdW50L0VkaXRDdXN0b21lckZvcm1Qcm92aWRlci50c3giXSwibmFtZXMiOlsiRWRpdEN1c3RvbWVyRm9ybVByb3ZpZGVyIiwicHJvcHMiLCJvblN1Y2Nlc3MiLCJpbml0aWFsVmFsdWVzIiwiY3VzdG9tZXIiLCJtdXRhdGlvbk9wdGlvbnMiLCJmb3JtaWtQcm9wcyIsImRlZmF1bHRJbml0aWFsVmFsdWVzIiwid2Vic2l0ZUlkIiwiZW1haWwiLCJmaXJzdG5hbWUiLCJsYXN0bmFtZSIsImVkaXRDdXN0b21lck11dGF0aW9uIiwiZ2V0VXNlckVycm9yIiwiaXNNb3VudGVkIiwidmFsdWVzIiwic2V0U3VibWl0dGluZyIsInNldFN0YXR1cyIsInZhcmlhYmxlcyIsImlucHV0IiwidGhlbiIsImRhdGEiLCJjdXJyZW50IiwiY2F0Y2giLCJlIiwiZXJyb3IiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBRUE7O0FBS08sSUFBTUEsd0JBQWtFLEdBQUcsU0FBckVBLHdCQUFxRSxDQUFBQyxLQUFLLEVBQUk7QUFDekYsTUFBUUMsU0FBUixHQUFnRkQsS0FBaEYsQ0FBUUMsU0FBUjtBQUFBLE1BQW1CQyxhQUFuQixHQUFnRkYsS0FBaEYsQ0FBbUJFLGFBQW5CO0FBQUEsTUFBa0NDLFFBQWxDLEdBQWdGSCxLQUFoRixDQUFrQ0csUUFBbEM7QUFBQSxNQUE0Q0MsZUFBNUMsR0FBZ0ZKLEtBQWhGLENBQTRDSSxlQUE1QztBQUFBLE1BQWdFQyxXQUFoRSwrQ0FBZ0ZMLEtBQWhGO0FBQ0EsTUFBTU0sb0JBQXVDLEdBQUc7QUFDOUNDLElBQUFBLFNBQVMsRUFBRUosUUFBUSxDQUFDSSxTQUQwQjtBQUU5Q0MsSUFBQUEsS0FBSyxFQUFFTCxRQUFRLENBQUNLLEtBRjhCO0FBRzlDQyxJQUFBQSxTQUFTLEVBQUVOLFFBQVEsQ0FBQ00sU0FIMEI7QUFJOUNDLElBQUFBLFFBQVEsRUFBRVAsUUFBUSxDQUFDTztBQUoyQixHQUFoRDs7QUFPQSw4QkFBK0IsOENBQS9CO0FBQUEsTUFBT0Msb0JBQVA7O0FBQ0EsTUFBTUMsWUFBWSxHQUFHLGtDQUFyQjtBQUNBLE1BQU1DLFNBQVMsR0FBRyx3QkFBbEI7QUFDQSxzQkFDRSw2QkFBQyxjQUFEO0FBQ0UsSUFBQSxhQUFhLEVBQUUsRUFEakI7QUFFRSxJQUFBLGFBQWEsRUFBRVgsYUFBYSxJQUFJSSxvQkFGbEM7QUFHRSxJQUFBLFFBQVEsRUFBRSxrQkFBQ1EsTUFBRDtBQUFBLFVBQVdDLGFBQVgsUUFBV0EsYUFBWDtBQUFBLFVBQTBCQyxTQUExQixRQUEwQkEsU0FBMUI7QUFBQSxhQUNSTCxvQkFBb0I7QUFBR00sUUFBQUEsU0FBUyxFQUFFO0FBQUVDLFVBQUFBLEtBQUssRUFBRUo7QUFBVDtBQUFkLFNBQXFDVixlQUFlLElBQUksRUFBeEQsRUFBcEIsQ0FDR2UsSUFESCxDQUNRLGlCQUFjO0FBQUEsWUFBWEMsSUFBVyxTQUFYQSxJQUFXOztBQUNsQixZQUFJUCxTQUFTLENBQUNRLE9BQWQsRUFBdUI7QUFDckJOLFVBQUFBLGFBQWEsQ0FBQyxLQUFELENBQWI7QUFDQUMsVUFBQUEsU0FBUyxDQUFDO0FBQUVJLFlBQUFBLElBQUksRUFBSkE7QUFBRixXQUFELENBQVQ7QUFDQSxpQkFBT25CLFNBQVMsSUFBSUEsU0FBUyxDQUFDbUIsSUFBRCxDQUE3QjtBQUNEO0FBQ0YsT0FQSCxFQVFHRSxLQVJILENBUVMsVUFBQUMsQ0FBQyxFQUFJO0FBQ1YsWUFBTUMsS0FBSyxHQUFHWixZQUFZLENBQUNXLENBQUQsQ0FBMUI7O0FBQ0EsWUFBSUMsS0FBSyxDQUFDQyxNQUFOLElBQWdCWixTQUFTLENBQUNRLE9BQTlCLEVBQXVDO0FBQ3JDTCxVQUFBQSxTQUFTLENBQUM7QUFBRVEsWUFBQUEsS0FBSyxFQUFMQTtBQUFGLFdBQUQsQ0FBVDtBQUNBVCxVQUFBQSxhQUFhLENBQUMsS0FBRCxDQUFiO0FBQ0Q7QUFDRixPQWRILENBRFE7QUFBQTtBQUhaLEtBb0JNVixXQXBCTixFQURGO0FBd0JELENBcENNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEZvcm1payB9IGZyb20gJ2Zvcm1payc7XG5pbXBvcnQgeyB1c2VHZXRVc2VyRXJyb3IgfSBmcm9tICdAZGVpdHkvZmFsY29uLWRhdGEnO1xuaW1wb3J0IHsgRWRpdEN1c3RvbWVySW5wdXQsIEN1c3RvbWVyIH0gZnJvbSAnQGRlaXR5L2ZhbGNvbi1zaG9wLWV4dGVuc2lvbic7XG5pbXBvcnQgeyB1c2VFZGl0Q3VzdG9tZXJNdXRhdGlvbiwgRWRpdEN1c3RvbWVyUmVzcG9uc2UgfSBmcm9tICdAZGVpdHkvZmFsY29uLXNob3AtZGF0YSc7XG5pbXBvcnQgeyBGb3JtUHJvdmlkZXJQcm9wcyB9IGZyb20gJy4uL0Zvcm1zJztcbmltcG9ydCB7IHVzZU1vdW50ZWQgfSBmcm9tICcuLi9SZWFjdCc7XG5cbmV4cG9ydCB0eXBlIEVkaXRDdXN0b21lckZvcm1Qcm92aWRlclByb3BzID0gRm9ybVByb3ZpZGVyUHJvcHM8RWRpdEN1c3RvbWVySW5wdXQsIEVkaXRDdXN0b21lclJlc3BvbnNlPiAmIHtcbiAgY3VzdG9tZXI6IFBpY2s8Q3VzdG9tZXIsICd3ZWJzaXRlSWQnIHwgJ2ZpcnN0bmFtZScgfCAnbGFzdG5hbWUnIHwgJ2VtYWlsJz47XG59O1xuZXhwb3J0IGNvbnN0IEVkaXRDdXN0b21lckZvcm1Qcm92aWRlcjogUmVhY3QuU0ZDPEVkaXRDdXN0b21lckZvcm1Qcm92aWRlclByb3BzPiA9IHByb3BzID0+IHtcbiAgY29uc3QgeyBvblN1Y2Nlc3MsIGluaXRpYWxWYWx1ZXMsIGN1c3RvbWVyLCBtdXRhdGlvbk9wdGlvbnMsIC4uLmZvcm1pa1Byb3BzIH0gPSBwcm9wcztcbiAgY29uc3QgZGVmYXVsdEluaXRpYWxWYWx1ZXM6IEVkaXRDdXN0b21lcklucHV0ID0ge1xuICAgIHdlYnNpdGVJZDogY3VzdG9tZXIud2Vic2l0ZUlkLFxuICAgIGVtYWlsOiBjdXN0b21lci5lbWFpbCxcbiAgICBmaXJzdG5hbWU6IGN1c3RvbWVyLmZpcnN0bmFtZSxcbiAgICBsYXN0bmFtZTogY3VzdG9tZXIubGFzdG5hbWVcbiAgfTtcblxuICBjb25zdCBbZWRpdEN1c3RvbWVyTXV0YXRpb25dID0gdXNlRWRpdEN1c3RvbWVyTXV0YXRpb24oKTtcbiAgY29uc3QgZ2V0VXNlckVycm9yID0gdXNlR2V0VXNlckVycm9yKCk7XG4gIGNvbnN0IGlzTW91bnRlZCA9IHVzZU1vdW50ZWQoKTtcbiAgcmV0dXJuIChcbiAgICA8Rm9ybWlrXG4gICAgICBpbml0aWFsU3RhdHVzPXt7fX1cbiAgICAgIGluaXRpYWxWYWx1ZXM9e2luaXRpYWxWYWx1ZXMgfHwgZGVmYXVsdEluaXRpYWxWYWx1ZXN9XG4gICAgICBvblN1Ym1pdD17KHZhbHVlcywgeyBzZXRTdWJtaXR0aW5nLCBzZXRTdGF0dXMgfSkgPT5cbiAgICAgICAgZWRpdEN1c3RvbWVyTXV0YXRpb24oeyB2YXJpYWJsZXM6IHsgaW5wdXQ6IHZhbHVlcyB9LCAuLi4obXV0YXRpb25PcHRpb25zIHx8IHt9KSB9KVxuICAgICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4ge1xuICAgICAgICAgICAgaWYgKGlzTW91bnRlZC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgIHNldFN1Ym1pdHRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgICBzZXRTdGF0dXMoeyBkYXRhIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gb25TdWNjZXNzICYmIG9uU3VjY2VzcyhkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gZ2V0VXNlckVycm9yKGUpO1xuICAgICAgICAgICAgaWYgKGVycm9yLmxlbmd0aCAmJiBpc01vdW50ZWQuY3VycmVudCkge1xuICAgICAgICAgICAgICBzZXRTdGF0dXMoeyBlcnJvciB9KTtcbiAgICAgICAgICAgICAgc2V0U3VibWl0dGluZyhmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIHsuLi5mb3JtaWtQcm9wc31cbiAgICAvPlxuICApO1xufTtcbiJdfQ==