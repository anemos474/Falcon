"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.ChangePasswordFormProvider = void 0;

var _extends2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _formik = /*#__PURE__*/require("formik");

var _falconData = /*#__PURE__*/require("@deity/falcon-data");

var _falconShopData = /*#__PURE__*/require("@deity/falcon-shop-data");

var _React = /*#__PURE__*/require("../React");

var ChangePasswordFormProvider = function ChangePasswordFormProvider(props) {
  var onSuccess = props.onSuccess,
      initialValues = props.initialValues,
      mutationOptions = props.mutationOptions,
      formikProps = (0, _objectWithoutPropertiesLoose2.default)(props, ["onSuccess", "initialValues", "mutationOptions"]);
  var defaultInitialValues = {
    currentPassword: '',
    password: ''
  };

  var _useChangePasswordMut = (0, _falconShopData.useChangePasswordMutation)(),
      changePasswordMutation = _useChangePasswordMut[0];

  var getUserError = (0, _falconData.useGetUserError)();
  var isMounted = (0, _React.useMounted)();
  return /*#__PURE__*/_react.default.createElement(_formik.Formik, (0, _extends2.default)({
    initialStatus: {},
    initialValues: initialValues || defaultInitialValues,
    onSubmit: function onSubmit(values, _ref) {
      var setSubmitting = _ref.setSubmitting,
          setStatus = _ref.setStatus;
      return changePasswordMutation(Object.assign({
        variables: {
          input: values
        }
      }, mutationOptions || {})).then(function (_ref2) {
        var data = _ref2.data;

        if (isMounted.current) {
          setSubmitting(false);
          setStatus({
            data: data
          });
          return onSuccess && onSuccess(data);
        }
      }).catch(function (e) {
        var error = getUserError(e);

        if (error.length && isMounted.current) {
          setStatus({
            error: error
          });
          setSubmitting(false);
        }
      });
    }
  }, formikProps));
};

exports.ChangePasswordFormProvider = ChangePasswordFormProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BY2NvdW50L0NoYW5nZVBhc3N3b3JkRm9ybVByb3ZpZGVyLnRzeCJdLCJuYW1lcyI6WyJDaGFuZ2VQYXNzd29yZEZvcm1Qcm92aWRlciIsInByb3BzIiwib25TdWNjZXNzIiwiaW5pdGlhbFZhbHVlcyIsIm11dGF0aW9uT3B0aW9ucyIsImZvcm1pa1Byb3BzIiwiZGVmYXVsdEluaXRpYWxWYWx1ZXMiLCJjdXJyZW50UGFzc3dvcmQiLCJwYXNzd29yZCIsImNoYW5nZVBhc3N3b3JkTXV0YXRpb24iLCJnZXRVc2VyRXJyb3IiLCJpc01vdW50ZWQiLCJ2YWx1ZXMiLCJzZXRTdWJtaXR0aW5nIiwic2V0U3RhdHVzIiwidmFyaWFibGVzIiwiaW5wdXQiLCJ0aGVuIiwiZGF0YSIsImN1cnJlbnQiLCJjYXRjaCIsImUiLCJlcnJvciIsImxlbmd0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFFQTs7QUFHTyxJQUFNQSwwQkFBc0UsR0FBRyxTQUF6RUEsMEJBQXlFLENBQUFDLEtBQUssRUFBSTtBQUM3RixNQUFRQyxTQUFSLEdBQXNFRCxLQUF0RSxDQUFRQyxTQUFSO0FBQUEsTUFBbUJDLGFBQW5CLEdBQXNFRixLQUF0RSxDQUFtQkUsYUFBbkI7QUFBQSxNQUFrQ0MsZUFBbEMsR0FBc0VILEtBQXRFLENBQWtDRyxlQUFsQztBQUFBLE1BQXNEQyxXQUF0RCwrQ0FBc0VKLEtBQXRFO0FBQ0EsTUFBTUssb0JBQXlDLEdBQUc7QUFDaERDLElBQUFBLGVBQWUsRUFBRSxFQUQrQjtBQUVoREMsSUFBQUEsUUFBUSxFQUFFO0FBRnNDLEdBQWxEOztBQUtBLDhCQUFpQyxnREFBakM7QUFBQSxNQUFPQyxzQkFBUDs7QUFDQSxNQUFNQyxZQUFZLEdBQUcsa0NBQXJCO0FBQ0EsTUFBTUMsU0FBUyxHQUFHLHdCQUFsQjtBQUVBLHNCQUNFLDZCQUFDLGNBQUQ7QUFDRSxJQUFBLGFBQWEsRUFBRSxFQURqQjtBQUVFLElBQUEsYUFBYSxFQUFFUixhQUFhLElBQUlHLG9CQUZsQztBQUdFLElBQUEsUUFBUSxFQUFFLGtCQUFDTSxNQUFEO0FBQUEsVUFBV0MsYUFBWCxRQUFXQSxhQUFYO0FBQUEsVUFBMEJDLFNBQTFCLFFBQTBCQSxTQUExQjtBQUFBLGFBQ1JMLHNCQUFzQjtBQUFHTSxRQUFBQSxTQUFTLEVBQUU7QUFBRUMsVUFBQUEsS0FBSyxFQUFFSjtBQUFUO0FBQWQsU0FBcUNSLGVBQWUsSUFBSSxFQUF4RCxFQUF0QixDQUNHYSxJQURILENBQ1EsaUJBQWM7QUFBQSxZQUFYQyxJQUFXLFNBQVhBLElBQVc7O0FBQ2xCLFlBQUlQLFNBQVMsQ0FBQ1EsT0FBZCxFQUF1QjtBQUNyQk4sVUFBQUEsYUFBYSxDQUFDLEtBQUQsQ0FBYjtBQUNBQyxVQUFBQSxTQUFTLENBQUM7QUFBRUksWUFBQUEsSUFBSSxFQUFKQTtBQUFGLFdBQUQsQ0FBVDtBQUNBLGlCQUFPaEIsU0FBUyxJQUFJQSxTQUFTLENBQUNnQixJQUFELENBQTdCO0FBQ0Q7QUFDRixPQVBILEVBUUdFLEtBUkgsQ0FRUyxVQUFBQyxDQUFDLEVBQUk7QUFDVixZQUFNQyxLQUFLLEdBQUdaLFlBQVksQ0FBQ1csQ0FBRCxDQUExQjs7QUFDQSxZQUFJQyxLQUFLLENBQUNDLE1BQU4sSUFBZ0JaLFNBQVMsQ0FBQ1EsT0FBOUIsRUFBdUM7QUFDckNMLFVBQUFBLFNBQVMsQ0FBQztBQUFFUSxZQUFBQSxLQUFLLEVBQUxBO0FBQUYsV0FBRCxDQUFUO0FBQ0FULFVBQUFBLGFBQWEsQ0FBQyxLQUFELENBQWI7QUFDRDtBQUNGLE9BZEgsQ0FEUTtBQUFBO0FBSFosS0FvQk1SLFdBcEJOLEVBREY7QUF3QkQsQ0FuQ00iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRm9ybWlrIH0gZnJvbSAnZm9ybWlrJztcbmltcG9ydCB7IHVzZUdldFVzZXJFcnJvciB9IGZyb20gJ0BkZWl0eS9mYWxjb24tZGF0YSc7XG5pbXBvcnQgeyBDaGFuZ2VQYXNzd29yZElucHV0IH0gZnJvbSAnQGRlaXR5L2ZhbGNvbi1zaG9wLWV4dGVuc2lvbic7XG5pbXBvcnQgeyB1c2VDaGFuZ2VQYXNzd29yZE11dGF0aW9uLCBDaGFuZ2VQYXNzd29yZFJlc3BvbnNlIH0gZnJvbSAnQGRlaXR5L2ZhbGNvbi1zaG9wLWRhdGEnO1xuaW1wb3J0IHsgRm9ybVByb3ZpZGVyUHJvcHMgfSBmcm9tICcuLi9Gb3Jtcyc7XG5pbXBvcnQgeyB1c2VNb3VudGVkIH0gZnJvbSAnLi4vUmVhY3QnO1xuXG5leHBvcnQgdHlwZSBDaGFuZ2VQYXNzd29yZEZvcm1Qcm92aWRlclByb3BzID0gRm9ybVByb3ZpZGVyUHJvcHM8Q2hhbmdlUGFzc3dvcmRJbnB1dCwgQ2hhbmdlUGFzc3dvcmRSZXNwb25zZT47XG5leHBvcnQgY29uc3QgQ2hhbmdlUGFzc3dvcmRGb3JtUHJvdmlkZXI6IFJlYWN0LlNGQzxDaGFuZ2VQYXNzd29yZEZvcm1Qcm92aWRlclByb3BzPiA9IHByb3BzID0+IHtcbiAgY29uc3QgeyBvblN1Y2Nlc3MsIGluaXRpYWxWYWx1ZXMsIG11dGF0aW9uT3B0aW9ucywgLi4uZm9ybWlrUHJvcHMgfSA9IHByb3BzO1xuICBjb25zdCBkZWZhdWx0SW5pdGlhbFZhbHVlczogQ2hhbmdlUGFzc3dvcmRJbnB1dCA9IHtcbiAgICBjdXJyZW50UGFzc3dvcmQ6ICcnLFxuICAgIHBhc3N3b3JkOiAnJ1xuICB9O1xuXG4gIGNvbnN0IFtjaGFuZ2VQYXNzd29yZE11dGF0aW9uXSA9IHVzZUNoYW5nZVBhc3N3b3JkTXV0YXRpb24oKTtcbiAgY29uc3QgZ2V0VXNlckVycm9yID0gdXNlR2V0VXNlckVycm9yKCk7XG4gIGNvbnN0IGlzTW91bnRlZCA9IHVzZU1vdW50ZWQoKTtcblxuICByZXR1cm4gKFxuICAgIDxGb3JtaWtcbiAgICAgIGluaXRpYWxTdGF0dXM9e3t9fVxuICAgICAgaW5pdGlhbFZhbHVlcz17aW5pdGlhbFZhbHVlcyB8fCBkZWZhdWx0SW5pdGlhbFZhbHVlc31cbiAgICAgIG9uU3VibWl0PXsodmFsdWVzLCB7IHNldFN1Ym1pdHRpbmcsIHNldFN0YXR1cyB9KSA9PlxuICAgICAgICBjaGFuZ2VQYXNzd29yZE11dGF0aW9uKHsgdmFyaWFibGVzOiB7IGlucHV0OiB2YWx1ZXMgfSwgLi4uKG11dGF0aW9uT3B0aW9ucyB8fCB7fSkgfSlcbiAgICAgICAgICAudGhlbigoeyBkYXRhIH0pID0+IHtcbiAgICAgICAgICAgIGlmIChpc01vdW50ZWQuY3VycmVudCkge1xuICAgICAgICAgICAgICBzZXRTdWJtaXR0aW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgc2V0U3RhdHVzKHsgZGF0YSB9KTtcbiAgICAgICAgICAgICAgcmV0dXJuIG9uU3VjY2VzcyAmJiBvblN1Y2Nlc3MoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IGdldFVzZXJFcnJvcihlKTtcbiAgICAgICAgICAgIGlmIChlcnJvci5sZW5ndGggJiYgaXNNb3VudGVkLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgc2V0U3RhdHVzKHsgZXJyb3IgfSk7XG4gICAgICAgICAgICAgIHNldFN1Ym1pdHRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICB9XG4gICAgICB7Li4uZm9ybWlrUHJvcHN9XG4gICAgLz5cbiAgKTtcbn07XG4iXX0=