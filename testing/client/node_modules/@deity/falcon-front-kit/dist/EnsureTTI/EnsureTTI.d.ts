import React from 'react';
import PropTypes from 'prop-types';
declare type EnsureTTIState = {
    isReady: boolean;
    setTimeoutHandlerId?: any;
    requestIdleHandlerId?: any;
};
export declare type EnsureTTIRenderProps = {
    isReady: boolean;
    forceReady: () => void;
};
export declare type EnsureTTIProps = {
    /** Default timeout is `6000`ms and based on the assumption how the Lighthouse measures time to interactive to improve perceived performance
     * @see https://developers.google.com/web/updates/2018/05/first-input-delay
     */
    timeout?: number;
    forceReady?: boolean;
    children: (props: EnsureTTIRenderProps) => React.ReactNode;
};
/**
 * TTI measures the time from Navigation Start until the page's resources are loaded and the main thread is idle for at least 5 seconds
 */
export declare class EnsureTTI extends React.Component<EnsureTTIProps, EnsureTTIState> {
    static propTypes: {
        timeout: PropTypes.Requireable<number>;
        children: PropTypes.Validator<(...args: any[]) => any>;
    };
    static defaultProps: {
        timeout: number;
    };
    constructor(props: EnsureTTIProps);
    componentDidMount(): void;
    componentDidUpdate(): void;
    componentWillUnmount(): void;
    /** Sets isReady even before `timeout` */
    forceReady: () => void;
    render(): React.ReactNode;
}
export {};
//# sourceMappingURL=EnsureTTI.d.ts.map