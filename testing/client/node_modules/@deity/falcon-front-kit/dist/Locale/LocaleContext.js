"use strict";

var _interopRequireWildcard = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports.Locale = exports.useLocale = exports.LocaleProvider = void 0;

var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));

var _FalconScope = /*#__PURE__*/require("../FalconScope");

var _dateTimeFormat = /*#__PURE__*/require("./dateTimeFormat");

var LocaleContext = /*#__PURE__*/_react.default.createContext({});

var LocaleProvider = function LocaleProvider(props) {
  var locale = props.locale,
      localeFallback = props.localeFallback,
      _props$dateTimeFormat = props.dateTimeFormatOptions,
      dateTimeFormatOptions = _props$dateTimeFormat === void 0 ? {} : _props$dateTimeFormat;
  var falconScope = (0, _FalconScope.useFalconScope)();
  var value = locale || falconScope.current.languageTag;
  var valueFallback = localeFallback || falconScope.default.languageTag;
  var dateTimeFormat = (0, _dateTimeFormat.dateTimeFormatFactory)([dateTimeFormatOptions.locale, value, valueFallback], Object.assign({}, props.dateTimeFormatOptions));
  return /*#__PURE__*/_react.default.createElement(LocaleContext.Provider, {
    value: {
      locale: value,
      localeFallback: valueFallback,
      dateTimeFormat: dateTimeFormat
    }
  }, props.children);
};

exports.LocaleProvider = LocaleProvider;

var useLocale = function useLocale() {
  return (0, _react.useContext)(LocaleContext);
};

exports.useLocale = useLocale;

var Locale = function Locale(_ref) {
  var children = _ref.children;
  return children(Object.assign({}, useLocale()));
};

exports.Locale = Locale;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Mb2NhbGUvTG9jYWxlQ29udGV4dC50c3giXSwibmFtZXMiOlsiTG9jYWxlQ29udGV4dCIsIlJlYWN0IiwiY3JlYXRlQ29udGV4dCIsIkxvY2FsZVByb3ZpZGVyIiwicHJvcHMiLCJsb2NhbGUiLCJsb2NhbGVGYWxsYmFjayIsImRhdGVUaW1lRm9ybWF0T3B0aW9ucyIsImZhbGNvblNjb3BlIiwidmFsdWUiLCJjdXJyZW50IiwibGFuZ3VhZ2VUYWciLCJ2YWx1ZUZhbGxiYWNrIiwiZGVmYXVsdCIsImRhdGVUaW1lRm9ybWF0IiwiY2hpbGRyZW4iLCJ1c2VMb2NhbGUiLCJMb2NhbGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFPQSxJQUFNQSxhQUFhLGdCQUFHQyxlQUFNQyxhQUFOLENBQXVDLEVBQXZDLENBQXRCOztBQU9PLElBQU1DLGNBQTZDLEdBQUcsU0FBaERBLGNBQWdELENBQUFDLEtBQUssRUFBSTtBQUNwRSxNQUFRQyxNQUFSLEdBQStERCxLQUEvRCxDQUFRQyxNQUFSO0FBQUEsTUFBZ0JDLGNBQWhCLEdBQStERixLQUEvRCxDQUFnQkUsY0FBaEI7QUFBQSw4QkFBK0RGLEtBQS9ELENBQWdDRyxxQkFBaEM7QUFBQSxNQUFnQ0EscUJBQWhDLHNDQUF3RCxFQUF4RDtBQUVBLE1BQU1DLFdBQVcsR0FBRyxrQ0FBcEI7QUFFQSxNQUFNQyxLQUFLLEdBQUdKLE1BQU0sSUFBSUcsV0FBVyxDQUFDRSxPQUFaLENBQW9CQyxXQUE1QztBQUNBLE1BQU1DLGFBQWEsR0FBR04sY0FBYyxJQUFJRSxXQUFXLENBQUNLLE9BQVosQ0FBb0JGLFdBQTVEO0FBQ0EsTUFBTUcsY0FBYyxHQUFHLDJDQUFzQixDQUFDUCxxQkFBcUIsQ0FBQ0YsTUFBdkIsRUFBK0JJLEtBQS9CLEVBQXNDRyxhQUF0QyxDQUF0QixvQkFDbEJSLEtBQUssQ0FBQ0cscUJBRFksRUFBdkI7QUFJQSxzQkFDRSw2QkFBQyxhQUFELENBQWUsUUFBZjtBQUF3QixJQUFBLEtBQUssRUFBRTtBQUFFRixNQUFBQSxNQUFNLEVBQUVJLEtBQVY7QUFBaUJILE1BQUFBLGNBQWMsRUFBRU0sYUFBakM7QUFBZ0RFLE1BQUFBLGNBQWMsRUFBZEE7QUFBaEQ7QUFBL0IsS0FDR1YsS0FBSyxDQUFDVyxRQURULENBREY7QUFLRCxDQWhCTTs7OztBQWtCQSxJQUFNQyxTQUFTLEdBQUcsU0FBWkEsU0FBWTtBQUFBLFNBQXlCLHVCQUFXaEIsYUFBWCxDQUF6QjtBQUFBLENBQWxCOzs7O0FBT0EsSUFBTWlCLE1BQTZCLEdBQUcsU0FBaENBLE1BQWdDO0FBQUEsTUFBR0YsUUFBSCxRQUFHQSxRQUFIO0FBQUEsU0FBa0JBLFFBQVEsbUJBQU1DLFNBQVMsRUFBZixFQUExQjtBQUFBLENBQXRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VGYWxjb25TY29wZSB9IGZyb20gJy4uL0ZhbGNvblNjb3BlJztcbmltcG9ydCB7IGRhdGVUaW1lRm9ybWF0RmFjdG9yeSwgRGF0ZVRpbWVGb3JtYXRPcHRpb25zIH0gZnJvbSAnLi9kYXRlVGltZUZvcm1hdCc7XG5cbmV4cG9ydCB0eXBlIExvY2FsZUNvbnRleHRUeXBlID0ge1xuICBsb2NhbGU6IHN0cmluZztcbiAgbG9jYWxlRmFsbGJhY2s6IHN0cmluZztcbiAgZGF0ZVRpbWVGb3JtYXQ6IFJldHVyblR5cGU8dHlwZW9mIGRhdGVUaW1lRm9ybWF0RmFjdG9yeT47XG59O1xuY29uc3QgTG9jYWxlQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8TG9jYWxlQ29udGV4dFR5cGU+KHt9IGFzIGFueSk7XG5cbmV4cG9ydCB0eXBlIExvY2FsZVByb3ZpZGVyUHJvcHMgPSB7XG4gIGRhdGVUaW1lRm9ybWF0T3B0aW9ucz86IERhdGVUaW1lRm9ybWF0T3B0aW9ucztcbiAgbG9jYWxlPzogTG9jYWxlQ29udGV4dFR5cGVbJ2xvY2FsZSddO1xuICBsb2NhbGVGYWxsYmFjaz86IExvY2FsZUNvbnRleHRUeXBlWydsb2NhbGVGYWxsYmFjayddO1xufTtcbmV4cG9ydCBjb25zdCBMb2NhbGVQcm92aWRlcjogUmVhY3QuRkM8TG9jYWxlUHJvdmlkZXJQcm9wcz4gPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHsgbG9jYWxlLCBsb2NhbGVGYWxsYmFjaywgZGF0ZVRpbWVGb3JtYXRPcHRpb25zID0ge30gfSA9IHByb3BzO1xuXG4gIGNvbnN0IGZhbGNvblNjb3BlID0gdXNlRmFsY29uU2NvcGUoKTtcblxuICBjb25zdCB2YWx1ZSA9IGxvY2FsZSB8fCBmYWxjb25TY29wZS5jdXJyZW50Lmxhbmd1YWdlVGFnO1xuICBjb25zdCB2YWx1ZUZhbGxiYWNrID0gbG9jYWxlRmFsbGJhY2sgfHwgZmFsY29uU2NvcGUuZGVmYXVsdC5sYW5ndWFnZVRhZztcbiAgY29uc3QgZGF0ZVRpbWVGb3JtYXQgPSBkYXRlVGltZUZvcm1hdEZhY3RvcnkoW2RhdGVUaW1lRm9ybWF0T3B0aW9ucy5sb2NhbGUsIHZhbHVlLCB2YWx1ZUZhbGxiYWNrXSwge1xuICAgIC4uLnByb3BzLmRhdGVUaW1lRm9ybWF0T3B0aW9uc1xuICB9KTtcblxuICByZXR1cm4gKFxuICAgIDxMb2NhbGVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7IGxvY2FsZTogdmFsdWUsIGxvY2FsZUZhbGxiYWNrOiB2YWx1ZUZhbGxiYWNrLCBkYXRlVGltZUZvcm1hdCB9fT5cbiAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICA8L0xvY2FsZUNvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlTG9jYWxlID0gKCk6IExvY2FsZUNvbnRleHRUeXBlID0+IHVzZUNvbnRleHQoTG9jYWxlQ29udGV4dCk7XG5cbmV4cG9ydCB0eXBlIExvY2FsZVJlbmRlclByb3BzID0gTG9jYWxlQ29udGV4dFR5cGU7XG5leHBvcnQgdHlwZSBMb2NhbGVQcm9wcyA9IHtcbiAgY2hpbGRyZW46IChwcm9wczogTG9jYWxlUmVuZGVyUHJvcHMpID0+IGFueTtcbn07XG5cbmV4cG9ydCBjb25zdCBMb2NhbGU6IFJlYWN0LkZDPExvY2FsZVByb3BzPiA9ICh7IGNoaWxkcmVuIH0pID0+IGNoaWxkcmVuKHsgLi4udXNlTG9jYWxlKCkgfSk7XG4iXX0=