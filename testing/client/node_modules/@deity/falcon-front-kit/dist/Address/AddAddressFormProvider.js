"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.AddAddressFormProvider = void 0;

var _extends2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _formik = /*#__PURE__*/require("formik");

var _falconData = /*#__PURE__*/require("@deity/falcon-data");

var _falconShopData = /*#__PURE__*/require("@deity/falcon-shop-data");

var _React = /*#__PURE__*/require("../React");

var AddAddressFormProvider = function AddAddressFormProvider(props) {
  var onSuccess = props.onSuccess,
      initialValues = props.initialValues,
      mutationOptions = props.mutationOptions,
      formikProps = (0, _objectWithoutPropertiesLoose2.default)(props, ["onSuccess", "initialValues", "mutationOptions"]);
  var defaultInitialValues = {
    firstname: '',
    lastname: '',
    street1: '',
    street2: '',
    postcode: '',
    city: '',
    country: undefined,
    region: undefined,
    company: '',
    telephone: '',
    defaultBilling: false,
    defaultShipping: false
  };

  var _useAddAddressMutatio = (0, _falconShopData.useAddAddressMutation)(),
      addAddress = _useAddAddressMutatio[0];

  var getUserError = (0, _falconData.useGetUserError)();
  var isMounted = (0, _React.useMounted)();
  return /*#__PURE__*/_react.default.createElement(_formik.Formik, (0, _extends2.default)({
    initialStatus: {},
    initialValues: initialValues || defaultInitialValues,
    onSubmit: function onSubmit(_ref, _ref2) {
      var setSubmitting = _ref2.setSubmitting,
          setStatus = _ref2.setStatus;
      var street1 = _ref.street1,
          street2 = _ref.street2,
          country = _ref.country,
          region = _ref.region,
          values = (0, _objectWithoutPropertiesLoose2.default)(_ref, ["street1", "street2", "country", "region"]);
      return addAddress(Object.assign({
        variables: {
          input: Object.assign({}, values, {
            street: [street1, street2].filter(Boolean),
            countryId: country.id,
            regionId: region ? region.id : undefined
          })
        }
      }, mutationOptions || {})).then(function (_ref3) {
        var data = _ref3.data;

        if (isMounted.current) {
          setSubmitting(false);
          setStatus({
            data: data
          });
          return onSuccess && onSuccess(data);
        }
      }).catch(function (e) {
        var error = getUserError(e);

        if (error.length && isMounted.current) {
          setStatus({
            error: error
          });
          setSubmitting(false);
        }
      });
    }
  }, formikProps));
};

exports.AddAddressFormProvider = AddAddressFormProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BZGRyZXNzL0FkZEFkZHJlc3NGb3JtUHJvdmlkZXIudHN4Il0sIm5hbWVzIjpbIkFkZEFkZHJlc3NGb3JtUHJvdmlkZXIiLCJwcm9wcyIsIm9uU3VjY2VzcyIsImluaXRpYWxWYWx1ZXMiLCJtdXRhdGlvbk9wdGlvbnMiLCJmb3JtaWtQcm9wcyIsImRlZmF1bHRJbml0aWFsVmFsdWVzIiwiZmlyc3RuYW1lIiwibGFzdG5hbWUiLCJzdHJlZXQxIiwic3RyZWV0MiIsInBvc3Rjb2RlIiwiY2l0eSIsImNvdW50cnkiLCJ1bmRlZmluZWQiLCJyZWdpb24iLCJjb21wYW55IiwidGVsZXBob25lIiwiZGVmYXVsdEJpbGxpbmciLCJkZWZhdWx0U2hpcHBpbmciLCJhZGRBZGRyZXNzIiwiZ2V0VXNlckVycm9yIiwiaXNNb3VudGVkIiwic2V0U3VibWl0dGluZyIsInNldFN0YXR1cyIsInZhbHVlcyIsInZhcmlhYmxlcyIsImlucHV0Iiwic3RyZWV0IiwiZmlsdGVyIiwiQm9vbGVhbiIsImNvdW50cnlJZCIsImlkIiwicmVnaW9uSWQiLCJ0aGVuIiwiZGF0YSIsImN1cnJlbnQiLCJjYXRjaCIsImUiLCJlcnJvciIsImxlbmd0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFFQTs7QUFrQk8sSUFBTUEsc0JBQThELEdBQUcsU0FBakVBLHNCQUFpRSxDQUFBQyxLQUFLLEVBQUk7QUFDckYsTUFBUUMsU0FBUixHQUFzRUQsS0FBdEUsQ0FBUUMsU0FBUjtBQUFBLE1BQW1CQyxhQUFuQixHQUFzRUYsS0FBdEUsQ0FBbUJFLGFBQW5CO0FBQUEsTUFBa0NDLGVBQWxDLEdBQXNFSCxLQUF0RSxDQUFrQ0csZUFBbEM7QUFBQSxNQUFzREMsV0FBdEQsK0NBQXNFSixLQUF0RTtBQUNBLE1BQU1LLG9CQUFvQixHQUFHO0FBQzNCQyxJQUFBQSxTQUFTLEVBQUUsRUFEZ0I7QUFFM0JDLElBQUFBLFFBQVEsRUFBRSxFQUZpQjtBQUczQkMsSUFBQUEsT0FBTyxFQUFFLEVBSGtCO0FBSTNCQyxJQUFBQSxPQUFPLEVBQUUsRUFKa0I7QUFLM0JDLElBQUFBLFFBQVEsRUFBRSxFQUxpQjtBQU0zQkMsSUFBQUEsSUFBSSxFQUFFLEVBTnFCO0FBTzNCQyxJQUFBQSxPQUFPLEVBQUVDLFNBUGtCO0FBUTNCQyxJQUFBQSxNQUFNLEVBQUVELFNBUm1CO0FBUzNCRSxJQUFBQSxPQUFPLEVBQUUsRUFUa0I7QUFVM0JDLElBQUFBLFNBQVMsRUFBRSxFQVZnQjtBQVczQkMsSUFBQUEsY0FBYyxFQUFFLEtBWFc7QUFZM0JDLElBQUFBLGVBQWUsRUFBRTtBQVpVLEdBQTdCOztBQWVBLDhCQUFxQiw0Q0FBckI7QUFBQSxNQUFPQyxVQUFQOztBQUNBLE1BQU1DLFlBQVksR0FBRyxrQ0FBckI7QUFDQSxNQUFNQyxTQUFTLEdBQUcsd0JBQWxCO0FBRUEsc0JBQ0UsNkJBQUMsY0FBRDtBQUNFLElBQUEsYUFBYSxFQUFFLEVBRGpCO0FBRUUsSUFBQSxhQUFhLEVBQUVuQixhQUFhLElBQUlHLG9CQUZsQztBQUdFLElBQUEsUUFBUSxFQUFFO0FBQUEsVUFBcURpQixhQUFyRCxTQUFxREEsYUFBckQ7QUFBQSxVQUFvRUMsU0FBcEUsU0FBb0VBLFNBQXBFO0FBQUEsVUFBR2YsT0FBSCxRQUFHQSxPQUFIO0FBQUEsVUFBWUMsT0FBWixRQUFZQSxPQUFaO0FBQUEsVUFBcUJHLE9BQXJCLFFBQXFCQSxPQUFyQjtBQUFBLFVBQThCRSxNQUE5QixRQUE4QkEsTUFBOUI7QUFBQSxVQUF5Q1UsTUFBekM7QUFBQSxhQUNSTCxVQUFVO0FBQ1JNLFFBQUFBLFNBQVMsRUFBRTtBQUNUQyxVQUFBQSxLQUFLLG9CQUNBRixNQURBO0FBRUhHLFlBQUFBLE1BQU0sRUFBRSxDQUFDbkIsT0FBRCxFQUFVQyxPQUFWLEVBQW1CbUIsTUFBbkIsQ0FBMEJDLE9BQTFCLENBRkw7QUFHSEMsWUFBQUEsU0FBUyxFQUFFbEIsT0FBTyxDQUFDbUIsRUFIaEI7QUFJSEMsWUFBQUEsUUFBUSxFQUFFbEIsTUFBTSxHQUFHQSxNQUFNLENBQUNpQixFQUFWLEdBQWVsQjtBQUo1QjtBQURJO0FBREgsU0FTSlYsZUFBZSxJQUFJLEVBVGYsRUFBVixDQVdHOEIsSUFYSCxDQVdRLGlCQUFjO0FBQUEsWUFBWEMsSUFBVyxTQUFYQSxJQUFXOztBQUNsQixZQUFJYixTQUFTLENBQUNjLE9BQWQsRUFBdUI7QUFDckJiLFVBQUFBLGFBQWEsQ0FBQyxLQUFELENBQWI7QUFDQUMsVUFBQUEsU0FBUyxDQUFDO0FBQUVXLFlBQUFBLElBQUksRUFBSkE7QUFBRixXQUFELENBQVQ7QUFDQSxpQkFBT2pDLFNBQVMsSUFBSUEsU0FBUyxDQUFDaUMsSUFBRCxDQUE3QjtBQUNEO0FBQ0YsT0FqQkgsRUFrQkdFLEtBbEJILENBa0JTLFVBQUFDLENBQUMsRUFBSTtBQUNWLFlBQU1DLEtBQUssR0FBR2xCLFlBQVksQ0FBQ2lCLENBQUQsQ0FBMUI7O0FBQ0EsWUFBSUMsS0FBSyxDQUFDQyxNQUFOLElBQWdCbEIsU0FBUyxDQUFDYyxPQUE5QixFQUF1QztBQUNyQ1osVUFBQUEsU0FBUyxDQUFDO0FBQUVlLFlBQUFBLEtBQUssRUFBTEE7QUFBRixXQUFELENBQVQ7QUFDQWhCLFVBQUFBLGFBQWEsQ0FBQyxLQUFELENBQWI7QUFDRDtBQUNGLE9BeEJILENBRFE7QUFBQTtBQUhaLEtBOEJNbEIsV0E5Qk4sRUFERjtBQWtDRCxDQXZETSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBGb3JtaWsgfSBmcm9tICdmb3JtaWsnO1xuaW1wb3J0IHsgQ291bnRyeSwgUmVnaW9uIH0gZnJvbSAnQGRlaXR5L2ZhbGNvbi1zaG9wLWV4dGVuc2lvbic7XG5pbXBvcnQgeyB1c2VHZXRVc2VyRXJyb3IgfSBmcm9tICdAZGVpdHkvZmFsY29uLWRhdGEnO1xuaW1wb3J0IHsgdXNlQWRkQWRkcmVzc011dGF0aW9uLCBBZGRBZGRyZXNzUmVzcG9uc2UgfSBmcm9tICdAZGVpdHkvZmFsY29uLXNob3AtZGF0YSc7XG5pbXBvcnQgeyBGb3JtUHJvdmlkZXJQcm9wcyB9IGZyb20gJy4uL0Zvcm1zJztcbmltcG9ydCB7IHVzZU1vdW50ZWQgfSBmcm9tICcuLi9SZWFjdCc7XG5cbmV4cG9ydCB0eXBlIEFkZEFkZHJlc3NGb3JtVmFsdWVzID0ge1xuICBmaXJzdG5hbWU6IHN0cmluZztcbiAgbGFzdG5hbWU6IHN0cmluZztcbiAgc3RyZWV0MT86IHN0cmluZztcbiAgc3RyZWV0Mj86IHN0cmluZztcbiAgcG9zdGNvZGU6IHN0cmluZztcbiAgY2l0eTogc3RyaW5nO1xuICBjb3VudHJ5OiBDb3VudHJ5O1xuICByZWdpb24/OiBSZWdpb247XG4gIGNvbXBhbnk/OiBzdHJpbmc7XG4gIHRlbGVwaG9uZT86IHN0cmluZztcbiAgZGVmYXVsdEJpbGxpbmc/OiBib29sZWFuO1xuICBkZWZhdWx0U2hpcHBpbmc/OiBib29sZWFuO1xufTtcblxuZXhwb3J0IHR5cGUgQWRkQWRkcmVzc0Zvcm1Qcm92aWRlclByb3BzID0gRm9ybVByb3ZpZGVyUHJvcHM8QWRkQWRkcmVzc0Zvcm1WYWx1ZXMsIEFkZEFkZHJlc3NSZXNwb25zZT47XG5leHBvcnQgY29uc3QgQWRkQWRkcmVzc0Zvcm1Qcm92aWRlcjogUmVhY3QuU0ZDPEFkZEFkZHJlc3NGb3JtUHJvdmlkZXJQcm9wcz4gPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHsgb25TdWNjZXNzLCBpbml0aWFsVmFsdWVzLCBtdXRhdGlvbk9wdGlvbnMsIC4uLmZvcm1pa1Byb3BzIH0gPSBwcm9wcztcbiAgY29uc3QgZGVmYXVsdEluaXRpYWxWYWx1ZXMgPSB7XG4gICAgZmlyc3RuYW1lOiAnJyxcbiAgICBsYXN0bmFtZTogJycsXG4gICAgc3RyZWV0MTogJycsXG4gICAgc3RyZWV0MjogJycsXG4gICAgcG9zdGNvZGU6ICcnLFxuICAgIGNpdHk6ICcnLFxuICAgIGNvdW50cnk6IHVuZGVmaW5lZCxcbiAgICByZWdpb246IHVuZGVmaW5lZCxcbiAgICBjb21wYW55OiAnJyxcbiAgICB0ZWxlcGhvbmU6ICcnLFxuICAgIGRlZmF1bHRCaWxsaW5nOiBmYWxzZSxcbiAgICBkZWZhdWx0U2hpcHBpbmc6IGZhbHNlXG4gIH07XG5cbiAgY29uc3QgW2FkZEFkZHJlc3NdID0gdXNlQWRkQWRkcmVzc011dGF0aW9uKCk7XG4gIGNvbnN0IGdldFVzZXJFcnJvciA9IHVzZUdldFVzZXJFcnJvcigpO1xuICBjb25zdCBpc01vdW50ZWQgPSB1c2VNb3VudGVkKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8Rm9ybWlrXG4gICAgICBpbml0aWFsU3RhdHVzPXt7fX1cbiAgICAgIGluaXRpYWxWYWx1ZXM9e2luaXRpYWxWYWx1ZXMgfHwgZGVmYXVsdEluaXRpYWxWYWx1ZXN9XG4gICAgICBvblN1Ym1pdD17KHsgc3RyZWV0MSwgc3RyZWV0MiwgY291bnRyeSwgcmVnaW9uLCAuLi52YWx1ZXMgfSwgeyBzZXRTdWJtaXR0aW5nLCBzZXRTdGF0dXMgfSkgPT5cbiAgICAgICAgYWRkQWRkcmVzcyh7XG4gICAgICAgICAgdmFyaWFibGVzOiB7XG4gICAgICAgICAgICBpbnB1dDoge1xuICAgICAgICAgICAgICAuLi52YWx1ZXMsXG4gICAgICAgICAgICAgIHN0cmVldDogW3N0cmVldDEsIHN0cmVldDJdLmZpbHRlcihCb29sZWFuKSxcbiAgICAgICAgICAgICAgY291bnRyeUlkOiBjb3VudHJ5LmlkLFxuICAgICAgICAgICAgICByZWdpb25JZDogcmVnaW9uID8gcmVnaW9uLmlkIDogdW5kZWZpbmVkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICAuLi4obXV0YXRpb25PcHRpb25zIHx8IHt9KVxuICAgICAgICB9KVxuICAgICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4ge1xuICAgICAgICAgICAgaWYgKGlzTW91bnRlZC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgIHNldFN1Ym1pdHRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgICBzZXRTdGF0dXMoeyBkYXRhIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gb25TdWNjZXNzICYmIG9uU3VjY2VzcyhkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gZ2V0VXNlckVycm9yKGUpO1xuICAgICAgICAgICAgaWYgKGVycm9yLmxlbmd0aCAmJiBpc01vdW50ZWQuY3VycmVudCkge1xuICAgICAgICAgICAgICBzZXRTdGF0dXMoeyBlcnJvciB9KTtcbiAgICAgICAgICAgICAgc2V0U3VibWl0dGluZyhmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIHsuLi5mb3JtaWtQcm9wc31cbiAgICAvPlxuICApO1xufTtcbiJdfQ==