"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.EditAddressFormProvider = void 0;

var _extends2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _formik = /*#__PURE__*/require("formik");

var _falconData = /*#__PURE__*/require("@deity/falcon-data");

var _falconShopData = /*#__PURE__*/require("@deity/falcon-shop-data");

var _React = /*#__PURE__*/require("../React");

var EditAddressFormProvider = function EditAddressFormProvider(props) {
  var address = props.address,
      onSuccess = props.onSuccess,
      initialValues = props.initialValues,
      mutationOptions = props.mutationOptions,
      formikProps = (0, _objectWithoutPropertiesLoose2.default)(props, ["address", "onSuccess", "initialValues", "mutationOptions"]);
  var __typename = address.__typename,
      street = address.street,
      rest = (0, _objectWithoutPropertiesLoose2.default)(address, ["__typename", "street"]);
  var defaultInitialValues = Object.assign({
    street1: street.length > 0 ? street[0] : undefined,
    street2: street.length > 1 ? street[1] : undefined
  }, rest);

  var _useEditAddressMutati = (0, _falconShopData.useEditAddressMutation)(),
      editAddress = _useEditAddressMutati[0];

  var getUserError = (0, _falconData.useGetUserError)();
  var isMounted = (0, _React.useMounted)();
  return /*#__PURE__*/_react.default.createElement(_formik.Formik, (0, _extends2.default)({
    initialStatus: {},
    initialValues: initialValues || defaultInitialValues,
    onSubmit: function onSubmit(_ref, _ref2) {
      var setSubmitting = _ref2.setSubmitting,
          setStatus = _ref2.setStatus;
      var street1 = _ref.street1,
          street2 = _ref.street2,
          country = _ref.country,
          region = _ref.region,
          values = (0, _objectWithoutPropertiesLoose2.default)(_ref, ["street1", "street2", "country", "region"]);
      return editAddress(Object.assign({
        variables: {
          input: Object.assign({}, values, {
            id: address.id,
            street: [street1, street2].filter(Boolean),
            countryId: country.id,
            regionId: region ? region.id : undefined
          })
        }
      }, mutationOptions || {})).then(function (_ref3) {
        var data = _ref3.data;

        if (isMounted.current) {
          setSubmitting(false);
          setStatus({
            data: data
          });
          return onSuccess && onSuccess(data);
        }
      }).catch(function (e) {
        var error = getUserError(e);

        if (error.length && isMounted.current) {
          setStatus({
            error: error
          });
          setSubmitting(false);
        }
      });
    }
  }, formikProps));
};

exports.EditAddressFormProvider = EditAddressFormProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BZGRyZXNzL0VkaXRBZGRyZXNzRm9ybVByb3ZpZGVyLnRzeCJdLCJuYW1lcyI6WyJFZGl0QWRkcmVzc0Zvcm1Qcm92aWRlciIsInByb3BzIiwiYWRkcmVzcyIsIm9uU3VjY2VzcyIsImluaXRpYWxWYWx1ZXMiLCJtdXRhdGlvbk9wdGlvbnMiLCJmb3JtaWtQcm9wcyIsIl9fdHlwZW5hbWUiLCJzdHJlZXQiLCJyZXN0IiwiZGVmYXVsdEluaXRpYWxWYWx1ZXMiLCJzdHJlZXQxIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwic3RyZWV0MiIsImVkaXRBZGRyZXNzIiwiZ2V0VXNlckVycm9yIiwiaXNNb3VudGVkIiwic2V0U3VibWl0dGluZyIsInNldFN0YXR1cyIsImNvdW50cnkiLCJyZWdpb24iLCJ2YWx1ZXMiLCJ2YXJpYWJsZXMiLCJpbnB1dCIsImlkIiwiZmlsdGVyIiwiQm9vbGVhbiIsImNvdW50cnlJZCIsInJlZ2lvbklkIiwidGhlbiIsImRhdGEiLCJjdXJyZW50IiwiY2F0Y2giLCJlIiwiZXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBRUE7O0FBb0JPLElBQU1BLHVCQUFnRSxHQUFHLFNBQW5FQSx1QkFBbUUsQ0FBQUMsS0FBSyxFQUFJO0FBQ3ZGLE1BQVFDLE9BQVIsR0FBK0VELEtBQS9FLENBQVFDLE9BQVI7QUFBQSxNQUFpQkMsU0FBakIsR0FBK0VGLEtBQS9FLENBQWlCRSxTQUFqQjtBQUFBLE1BQTRCQyxhQUE1QixHQUErRUgsS0FBL0UsQ0FBNEJHLGFBQTVCO0FBQUEsTUFBMkNDLGVBQTNDLEdBQStFSixLQUEvRSxDQUEyQ0ksZUFBM0M7QUFBQSxNQUErREMsV0FBL0QsK0NBQStFTCxLQUEvRTtBQUNBLE1BQVFNLFVBQVIsR0FBd0NMLE9BQXhDLENBQVFLLFVBQVI7QUFBQSxNQUFvQkMsTUFBcEIsR0FBd0NOLE9BQXhDLENBQW9CTSxNQUFwQjtBQUFBLE1BQStCQyxJQUEvQiwrQ0FBd0NQLE9BQXhDO0FBQ0EsTUFBTVEsb0JBQW9CO0FBQ3hCQyxJQUFBQSxPQUFPLEVBQUVILE1BQU0sQ0FBQ0ksTUFBUCxHQUFnQixDQUFoQixHQUFvQkosTUFBTSxDQUFDLENBQUQsQ0FBMUIsR0FBZ0NLLFNBRGpCO0FBRXhCQyxJQUFBQSxPQUFPLEVBQUVOLE1BQU0sQ0FBQ0ksTUFBUCxHQUFnQixDQUFoQixHQUFvQkosTUFBTSxDQUFDLENBQUQsQ0FBMUIsR0FBZ0NLO0FBRmpCLEtBR3JCSixJQUhxQixDQUExQjs7QUFNQSw4QkFBc0IsNkNBQXRCO0FBQUEsTUFBT00sV0FBUDs7QUFDQSxNQUFNQyxZQUFZLEdBQUcsa0NBQXJCO0FBQ0EsTUFBTUMsU0FBUyxHQUFHLHdCQUFsQjtBQUVBLHNCQUNFLDZCQUFDLGNBQUQ7QUFDRSxJQUFBLGFBQWEsRUFBRSxFQURqQjtBQUVFLElBQUEsYUFBYSxFQUFFYixhQUFhLElBQUlNLG9CQUZsQztBQUdFLElBQUEsUUFBUSxFQUFFO0FBQUEsVUFBcURRLGFBQXJELFNBQXFEQSxhQUFyRDtBQUFBLFVBQW9FQyxTQUFwRSxTQUFvRUEsU0FBcEU7QUFBQSxVQUFHUixPQUFILFFBQUdBLE9BQUg7QUFBQSxVQUFZRyxPQUFaLFFBQVlBLE9BQVo7QUFBQSxVQUFxQk0sT0FBckIsUUFBcUJBLE9BQXJCO0FBQUEsVUFBOEJDLE1BQTlCLFFBQThCQSxNQUE5QjtBQUFBLFVBQXlDQyxNQUF6QztBQUFBLGFBQ1JQLFdBQVc7QUFDVFEsUUFBQUEsU0FBUyxFQUFFO0FBQ1RDLFVBQUFBLEtBQUssb0JBQ0FGLE1BREE7QUFFSEcsWUFBQUEsRUFBRSxFQUFFdkIsT0FBTyxDQUFDdUIsRUFGVDtBQUdIakIsWUFBQUEsTUFBTSxFQUFFLENBQUNHLE9BQUQsRUFBVUcsT0FBVixFQUFtQlksTUFBbkIsQ0FBMEJDLE9BQTFCLENBSEw7QUFJSEMsWUFBQUEsU0FBUyxFQUFFUixPQUFPLENBQUNLLEVBSmhCO0FBS0hJLFlBQUFBLFFBQVEsRUFBRVIsTUFBTSxHQUFHQSxNQUFNLENBQUNJLEVBQVYsR0FBZVo7QUFMNUI7QUFESTtBQURGLFNBVUxSLGVBQWUsSUFBSSxFQVZkLEVBQVgsQ0FZR3lCLElBWkgsQ0FZUSxpQkFBYztBQUFBLFlBQVhDLElBQVcsU0FBWEEsSUFBVzs7QUFDbEIsWUFBSWQsU0FBUyxDQUFDZSxPQUFkLEVBQXVCO0FBQ3JCZCxVQUFBQSxhQUFhLENBQUMsS0FBRCxDQUFiO0FBQ0FDLFVBQUFBLFNBQVMsQ0FBQztBQUFFWSxZQUFBQSxJQUFJLEVBQUpBO0FBQUYsV0FBRCxDQUFUO0FBQ0EsaUJBQU81QixTQUFTLElBQUlBLFNBQVMsQ0FBQzRCLElBQUQsQ0FBN0I7QUFDRDtBQUNGLE9BbEJILEVBbUJHRSxLQW5CSCxDQW1CUyxVQUFBQyxDQUFDLEVBQUk7QUFDVixZQUFNQyxLQUFLLEdBQUduQixZQUFZLENBQUNrQixDQUFELENBQTFCOztBQUNBLFlBQUlDLEtBQUssQ0FBQ3ZCLE1BQU4sSUFBZ0JLLFNBQVMsQ0FBQ2UsT0FBOUIsRUFBdUM7QUFDckNiLFVBQUFBLFNBQVMsQ0FBQztBQUFFZ0IsWUFBQUEsS0FBSyxFQUFMQTtBQUFGLFdBQUQsQ0FBVDtBQUNBakIsVUFBQUEsYUFBYSxDQUFDLEtBQUQsQ0FBYjtBQUNEO0FBQ0YsT0F6QkgsQ0FEUTtBQUFBO0FBSFosS0ErQk1aLFdBL0JOLEVBREY7QUFtQ0QsQ0FoRE0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRm9ybWlrIH0gZnJvbSAnZm9ybWlrJztcbmltcG9ydCB7IEFkZHJlc3MsIENvdW50cnksIFJlZ2lvbiB9IGZyb20gJ0BkZWl0eS9mYWxjb24tc2hvcC1leHRlbnNpb24nO1xuaW1wb3J0IHsgdXNlR2V0VXNlckVycm9yIH0gZnJvbSAnQGRlaXR5L2ZhbGNvbi1kYXRhJztcbmltcG9ydCB7IHVzZUVkaXRBZGRyZXNzTXV0YXRpb24sIEVkaXRBZGRyZXNzUmVzcG9uc2UgfSBmcm9tICdAZGVpdHkvZmFsY29uLXNob3AtZGF0YSc7XG5pbXBvcnQgeyBGb3JtUHJvdmlkZXJQcm9wcyB9IGZyb20gJy4uL0Zvcm1zJztcbmltcG9ydCB7IHVzZU1vdW50ZWQgfSBmcm9tICcuLi9SZWFjdCc7XG5cbmV4cG9ydCB0eXBlIEVkaXRBZGRyZXNzRm9ybVZhbHVlcyA9IHtcbiAgZmlyc3RuYW1lOiBzdHJpbmc7XG4gIGxhc3RuYW1lOiBzdHJpbmc7XG4gIHN0cmVldDE/OiBzdHJpbmc7XG4gIHN0cmVldDI/OiBzdHJpbmc7XG4gIHBvc3Rjb2RlOiBzdHJpbmc7XG4gIGNpdHk6IHN0cmluZztcbiAgY291bnRyeTogQ291bnRyeTtcbiAgcmVnaW9uPzogUmVnaW9uO1xuICBjb21wYW55Pzogc3RyaW5nO1xuICB0ZWxlcGhvbmU/OiBzdHJpbmc7XG4gIGRlZmF1bHRCaWxsaW5nPzogYm9vbGVhbjtcbiAgZGVmYXVsdFNoaXBwaW5nPzogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCB0eXBlIEVkaXRBZGRyZXNzRm9ybVByb3ZpZGVyUHJvcHMgPSBGb3JtUHJvdmlkZXJQcm9wczxFZGl0QWRkcmVzc0Zvcm1WYWx1ZXMsIEVkaXRBZGRyZXNzUmVzcG9uc2U+ICYge1xuICBhZGRyZXNzOiBBZGRyZXNzO1xufTtcbmV4cG9ydCBjb25zdCBFZGl0QWRkcmVzc0Zvcm1Qcm92aWRlcjogUmVhY3QuU0ZDPEVkaXRBZGRyZXNzRm9ybVByb3ZpZGVyUHJvcHM+ID0gcHJvcHMgPT4ge1xuICBjb25zdCB7IGFkZHJlc3MsIG9uU3VjY2VzcywgaW5pdGlhbFZhbHVlcywgbXV0YXRpb25PcHRpb25zLCAuLi5mb3JtaWtQcm9wcyB9ID0gcHJvcHM7XG4gIGNvbnN0IHsgX190eXBlbmFtZSwgc3RyZWV0LCAuLi5yZXN0IH0gPSBhZGRyZXNzO1xuICBjb25zdCBkZWZhdWx0SW5pdGlhbFZhbHVlcyA9IHtcbiAgICBzdHJlZXQxOiBzdHJlZXQubGVuZ3RoID4gMCA/IHN0cmVldFswXSA6IHVuZGVmaW5lZCxcbiAgICBzdHJlZXQyOiBzdHJlZXQubGVuZ3RoID4gMSA/IHN0cmVldFsxXSA6IHVuZGVmaW5lZCxcbiAgICAuLi5yZXN0XG4gIH07XG5cbiAgY29uc3QgW2VkaXRBZGRyZXNzXSA9IHVzZUVkaXRBZGRyZXNzTXV0YXRpb24oKTtcbiAgY29uc3QgZ2V0VXNlckVycm9yID0gdXNlR2V0VXNlckVycm9yKCk7XG4gIGNvbnN0IGlzTW91bnRlZCA9IHVzZU1vdW50ZWQoKTtcblxuICByZXR1cm4gKFxuICAgIDxGb3JtaWtcbiAgICAgIGluaXRpYWxTdGF0dXM9e3t9fVxuICAgICAgaW5pdGlhbFZhbHVlcz17aW5pdGlhbFZhbHVlcyB8fCBkZWZhdWx0SW5pdGlhbFZhbHVlc31cbiAgICAgIG9uU3VibWl0PXsoeyBzdHJlZXQxLCBzdHJlZXQyLCBjb3VudHJ5LCByZWdpb24sIC4uLnZhbHVlcyB9LCB7IHNldFN1Ym1pdHRpbmcsIHNldFN0YXR1cyB9KSA9PlxuICAgICAgICBlZGl0QWRkcmVzcyh7XG4gICAgICAgICAgdmFyaWFibGVzOiB7XG4gICAgICAgICAgICBpbnB1dDoge1xuICAgICAgICAgICAgICAuLi52YWx1ZXMsXG4gICAgICAgICAgICAgIGlkOiBhZGRyZXNzLmlkLFxuICAgICAgICAgICAgICBzdHJlZXQ6IFtzdHJlZXQxLCBzdHJlZXQyXS5maWx0ZXIoQm9vbGVhbiksXG4gICAgICAgICAgICAgIGNvdW50cnlJZDogY291bnRyeS5pZCxcbiAgICAgICAgICAgICAgcmVnaW9uSWQ6IHJlZ2lvbiA/IHJlZ2lvbi5pZCA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgLi4uKG11dGF0aW9uT3B0aW9ucyB8fCB7fSlcbiAgICAgICAgfSlcbiAgICAgICAgICAudGhlbigoeyBkYXRhIH0pID0+IHtcbiAgICAgICAgICAgIGlmIChpc01vdW50ZWQuY3VycmVudCkge1xuICAgICAgICAgICAgICBzZXRTdWJtaXR0aW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgc2V0U3RhdHVzKHsgZGF0YSB9KTtcbiAgICAgICAgICAgICAgcmV0dXJuIG9uU3VjY2VzcyAmJiBvblN1Y2Nlc3MoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IGdldFVzZXJFcnJvcihlKTtcbiAgICAgICAgICAgIGlmIChlcnJvci5sZW5ndGggJiYgaXNNb3VudGVkLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgc2V0U3RhdHVzKHsgZXJyb3IgfSk7XG4gICAgICAgICAgICAgIHNldFN1Ym1pdHRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICB9XG4gICAgICB7Li4uZm9ybWlrUHJvcHN9XG4gICAgLz5cbiAgKTtcbn07XG4iXX0=