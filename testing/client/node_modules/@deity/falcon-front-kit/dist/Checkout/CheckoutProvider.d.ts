import React from 'react';
import { CheckoutValues } from './CheckoutValues';
import { CheckoutStepType } from './CheckoutStep';
import { CalculateCheckoutStep } from './calculateCheckoutStep';
export declare type OnStepChanged<TCheckoutStep extends string = CheckoutStepType> = (current: TCheckoutStep, previous: TCheckoutStep | undefined, props: {
    isForwardNavigation: boolean;
}) => void;
export declare const isObject: (value: any) => boolean;
export declare const browseAndCleanObject: (data: any, prop: string) => {};
/**
 * Strip `__typename` key from object keys
 * @param initialData
 * @returns {CheckoutValues}
 */
export declare const stripTypenames: (initialData: CheckoutValues) => CheckoutValues;
export declare type CheckoutProviderProps<TCheckoutStep extends string = CheckoutStepType> = {
    initialValues?: CheckoutValues;
    onValueChanged?: () => void;
    billingSameAsShipping?: boolean;
    step?: TCheckoutStep;
    stepsOrder?: TCheckoutStep[];
    autoStepForward?: boolean;
    onStepChanged?: OnStepChanged;
    calculateStep?: (stepsOrders: TCheckoutStep[]) => CalculateCheckoutStep<TCheckoutStep>;
};
export declare const CheckoutProvider: React.SFC<CheckoutProviderProps>;
//# sourceMappingURL=CheckoutProvider.d.ts.map