import React from 'react';
import { FieldProps as FormikFieldProps } from 'formik';
import { IValidator } from './IValidator';
export declare const getLabelI18nId: (formI18nId: string, fieldName: string) => string;
export declare const getPlaceholderI18nId: (formI18nId: string, fieldName: string) => string;
export declare type FieldRenderProps<TValue = any> = {
    form: FormikFieldProps<TValue>['form'] & {
        id?: number | string;
    };
    field: FormikFieldProps<TValue>['field'] & {
        id?: string;
        placeholder?: string;
        invalid: boolean;
    };
    label?: string;
    error?: string;
    i18nIds: {
        label?: string;
        placeholder?: string;
    };
};
export declare type FieldProps<TValue = any> = {
    id?: string;
    name: string;
    label?: string;
    placeholder?: string;
    validate?: IValidator[];
    fast?: boolean;
    children?: (props: FieldRenderProps<TValue>) => React.ReactNode;
};
export declare const Field: React.SFC<FieldProps>;
//# sourceMappingURL=Field.d.ts.map