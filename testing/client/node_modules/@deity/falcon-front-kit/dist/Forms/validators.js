"use strict";

exports.__esModule = true;
exports.isCheckedValidator = isCheckedValidator;
exports.confirmPasswordValidator = confirmPasswordValidator;
exports.lengthValidator = lengthValidator;
exports.numLinesValidator = numLinesValidator;
exports.rangeValidator = rangeValidator;
exports.dateRangeValidator = dateRangeValidator;
exports.integerValidator = exports.numberValidator = exports.passwordValidator = exports.emailValidator = exports.requiredValidator = void 0;
var VALID_EMAIL_REGEX = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
var VALID_PASSWORD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/;

var isValueProvided = function isValueProvided(x) {
  return x !== '' && x !== undefined && x !== null && x !== false && x !== 'placeholder' || Array.isArray(x) && x.length;
};

var requiredValidator = function requiredValidator(_ref) {
  var value = _ref.value;

  if (!isValueProvided(value)) {
    return {
      errorI18nId: 'required'
    };
  }

  return undefined;
};

exports.requiredValidator = requiredValidator;

function isCheckedValidator(checkedValue) {
  if (checkedValue === void 0) {
    checkedValue = true;
  }

  return function (_ref2) {
    var value = _ref2.value;

    if (!isValueProvided(value) || value !== checkedValue) {
      return {
        errorI18nId: 'isNotChecked'
      };
    }

    return undefined;
  };
}

var emailValidator = function emailValidator(_ref3) {
  var value = _ref3.value;

  if (isValueProvided(value) && !VALID_EMAIL_REGEX.test(value.toLowerCase())) {
    return {
      errorI18nId: 'invalid'
    };
  }

  return undefined;
};

exports.emailValidator = emailValidator;

var passwordValidator = function passwordValidator(_ref4) {
  var value = _ref4.value;

  if (isValueProvided(value) && !VALID_PASSWORD_REGEX.test(value)) {
    return {
      errorI18nId: 'uncomplexPassword'
    };
  }

  return undefined;
};

exports.passwordValidator = passwordValidator;

function confirmPasswordValidator(password) {
  if (password === void 0) {
    password = '';
  }

  return function (_ref5) {
    var value = _ref5.value;

    if (password !== '' && isValueProvided(value)) {
      return password !== value ? {
        errorI18nId: 'differentPasswords'
      } : undefined;
    }

    return undefined;
  };
}

function lengthValidator(min, max) {
  if (min === void 0) {
    min = 0;
  }

  if (max && max < min) {
    throw new Error("value of 'min' can not be greater than 'max'!");
  }

  return function (_ref6) {
    var value = _ref6.value;

    if (isValueProvided(value) && typeof value === 'string') {
      // Ignore newlines when counting characters
      var _value$replace = value.replace(/\n/g, ''),
          length = _value$replace.length;

      if (length < min) {
        return Object.assign({
          errorI18nId: 'tooShort',
          min: min
        }, max ? {
          max: max
        } : {});
      }

      if (max && length > max) {
        return {
          errorI18nId: 'tooLong',
          min: min,
          max: max
        };
      }
    }

    return undefined;
  };
}

function numLinesValidator(min, max) {
  if (min === void 0) {
    min = 0;
  }

  if (max && max < min) {
    throw new Error("value of 'min' can not be greater than 'max'!");
  }

  return function (_ref7) {
    var value = _ref7.value;

    if (isValueProvided(value) && typeof value === 'string') {
      var numLines = value.split('\n').length;

      if (numLines < min) {
        return {
          errorI18nId: 'tooLittleLines',
          min: min
        };
      }

      if (numLines > max) {
        return {
          errorI18nId: 'tooManyLines',
          max: max
        };
      }
    }

    return undefined;
  };
}

var numberValidator = function numberValidator(_ref8) {
  var value = _ref8.value;

  if (isValueProvided(value)) {
    if (value.toString() !== parseFloat(value).toString()) {
      return {
        errorI18nId: 'notAnNumber'
      };
    }
  }

  return undefined;
};

exports.numberValidator = numberValidator;

var integerValidator = function integerValidator(_ref9) {
  var value = _ref9.value;

  if (isValueProvided(value)) {
    if (value.toString() !== parseInt(value, 10).toString()) {
      return {
        errorI18nId: 'notInteger'
      };
    }
  }

  return undefined;
};

exports.integerValidator = integerValidator;

function rangeValidator(min, max) {
  if (max !== undefined && max < min) {
    throw new Error("value of 'min' can not be greater than 'max'!");
  }

  return function (_ref10) {
    var value = _ref10.value;
    value = parseInt(value.toString(), 10);

    if (isValueProvided(value) && typeof value === 'number') {
      if (value < min) {
        return Object.assign({
          errorI18nId: 'belowRange',
          min: min
        }, max ? {
          max: max
        } : {});
      }

      if (max && value > max) {
        return {
          errorI18nId: 'aboveRange',
          min: min,
          max: max
        };
      }
    }

    return undefined;
  };
}

function dateRangeValidator(min, max, dateTimeFormat) {
  var minDate = min && new Date(min);
  var maxDate = max && new Date(max);
  var formattedMinDate = (dateTimeFormat == null ? void 0 : dateTimeFormat(minDate)) || minDate.toISOString().split('T')[0];
  var formattedMaxDate = (dateTimeFormat == null ? void 0 : dateTimeFormat(maxDate)) || maxDate.toISOString().split('T')[0];

  if (maxDate && maxDate < minDate) {
    throw new Error("value of 'min' can not be earlier than 'max'!");
  }

  return function (_ref11) {
    var value = _ref11.value;

    if (isValueProvided(value)) {
      var valueDate = new Date(value);

      if (minDate && valueDate < minDate) {
        return {
          errorI18nId: 'belowDateRange',
          min: formattedMinDate
        };
      }

      if (maxDate && valueDate > maxDate) {
        return {
          errorI18nId: 'aboveDateRange',
          max: formattedMaxDate
        };
      }
    }

    return undefined;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Gb3Jtcy92YWxpZGF0b3JzLnRzIl0sIm5hbWVzIjpbIlZBTElEX0VNQUlMX1JFR0VYIiwiVkFMSURfUEFTU1dPUkRfUkVHRVgiLCJpc1ZhbHVlUHJvdmlkZWQiLCJ4IiwidW5kZWZpbmVkIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwicmVxdWlyZWRWYWxpZGF0b3IiLCJ2YWx1ZSIsImVycm9ySTE4bklkIiwiaXNDaGVja2VkVmFsaWRhdG9yIiwiY2hlY2tlZFZhbHVlIiwiZW1haWxWYWxpZGF0b3IiLCJ0ZXN0IiwidG9Mb3dlckNhc2UiLCJwYXNzd29yZFZhbGlkYXRvciIsImNvbmZpcm1QYXNzd29yZFZhbGlkYXRvciIsInBhc3N3b3JkIiwibGVuZ3RoVmFsaWRhdG9yIiwibWluIiwibWF4IiwiRXJyb3IiLCJyZXBsYWNlIiwibnVtTGluZXNWYWxpZGF0b3IiLCJudW1MaW5lcyIsInNwbGl0IiwibnVtYmVyVmFsaWRhdG9yIiwidG9TdHJpbmciLCJwYXJzZUZsb2F0IiwiaW50ZWdlclZhbGlkYXRvciIsInBhcnNlSW50IiwicmFuZ2VWYWxpZGF0b3IiLCJkYXRlUmFuZ2VWYWxpZGF0b3IiLCJkYXRlVGltZUZvcm1hdCIsIm1pbkRhdGUiLCJEYXRlIiwibWF4RGF0ZSIsImZvcm1hdHRlZE1pbkRhdGUiLCJ0b0lTT1N0cmluZyIsImZvcm1hdHRlZE1heERhdGUiLCJ2YWx1ZURhdGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxpQkFBaUIsR0FBRyx1SkFBMUI7QUFDQSxJQUFNQyxvQkFBb0IsR0FBRyxpQ0FBN0I7O0FBRUEsSUFBTUMsZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixDQUFBQyxDQUFDO0FBQUEsU0FDdEJBLENBQUMsS0FBSyxFQUFOLElBQVlBLENBQUMsS0FBS0MsU0FBbEIsSUFBK0JELENBQUMsS0FBSyxJQUFyQyxJQUE2Q0EsQ0FBQyxLQUFLLEtBQW5ELElBQTREQSxDQUFDLEtBQUssYUFBbkUsSUFD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REFBTjtBQUNEOztBQUVELFNBQU8sa0JBQWU7QUFBQSxRQUFaYixLQUFZLFVBQVpBLEtBQVk7O0FBQ3BCLFFBQUlQLGVBQWUsQ0FBQ08sS0FBRCxDQUFuQixFQUE0QjtBQUMxQixVQUFNZ0MsU0FBUyxHQUFHLElBQUlMLElBQUosQ0FBUzNCLEtBQVQsQ0FBbEI7O0FBRUEsVUFBSTBCLE9BQU8sSUFBSU0sU0FBUyxHQUFHTixPQUEzQixFQUFvQztBQUNsQyxlQUFPO0FBQUV6QixVQUFBQSxXQUFXLEVBQUUsZ0JBQWY7QUFBaUNVLFVBQUFBLEdBQUcsRUFBRWtCO0FBQXRDLFNBQVA7QUFDRDs7QUFFRCxVQUFJRCxPQUFPLElBQUlJLFNBQVMsR0FBR0osT0FBM0IsRUFBb0M7QUFDbEMsZUFBTztBQUFFM0IsVUFBQUEsV0FBVyxFQUFFLGdCQUFmO0FBQWlDVyxVQUFBQSxHQUFHLEVBQUVtQjtBQUF0QyxTQUFQO0FBQ0Q7QUFDRjs7QUFFRCxXQUFPcEMsU0FBUDtBQUNELEdBZEQ7QUFlRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElWYWxpZGF0b3IgfSBmcm9tICcuL0lWYWxpZGF0b3InO1xuXG5jb25zdCBWQUxJRF9FTUFJTF9SRUdFWCA9IC9eKChbXjw+KClbXFxdXFxcXC4sOzpcXHNAXCJdKyhcXC5bXjw+KClbXFxdXFxcXC4sOzpcXHNAXCJdKykqKXwoXCIuK1wiKSlAKChcXFtbMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFxdKXwoKFthLXpBLVpcXC0wLTldK1xcLikrW2EtekEtWl17Mix9KSkkLztcbmNvbnN0IFZBTElEX1BBU1NXT1JEX1JFR0VYID0gL14oPz0uKlthLXpdKSg/PS4qW0EtWl0pKD89LipcXGQpLztcblxuY29uc3QgaXNWYWx1ZVByb3ZpZGVkID0geCA9PlxuICAoeCAhPT0gJycgJiYgeCAhPT0gdW5kZWZpbmVkICYmIHggIT09IG51bGwgJiYgeCAhPT0gZmFsc2UgJiYgeCAhPT0gJ3BsYWNlaG9sZGVyJykgfHxcbiAgKEFycmF5LmlzQXJyYXkoeCkgJiYgKHggYXMgYW55W10pLmxlbmd0aCk7XG5cbmV4cG9ydCBjb25zdCByZXF1aXJlZFZhbGlkYXRvcjogSVZhbGlkYXRvciA9ICh7IHZhbHVlIH0pID0+IHtcbiAgaWYgKCFpc1ZhbHVlUHJvdmlkZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIHsgZXJyb3JJMThuSWQ6ICdyZXF1aXJlZCcgfTtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gaXNDaGVja2VkVmFsaWRhdG9yKGNoZWNrZWRWYWx1ZSA9IHRydWUpOiBJVmFsaWRhdG9yIHtcbiAgcmV0dXJuICh7IHZhbHVlIH0pID0+IHtcbiAgICBpZiAoIWlzVmFsdWVQcm92aWRlZCh2YWx1ZSkgfHwgdmFsdWUgIT09IGNoZWNrZWRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHsgZXJyb3JJMThuSWQ6ICdpc05vdENoZWNrZWQnIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGVtYWlsVmFsaWRhdG9yOiBJVmFsaWRhdG9yID0gKHsgdmFsdWUgfSkgPT4ge1xuICBpZiAoaXNWYWx1ZVByb3ZpZGVkKHZhbHVlKSAmJiAhVkFMSURfRU1BSUxfUkVHRVgudGVzdCh2YWx1ZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgIHJldHVybiB7IGVycm9ySTE4bklkOiAnaW52YWxpZCcgfTtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgY29uc3QgcGFzc3dvcmRWYWxpZGF0b3I6IElWYWxpZGF0b3IgPSAoeyB2YWx1ZSB9KSA9PiB7XG4gIGlmIChpc1ZhbHVlUHJvdmlkZWQodmFsdWUpICYmICFWQUxJRF9QQVNTV09SRF9SRUdFWC50ZXN0KHZhbHVlKSkge1xuICAgIHJldHVybiB7IGVycm9ySTE4bklkOiAndW5jb21wbGV4UGFzc3dvcmQnIH07XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpcm1QYXNzd29yZFZhbGlkYXRvcihwYXNzd29yZDogc3RyaW5nID0gJycpOiBJVmFsaWRhdG9yIHtcbiAgcmV0dXJuICh7IHZhbHVlIH0pID0+IHtcbiAgICBpZiAocGFzc3dvcmQgIT09ICcnICYmIGlzVmFsdWVQcm92aWRlZCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBwYXNzd29yZCAhPT0gdmFsdWUgPyB7IGVycm9ySTE4bklkOiAnZGlmZmVyZW50UGFzc3dvcmRzJyB9IDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsZW5ndGhWYWxpZGF0b3IobWluOiBudW1iZXIgPSAwLCBtYXg/OiBudW1iZXIpOiBJVmFsaWRhdG9yIHtcbiAgaWYgKG1heCAmJiBtYXggPCBtaW4pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYHZhbHVlIG9mICdtaW4nIGNhbiBub3QgYmUgZ3JlYXRlciB0aGFuICdtYXgnIWApO1xuICB9XG5cbiAgcmV0dXJuICh7IHZhbHVlIH0pID0+IHtcbiAgICBpZiAoaXNWYWx1ZVByb3ZpZGVkKHZhbHVlKSAmJiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBJZ25vcmUgbmV3bGluZXMgd2hlbiBjb3VudGluZyBjaGFyYWN0ZXJzXG4gICAgICBjb25zdCB7IGxlbmd0aCB9ID0gdmFsdWUucmVwbGFjZSgvXFxuL2csICcnKTtcblxuICAgICAgaWYgKGxlbmd0aCA8IG1pbikge1xuICAgICAgICByZXR1cm4geyBlcnJvckkxOG5JZDogJ3Rvb1Nob3J0JywgbWluLCAuLi4obWF4ID8geyBtYXggfSA6IHt9KSB9O1xuICAgICAgfVxuXG4gICAgICBpZiAobWF4ICYmIGxlbmd0aCA+IG1heCkge1xuICAgICAgICByZXR1cm4geyBlcnJvckkxOG5JZDogJ3Rvb0xvbmcnLCBtaW4sIG1heCB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBudW1MaW5lc1ZhbGlkYXRvcihtaW46IG51bWJlciA9IDAsIG1heD86IG51bWJlcik6IElWYWxpZGF0b3Ige1xuICBpZiAobWF4ICYmIG1heCA8IG1pbikge1xuICAgIHRocm93IG5ldyBFcnJvcihgdmFsdWUgb2YgJ21pbicgY2FuIG5vdCBiZSBncmVhdGVyIHRoYW4gJ21heCchYCk7XG4gIH1cblxuICByZXR1cm4gKHsgdmFsdWUgfSkgPT4ge1xuICAgIGlmIChpc1ZhbHVlUHJvdmlkZWQodmFsdWUpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IG51bUxpbmVzID0gdmFsdWUuc3BsaXQoJ1xcbicpLmxlbmd0aDtcblxuICAgICAgaWYgKG51bUxpbmVzIDwgbWluKSB7XG4gICAgICAgIHJldHVybiB7IGVycm9ySTE4bklkOiAndG9vTGl0dGxlTGluZXMnLCBtaW4gfTtcbiAgICAgIH1cbiAgICAgIGlmIChudW1MaW5lcyA+IG1heCkge1xuICAgICAgICByZXR1cm4geyBlcnJvckkxOG5JZDogJ3Rvb01hbnlMaW5lcycsIG1heCB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCBudW1iZXJWYWxpZGF0b3I6IElWYWxpZGF0b3IgPSAoeyB2YWx1ZSB9KSA9PiB7XG4gIGlmIChpc1ZhbHVlUHJvdmlkZWQodmFsdWUpKSB7XG4gICAgaWYgKHZhbHVlLnRvU3RyaW5nKCkgIT09IHBhcnNlRmxvYXQodmFsdWUpLnRvU3RyaW5nKCkpIHtcbiAgICAgIHJldHVybiB7IGVycm9ySTE4bklkOiAnbm90QW5OdW1iZXInIH07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbmV4cG9ydCBjb25zdCBpbnRlZ2VyVmFsaWRhdG9yOiBJVmFsaWRhdG9yID0gKHsgdmFsdWUgfSkgPT4ge1xuICBpZiAoaXNWYWx1ZVByb3ZpZGVkKHZhbHVlKSkge1xuICAgIGlmICh2YWx1ZS50b1N0cmluZygpICE9PSBwYXJzZUludCh2YWx1ZSwgMTApLnRvU3RyaW5nKCkpIHtcbiAgICAgIHJldHVybiB7IGVycm9ySTE4bklkOiAnbm90SW50ZWdlcicgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJhbmdlVmFsaWRhdG9yKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IElWYWxpZGF0b3Ige1xuICBpZiAobWF4ICE9PSB1bmRlZmluZWQgJiYgbWF4IDwgbWluKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGB2YWx1ZSBvZiAnbWluJyBjYW4gbm90IGJlIGdyZWF0ZXIgdGhhbiAnbWF4JyFgKTtcbiAgfVxuXG4gIHJldHVybiAoeyB2YWx1ZSB9KSA9PiB7XG4gICAgdmFsdWUgPSBwYXJzZUludCh2YWx1ZS50b1N0cmluZygpLCAxMCk7XG5cbiAgICBpZiAoaXNWYWx1ZVByb3ZpZGVkKHZhbHVlKSAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICBpZiAodmFsdWUgPCBtaW4pIHtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3JJMThuSWQ6ICdiZWxvd1JhbmdlJywgbWluLCAuLi4obWF4ID8geyBtYXggfSA6IHt9KSB9O1xuICAgICAgfVxuXG4gICAgICBpZiAobWF4ICYmIHZhbHVlID4gbWF4KSB7XG4gICAgICAgIHJldHVybiB7IGVycm9ySTE4bklkOiAnYWJvdmVSYW5nZScsIG1pbiwgbWF4IH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGVSYW5nZVZhbGlkYXRvcihtaW4/OiBzdHJpbmcsIG1heD86IHN0cmluZywgZGF0ZVRpbWVGb3JtYXQ/OiBhbnkpOiBJVmFsaWRhdG9yIHtcbiAgY29uc3QgbWluRGF0ZSA9IG1pbiAmJiBuZXcgRGF0ZShtaW4pO1xuICBjb25zdCBtYXhEYXRlID0gbWF4ICYmIG5ldyBEYXRlKG1heCk7XG5cbiAgY29uc3QgZm9ybWF0dGVkTWluRGF0ZSA9IGRhdGVUaW1lRm9ybWF0Py4obWluRGF0ZSkgfHwgbWluRGF0ZS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF07XG4gIGNvbnN0IGZvcm1hdHRlZE1heERhdGUgPSBkYXRlVGltZUZvcm1hdD8uKG1heERhdGUpIHx8IG1heERhdGUudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdO1xuXG4gIGlmIChtYXhEYXRlICYmIG1heERhdGUgPCBtaW5EYXRlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGB2YWx1ZSBvZiAnbWluJyBjYW4gbm90IGJlIGVhcmxpZXIgdGhhbiAnbWF4JyFgKTtcbiAgfVxuXG4gIHJldHVybiAoeyB2YWx1ZSB9KSA9PiB7XG4gICAgaWYgKGlzVmFsdWVQcm92aWRlZCh2YWx1ZSkpIHtcbiAgICAgIGNvbnN0IHZhbHVlRGF0ZSA9IG5ldyBEYXRlKHZhbHVlKTtcblxuICAgICAgaWYgKG1pbkRhdGUgJiYgdmFsdWVEYXRlIDwgbWluRGF0ZSkge1xuICAgICAgICByZXR1cm4geyBlcnJvckkxOG5JZDogJ2JlbG93RGF0ZVJhbmdlJywgbWluOiBmb3JtYXR0ZWRNaW5EYXRlIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChtYXhEYXRlICYmIHZhbHVlRGF0ZSA+IG1heERhdGUpIHtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3JJMThuSWQ6ICdhYm92ZURhdGVSYW5nZScsIG1heDogZm9ybWF0dGVkTWF4RGF0ZSB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG59XG4iXX0=