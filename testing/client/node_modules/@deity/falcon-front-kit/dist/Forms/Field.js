"use strict";

var _interopRequireWildcard = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.Field = exports.getPlaceholderI18nId = exports.getLabelI18nId = void 0;

var _objectWithoutPropertiesLoose2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));

var _formik = /*#__PURE__*/require("formik");

var _falconI18n = /*#__PURE__*/require("@deity/falcon-i18n");

var _FormContext = /*#__PURE__*/require("./FormContext");

var _IValidator = /*#__PURE__*/require("./IValidator");

var translateIfExists = function translateIfExists(t, key) {
  return key ? t(key, {
    defaultValue: ''
  }) : undefined;
};

var LABEL_SUFFIX = 'FieldLabel';
var PLACEHOLDER_SUFFIX = 'FieldPlaceholder';

var getLabelI18nId = function getLabelI18nId(formI18nId, fieldName) {
  return formI18nId + "." + fieldName + LABEL_SUFFIX;
};

exports.getLabelI18nId = getLabelI18nId;

var getPlaceholderI18nId = function getPlaceholderI18nId(formI18nId, fieldName) {
  return formI18nId + "." + fieldName + PLACEHOLDER_SUFFIX;
};

exports.getPlaceholderI18nId = getPlaceholderI18nId;

var Field = /*#__PURE__*/_react.default.memo(function (props) {
  var name = props.name,
      label = props.label,
      placeholder = props.placeholder,
      validate = props.validate,
      children = props.children,
      fast = props.fast,
      restProps = (0, _objectWithoutPropertiesLoose2.default)(props, ["name", "label", "placeholder", "validate", "children", "fast"]);

  var _useI18n = (0, _falconI18n.useI18n)(),
      t = _useI18n.t;

  var _useFormContext = (0, _FormContext.useFormContext)(),
      formId = _useFormContext.id,
      formI18nId = _useFormContext.i18nId;

  var i18nIds = formI18nId ? {
    label: getLabelI18nId(formI18nId, name),
    placeholder: getPlaceholderI18nId(formI18nId, name)
  } : {};
  var fieldLabel = label || translateIfExists(t, i18nIds.label);
  var fieldPlaceholder = placeholder || translateIfExists(t, i18nIds.placeholder);
  var validateCallback = (0, _react.useCallback)(function () {
    return (0, _IValidator.fieldValidator)(validate, {
      name: name,
      label: fieldLabel,
      formI18nId: formI18nId,
      t: t
    });
  }, [validate, name, fieldLabel, formI18nId, t]);

  if (!children) {
    return null;
  }

  var FieldComponent = fast ? _formik.FastField : _formik.Field;
  return /*#__PURE__*/_react.default.createElement(FieldComponent, {
    name: name,
    validate: validateCallback()
  }, function (_ref) {
    var form = _ref.form,
        field = _ref.field,
        _ref$meta = _ref.meta,
        touched = _ref$meta.touched,
        error = _ref$meta.error;
    return children({
      form: Object.assign({}, form, {
        id: formId
      }),
      field: Object.assign({
        id: formId + "-" + name
      }, restProps, field, {
        placeholder: fieldPlaceholder,
        invalid: !!touched && !!error
      }),
      error: error,
      label: fieldLabel,
      i18nIds: i18nIds
    });
  });
});

exports.Field = Field;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Gb3Jtcy9GaWVsZC50c3giXSwibmFtZXMiOlsidHJhbnNsYXRlSWZFeGlzdHMiLCJ0Iiwia2V5IiwiZGVmYXVsdFZhbHVlIiwidW5kZWZpbmVkIiwiTEFCRUxfU1VGRklYIiwiUExBQ0VIT0xERVJfU1VGRklYIiwiZ2V0TGFiZWxJMThuSWQiLCJmb3JtSTE4bklkIiwiZmllbGROYW1lIiwiZ2V0UGxhY2Vob2xkZXJJMThuSWQiLCJGaWVsZCIsIlJlYWN0IiwibWVtbyIsInByb3BzIiwibmFtZSIsImxhYmVsIiwicGxhY2Vob2xkZXIiLCJ2YWxpZGF0ZSIsImNoaWxkcmVuIiwiZmFzdCIsInJlc3RQcm9wcyIsImZvcm1JZCIsImlkIiwiaTE4bklkIiwiaTE4bklkcyIsImZpZWxkTGFiZWwiLCJmaWVsZFBsYWNlaG9sZGVyIiwidmFsaWRhdGVDYWxsYmFjayIsIkZpZWxkQ29tcG9uZW50IiwiRm9ybWlrRmFzdEZpZWxkIiwiRm9ybWlrRmllbGQiLCJmb3JtIiwiZmllbGQiLCJtZXRhIiwidG91Y2hlZCIsImVycm9yIiwiaW52YWxpZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxJQUFNQSxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQW9CLENBQUNDLENBQUQsRUFBSUMsR0FBSjtBQUFBLFNBQXNCQSxHQUFHLEdBQUlELENBQUMsQ0FBQ0MsR0FBRCxFQUFNO0FBQUVDLElBQUFBLFlBQVksRUFBRTtBQUFoQixHQUFOLENBQUwsR0FBOENDLFNBQXZFO0FBQUEsQ0FBMUI7O0FBRUEsSUFBTUMsWUFBWSxHQUFHLFlBQXJCO0FBQ0EsSUFBTUMsa0JBQWtCLEdBQUcsa0JBQTNCOztBQUVPLElBQU1DLGNBQWMsR0FBRyxTQUFqQkEsY0FBaUIsQ0FBQ0MsVUFBRCxFQUFxQkMsU0FBckI7QUFBQSxTQUE4Q0QsVUFBOUMsU0FBNERDLFNBQTVELEdBQXdFSixZQUF4RTtBQUFBLENBQXZCOzs7O0FB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LEVBQUxBLEtBVE87QUFVUHBCLE1BQUFBLEtBQUssRUFBRVUsVUFWQTtBQVdQRCxNQUFBQSxPQUFPLEVBQVBBO0FBWE8sS0FBRCxDQURUO0FBQUEsR0FESCxDQURGO0FBbUJELENBOUMyQyxDQUFyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEZpZWxkIGFzIEZvcm1pa0ZpZWxkLCBGYXN0RmllbGQgYXMgRm9ybWlrRmFzdEZpZWxkLCBGaWVsZFByb3BzIGFzIEZvcm1pa0ZpZWxkUHJvcHMgfSBmcm9tICdmb3JtaWsnO1xuaW1wb3J0IHsgdXNlSTE4biB9IGZyb20gJ0BkZWl0eS9mYWxjb24taTE4bic7XG5pbXBvcnQgeyB1c2VGb3JtQ29udGV4dCB9IGZyb20gJy4vRm9ybUNvbnRleHQnO1xuaW1wb3J0IHsgZmllbGRWYWxpZGF0b3IsIElWYWxpZGF0b3IgfSBmcm9tICcuL0lWYWxpZGF0b3InO1xuXG5jb25zdCB0cmFuc2xhdGVJZkV4aXN0cyA9ICh0LCBrZXk/OiBzdHJpbmcpID0+IChrZXkgPyAodChrZXksIHsgZGVmYXVsdFZhbHVlOiAnJyB9KSBhcyBzdHJpbmcpIDogdW5kZWZpbmVkKTtcblxuY29uc3QgTEFCRUxfU1VGRklYID0gJ0ZpZWxkTGFiZWwnO1xuY29uc3QgUExBQ0VIT0xERVJfU1VGRklYID0gJ0ZpZWxkUGxhY2Vob2xkZXInO1xuXG5leHBvcnQgY29uc3QgZ2V0TGFiZWxJMThuSWQgPSAoZm9ybUkxOG5JZDogc3RyaW5nLCBmaWVsZE5hbWU6IHN0cmluZykgPT4gYCR7Zm9ybUkxOG5JZH0uJHtmaWVsZE5hbWV9JHtMQUJFTF9TVUZGSVh9YDtcbmV4cG9ydCBjb25zdCBnZXRQbGFjZWhvbGRlckkxOG5JZCA9IChmb3JtSTE4bklkOiBzdHJpbmcsIGZpZWxkTmFtZTogc3RyaW5nKSA9PlxuICBgJHtmb3JtSTE4bklkfS4ke2ZpZWxkTmFtZX0ke1BMQUNFSE9MREVSX1NVRkZJWH1gO1xuXG5leHBvcnQgdHlwZSBGaWVsZFJlbmRlclByb3BzPFRWYWx1ZSA9IGFueT4gPSB7XG4gIGZvcm06IEZvcm1pa0ZpZWxkUHJvcHM8VFZhbHVlPlsnZm9ybSddICYge1xuICAgIGlkPzogbnVtYmVyIHwgc3RyaW5nO1xuICB9O1xuICBmaWVsZDogRm9ybWlrRmllbGRQcm9wczxUVmFsdWU+WydmaWVsZCddICYge1xuICAgIGlkPzogc3RyaW5nO1xuICAgIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICAgIGludmFsaWQ6IGJvb2xlYW47XG4gIH07XG4gIGxhYmVsPzogc3RyaW5nO1xuICBlcnJvcj86IHN0cmluZztcbiAgaTE4bklkczoge1xuICAgIGxhYmVsPzogc3RyaW5nO1xuICAgIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICB9O1xufTtcblxuZXhwb3J0IHR5cGUgRmllbGRQcm9wczxUVmFsdWUgPSBhbnk+ID0ge1xuICBpZD86IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBsYWJlbD86IHN0cmluZztcbiAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XG4gIHZhbGlkYXRlPzogSVZhbGlkYXRvcltdO1xuICBmYXN0PzogYm9vbGVhbjtcbiAgY2hpbGRyZW4/OiAocHJvcHM6IEZpZWxkUmVuZGVyUHJvcHM8VFZhbHVlPikgPT4gUmVhY3QuUmVhY3ROb2RlO1xufTtcbmV4cG9ydCBjb25zdCBGaWVsZDogUmVhY3QuU0ZDPEZpZWxkUHJvcHM+ID0gUmVhY3QubWVtbyhwcm9wcyA9PiB7XG4gIGNvbnN0IHsgbmFtZSwgbGFiZWwsIHBsYWNlaG9sZGVyLCB2YWxpZGF0ZSwgY2hpbGRyZW4sIGZhc3QsIC4uLnJlc3RQcm9wcyB9ID0gcHJvcHM7XG4gIGNvbnN0IHsgdCB9ID0gdXNlSTE4bigpO1xuICBjb25zdCB7IGlkOiBmb3JtSWQsIGkxOG5JZDogZm9ybUkxOG5JZCB9ID0gdXNlRm9ybUNvbnRleHQoKTtcblxuICBjb25zdCBpMThuSWRzID0gZm9ybUkxOG5JZFxuICAgID8ge1xuICAgICAgICBsYWJlbDogZ2V0TGFiZWxJMThuSWQoZm9ybUkxOG5JZCwgbmFtZSksXG4gICAgICAgIHBsYWNlaG9sZGVyOiBnZXRQbGFjZWhvbGRlckkxOG5JZChmb3JtSTE4bklkLCBuYW1lKVxuICAgICAgfVxuICAgIDoge307XG4gIGNvbnN0IGZpZWxkTGFiZWwgPSBsYWJlbCB8fCB0cmFuc2xhdGVJZkV4aXN0cyh0LCBpMThuSWRzLmxhYmVsKTtcbiAgY29uc3QgZmllbGRQbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyIHx8IHRyYW5zbGF0ZUlmRXhpc3RzKHQsIGkxOG5JZHMucGxhY2Vob2xkZXIpO1xuXG4gIGNvbnN0IHZhbGlkYXRlQ2FsbGJhY2sgPSB1c2VDYWxsYmFjaygoKSA9PiBmaWVsZFZhbGlkYXRvcih2YWxpZGF0ZSwgeyBuYW1lLCBsYWJlbDogZmllbGRMYWJlbCwgZm9ybUkxOG5JZCwgdCB9KSwgW1xuICAgIHZhbGlkYXRlLFxuICAgIG5hbWUsXG4gICAgZmllbGRMYWJlbCxcbiAgICBmb3JtSTE4bklkLFxuICAgIHRcbiAgXSk7XG5cbiAgaWYgKCFjaGlsZHJlbikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgRmllbGRDb21wb25lbnQgPSBmYXN0ID8gRm9ybWlrRmFzdEZpZWxkIDogRm9ybWlrRmllbGQ7XG4gIHJldHVybiAoXG4gICAgPEZpZWxkQ29tcG9uZW50IG5hbWU9e25hbWV9IHZhbGlkYXRlPXt2YWxpZGF0ZUNhbGxiYWNrKCl9PlxuICAgICAgeyh7IGZvcm0sIGZpZWxkLCBtZXRhOiB7IHRvdWNoZWQsIGVycm9yIH0gfTogRm9ybWlrRmllbGRQcm9wcykgPT5cbiAgICAgICAgY2hpbGRyZW4oe1xuICAgICAgICAgIGZvcm06IHsgLi4uZm9ybSwgaWQ6IGZvcm1JZCB9LFxuICAgICAgICAgIGZpZWxkOiB7XG4gICAgICAgICAgICBpZDogYCR7Zm9ybUlkfS0ke25hbWV9YCxcbiAgICAgICAgICAgIC4uLnJlc3RQcm9wcyxcbiAgICAgICAgICAgIC4uLmZpZWxkLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IGZpZWxkUGxhY2Vob2xkZXIsXG4gICAgICAgICAgICBpbnZhbGlkOiAhIXRvdWNoZWQgJiYgISFlcnJvclxuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgbGFiZWw6IGZpZWxkTGFiZWwsXG4gICAgICAgICAgaTE4bklkc1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIDwvRmllbGRDb21wb25lbnQ+XG4gICk7XG59KTtcbiJdfQ==