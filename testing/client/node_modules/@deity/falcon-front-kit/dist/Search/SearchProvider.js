"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.SearchProvider = exports.SearchProviderInner = void 0;

var _extends2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _createClass2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/createClass"));

var _inheritsLoose2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/inheritsLoose"));

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _reactRouterDom = /*#__PURE__*/require("react-router-dom");

var _falconShopData = /*#__PURE__*/require("@deity/falcon-shop-data");

var _areSortOrderInputsEqual = /*#__PURE__*/require("../SortOrder/areSortOrderInputsEqual");

var _SearchContext = /*#__PURE__*/require("./SearchContext");

var _searchState = /*#__PURE__*/require("./searchState");

var SearchProviderInner = /*#__PURE__*/function (_React$Component) {
  (0, _inheritsLoose2.default)(SearchProviderInner, _React$Component);

  function SearchProviderInner(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;

    _this.setFilter = function (field, value, operator) {
      if (operator === void 0) {
        operator = _falconShopData.FilterOperator.equals;
      }

      var filters = [].concat(_this.state.filters);

      if (value.length === 0) {
        filters = filters.filter(function (x) {
          return x.field !== field;
        });
      } else {
        var filterIndex = filters.findIndex(function (x) {
          return x.field === field;
        });

        if (filterIndex >= 0) {
          filters[filterIndex] = Object.assign({}, filters[filterIndex], {
            value: value,
            operator: operator
          });
        } else {
          filters.push({
            field: field,
            value: value,
            operator: operator
          });
        }
      }

      _this.updateURL(Object.assign({}, _this.state, {
        filters: filters,
        // reset pagination on filters change - go back to the 1st page
        pagination: _this.setPaginationToFirstPage()
      }));
    };

    _this.setPaginationToFirstPage = function () {
      return Object.assign({}, _this.state.pagination, {
        page: 1
      });
    };

    _this.setSortOrder = function (sort) {
      _this.updateURL(Object.assign({}, _this.state, {
        sort: _this.sortOrderExists(sort) ? sort : _this.defaultSortOrder,
        pagination: _this.setPaginationToFirstPage()
      }));
    };

    _this.setPagination = function (pagination) {
      return _this.updateURL(Object.assign({}, _this.state, {
        pagination: pagination
      }));
    };

    _this.setTerm = function (term) {
      return _this.updateURL(Object.assign({}, _this.state, {
        term: term,
        // reset pagination on search term change - go back to the 1st page
        pagination: _this.setPaginationToFirstPage()
      }));
    };

    _this.sortOrderExists = function (sort) {
      return _this.props.sortOrders.some(function (x) {
        return !x && !sort || (0, _areSortOrderInputsEqual.areSortOrderInputsEqual)(x, sort);
      });
    };

    _this.removeFilters = function () {
      return _this.updateURL(Object.assign({}, _this.state, {
        filters: [],
        pagination: _this.setPaginationToFirstPage()
      }));
    };

    _this.stateToSerialize = function (state) {
      var stateToSerialize = Object.assign({}, state);
      return stateToSerialize;
    };

    _this.restoreStateFromURL = function (location) {
      var state = _this.getStateFromURL(location); // state created from URL might be empty so we have to make sure that all the items are correctly
      // removed from current state - setting undefined for non existing value will do the trick


      Object.keys(_this.state).forEach(function (key) {
        if (!(key in state)) {
          state[key] = undefined;
        }
      });

      _this.setState(state);
    };

    _this.historyUnlisten = function () {};

    _this.state = _this.getStateFromURL(props.location);
    return _this;
  }

  var _proto = SearchProviderInner.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.historyUnlisten = this.props.history.listen(this.restoreStateFromURL);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.historyUnlisten();
  };

  _proto.getStateFromURL = function getStateFromURL(location) {
    var _ref = this.props.searchStateFromURL(location.search),
        sort = _ref.sort,
        filters = _ref.filters,
        rest = (0, _objectWithoutPropertiesLoose2.default)(_ref, ["sort", "filters"]);

    return Object.assign({}, rest, {
      filters: Array.isArray(filters) ? filters : [],
      sort: sort && this.sortOrderExists(sort) ? sort : undefined
    });
  };

  _proto.updateURL = function updateURL(state) {
    var queryString = this.props.searchStateToURL(state);
    this.props.history.push(this.props.location.pathname + "?" + queryString);
  };

  _proto.render = function render() {
    var _this2 = this;

    return /*#__PURE__*/_react.default.createElement(_SearchContext.SearchContext.Provider, {
      value: {
        state: Object.assign({}, this.state),
        setFilter: this.setFilter,
        removeFilter: function removeFilter(x) {
          return _this2.setFilter(x, []);
        },
        removeFilters: this.removeFilters,
        setSortOrder: this.setSortOrder,
        setPagination: this.setPagination,
        setTerm: this.setTerm
      }
    }, this.props.children);
  };

  (0, _createClass2.default)(SearchProviderInner, [{
    key: "defaultSortOrder",
    get: function get() {
      var _this$props = this.props,
          defaultSortOrder = _this$props.defaultSortOrder,
          sortOrders = _this$props.sortOrders;

      if (defaultSortOrder) {
        return defaultSortOrder;
      }

      if (sortOrders.some(function (x) {
        return !x;
      })) {
        return undefined;
      }

      return sortOrders[0];
    }
  }]);
  return SearchProviderInner;
}(_react.default.Component);

exports.SearchProviderInner = SearchProviderInner;
SearchProviderInner.defaultProps = {
  searchStateFromURL: _searchState.searchStateFromURL,
  searchStateToURL: _searchState.searchStateToURL,
  filters: []
};

var SearchProviderWithSortOrders = function SearchProviderWithSortOrders(_ref2) {
  var rest = (0, _extends2.default)({}, _ref2);
  return /*#__PURE__*/_react.default.createElement(_falconShopData.BackendConfigQuery, null, function (_ref3) {
    var backendConfig = _ref3.data.backendConfig;
    return /*#__PURE__*/_react.default.createElement(SearchProviderInner, (0, _extends2.default)({}, rest, {
      sortOrders: backendConfig.shop.sortOrderList.map(function (x) {
        return x.value;
      })
    }));
  });
}; // wrap everything in router so SearchProviderWithSortOrders has access to history and location


var SearchProvider = /*#__PURE__*/(0, _reactRouterDom.withRouter)(SearchProviderWithSortOrders);
exports.SearchProvider = SearchProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,