import { Theme, ThemeComponents, RecursivePartial } from '@deity/falcon-ui';
import React from 'react';
import { ThemePreset } from './ThemePresets';
export declare type TabKeys = 'theme' | 'component' | 'presets' | 'download';
export declare type ComponentWithDefaultTheme = {
    defaultTheme: ThemeComponents;
};
export declare type ThemeStateContextType = {
    selectComponents?: (components: ComponentWithDefaultTheme[]) => void;
    openThemePropsPanel?: (panel: string, subpanel?: string) => void;
    toggleFinder?: () => void;
    openEditor?: boolean;
    finderActive?: boolean;
    presets?: ThemePreset[];
};
export declare const ThemeStateContext: React.Context<ThemeStateContextType>;
declare type ThemeEditorStateState = {
    activeTheme: Theme;
    initialTheme: Theme;
    visible: boolean;
    finderActive: boolean;
    activeTab: TabKeys;
    tabs: {
        theme: {
            openPanels: {
                [name: string]: boolean;
            };
        };
        component: {
            selectedComponents: ComponentWithDefaultTheme[];
        };
        presets: {
            active: string;
        };
    };
    presets: ThemePreset[];
};
export declare type ThemeEditorStateRenderProp = {
    theme: Theme;
    initialTheme: Theme;
    updateTheme: (themeDiff: RecursivePartial<Theme>, options?: any) => void;
    selectComponents: (components: ComponentWithDefaultTheme[]) => void;
    openEditor?: boolean;
    toggleVisibility: () => void;
    toggleFinder: () => void;
    visible: boolean;
    finderActive: boolean;
    activeTab: TabKeys;
    setActiveTab: (tabKey: TabKeys) => void;
    setActivePreset: (presetKey: string) => void;
    toggleOpenPanel: (panelKey: string) => void;
    tabs: {
        theme: {
            openPanels: {
                [name: string]: boolean;
            };
        };
        component: {
            selectedComponents: ComponentWithDefaultTheme[];
        };
        presets: {
            active: string;
        };
    };
};
export declare type ThemeEditorStateProps = {
    initial: Theme;
    children: (renderProp: ThemeEditorStateRenderProp) => React.ReactNode;
    presets?: ThemePreset[];
};
export declare class ThemeEditorState extends React.Component<ThemeEditorStateProps, ThemeEditorStateState> {
    static defaultProps: {
        presets: any[];
    };
    constructor(props: ThemeEditorStateProps);
    static getDerivedStateFromProps: (props: Readonly<ThemeEditorStateProps>, state: Readonly<ThemeEditorStateState>) => Partial<ThemeEditorStateState> | null;
    setActiveTab: (tabKey: TabKeys) => void;
    setActivePreset: (presetKey: string) => void;
    updateTheme: (themeDiff: RecursivePartial<Theme>, { useInitial }?: {
        useInitial?: boolean;
    }) => void;
    toggleFinder: () => void;
    toggleVisibility: () => void;
    selectComponents: (components: ComponentWithDefaultTheme[]) => void;
    toggleOpenPanel: (key: string) => void;
    openThemePropsPanel: (panel: string, subpanel?: string) => void;
    render(): JSX.Element;
}
export {};
//# sourceMappingURL=ThemeEditorState.d.ts.map