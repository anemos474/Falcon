"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
var _exportNames = {
  ThemeEditor: true
};
exports.ThemeEditor = void 0;

var _extends2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/extends"));

var _inheritsLoose2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/inheritsLoose"));

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _falconUi = /*#__PURE__*/require("@deity/falcon-ui");

var _ComponentsEditor = /*#__PURE__*/require("./ComponentsEditor");

var _ComponentFinder = /*#__PURE__*/require("./ComponentFinder");

var _Tabs = /*#__PURE__*/require("./Tabs");

var _ThemePropsEditor = /*#__PURE__*/require("./ThemePropsEditor");

var _editortheme = /*#__PURE__*/require("./editortheme");

var _ThemeDownloader = /*#__PURE__*/require("./ThemeDownloader");

var _ThemePresets = /*#__PURE__*/require("./ThemePresets");

var _fonts2 = /*#__PURE__*/require("./fonts");

var _ThemeEditorState = /*#__PURE__*/require("./ThemeEditorState");

Object.keys(_ThemeEditorState).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _ThemeEditorState[key]) return;
  exports[key] = _ThemeEditorState[key];
});

var _thememeta = /*#__PURE__*/require("./thememeta");

Object.keys(_thememeta).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _thememeta[key]) return;
  exports[key] = _thememeta[key];
});

var ThemeEditor = /*#__PURE__*/function (_React$Component) {
  (0, _inheritsLoose2.default)(ThemeEditor, _React$Component);

  function ThemeEditor() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _this.tabs = function (enableComponent) {
      return [{
        name: 'Theme',
        key: 'theme'
      }, enableComponent ? {
        name: 'Component',
        key: 'component'
      } : undefined, {
        name: 'Presets',
        key: 'presets'
      }, {
        name: 'Download',
        key: 'download'
      }].filter(function (x) {
        return x;
      });
    };

    _this.onChange = function (themeKey, propName, isNumber) {
      return function (e) {
        var _themeKey, _this$props$updateThe;

        _this.props.updateTheme((_this$props$updateThe = {}, _this$props$updateThe[themeKey] = (_themeKey = {}, _themeKey[propName] = isNumber ? +e.target.value : e.target.value, _themeKey), _this$props$updateThe));
      };
    };

    _this.onFontChange = function (fontKind) {
      return function (fontOption) {
        var _fonts;

        _this.props.updateTheme({
          fonts: (_fonts = {}, _fonts[fontKind] = fontOption.value, _fonts)
        });

        if (fontOption.google) {
          _this.loadGoogleFont(fontOption.google);
        }
      };
    };

    _this.onPresetChange = function (preset) {
      return function () {
        requestAnimationFrame(function () {
          _this.props.updateTheme(preset.theme, {
            useInitial: true
          });
        });

        _this.props.setActivePreset(preset.name);

        if (!preset.theme.fonts) {
          return;
        }

        var newFont = preset.theme.fonts.sans;

        var potentiallFontToLoad = _fonts2.fonts.filter(function (font) {
          return font.value === newFont;
        })[0];

        if (potentiallFontToLoad && potentiallFontToLoad.google) {
          _this.loadGoogleFont(potentiallFontToLoad.google);
        }
      };
    };

    _this.onComponentThemeChange = function (themeKey, variantKey) {
      return function (key, value) {
        if (variantKey) {
          var _variantKey, _variants, _components;

          _this.props.updateTheme({
            components: (_components = {}, _components[themeKey] = {
              variants: (_variants = {}, _variants[variantKey] = (_variantKey = {}, _variantKey[key] = value, _variantKey), _variants)
            }, _components)
          });
        } else {
          var _themeKey2, _components2;

          _this.props.updateTheme({
            components: (_components2 = {}, _components2[themeKey] = (_themeKey2 = {}, _themeKey2[key] = value, _themeKey2), _components2)
          });
        }
      };
    };

    return _this;
  }

  var _proto = ThemeEditor.prototype;

  _proto.loadGoogleFont = function loadGoogleFont(font) {
    // require is inline as webfontloader does not work server side
    // https://github.com/typekit/webfontloader/issues/383
    var WebFontLoader = require('webfontloader');

    WebFontLoader.load({
      google: {
        families: [font]
      }
    });
  };

  _proto.render = function render() {
    var _ref;

    var _this$props = this.props,
        visible = _this$props.visible,
        toggleVisibility = _this$props.toggleVisibility,
        toggleFinder = _this$props.toggleFinder,
        setActiveTab = _this$props.setActiveTab,
        activeTab = _this$props.activeTab,
        finderActive = _this$props.finderActive,
        theme = _this$props.theme,
        tabs = _this$props.tabs,
        toggleOpenPanel = _this$props.toggleOpenPanel,
        initialTheme = _this$props.initialTheme,
        side = _this$props.side,
        enableComponentFinder = _this$props.enableComponentFinder;
    return /*#__PURE__*/_react.default.createElement(_falconUi.ThemeProvider, {
      theme: _editortheme.editorTheme,
      withoutRoot: true
    }, /*#__PURE__*/_react.default.createElement(_falconUi.Sidebar, {
      as: _falconUi.Portal,
      visible: visible,
      side: side,
      css: {
        position: 'fixed',
        overflowX: 'inherit'
      },
      boxShadow: "subtle",
      bg: "white"
    }, /*#__PURE__*/_react.default.createElement(_falconUi.FlexLayout, {
      flexDirection: "column",
      flexWrap: "nowrap",
      py: "sm",
      pl: "sm",
      css: {
        width: {
          xs: '75vw',
          sm: 480
        }
      }
    }, /*#__PURE__*/_react.default.createElement(_Tabs.Tabs, {
      items: this.tabs(this.props.enableComponentFinder),
      onChange: setActiveTab,
      active: activeTab
    }), /*#__PURE__*/_react.default.createElement(_falconUi.Divider, {
      my: "sm"
    }), /*#__PURE__*/_react.default.createElement(_falconUi.Box, {
      flex: "1",
      css: function css(props) {
        return {
          overflowY: 'auto',
          paddingRight: 10,
          marginRight: 6,
          '::-webkit-scrollbar': {
            width: 3,
            backgroundColor: props.theme.colors.secondaryLight,
            borderRadius: props.theme.borderRadius.medium
          },
          '::-webkit-scrollbar-thumb': {
            borderRadius: props.theme.borderRadius.medium,
            backgroundColor: props.theme.colors.secondaryDark
          }
        };
      }
    }, activeTab === 'theme' && /*#__PURE__*/_react.default.createElement(_ThemePropsEditor.ThemePropsEditor, {
      openPanels: tabs.theme.openPanels,
      toggleOpenPanel: toggleOpenPanel,
      onChange: this.onChange,
      onFontChange: this.onFontChange,
      theme: theme
    }), activeTab === 'component' && tabs.component.selectedComponents.length > 0 && /*#__PURE__*/_react.default.createElement(_ComponentsEditor.ComponentsEditor, {
      selectedComponents: tabs.component.selectedComponents,
      onComponentThemeChange: this.onComponentThemeChange,
      theme: theme
    }), activeTab === 'component' && tabs.component.selectedComponents.length === 0 && /*#__PURE__*/_react.default.createElement(_falconUi.Box, {
      fontSize: "md"
    }, "There are no components selected currenty, ", /*#__PURE__*/_react.default.createElement("br", null), "use component finder", /*#__PURE__*/_react.default.createElement(_falconUi.Icon, {
      onClick: toggleFinder,
      mx: "sm",
      stroke: finderActive ? 'primary' : 'black',
      src: "finder"
    }), "to select one."), activeTab === 'download' && /*#__PURE__*/_react.default.createElement(_ThemeDownloader.ThemeDownloader, {
      currentTheme: theme,
      initialTheme: initialTheme
    }), activeTab === 'presets' && /*#__PURE__*/_react.default.createElement(_ThemePresets.ThemePresets, {
      activePreset: tabs.presets.active,
      onPresetChange: this.onPresetChange
    }))), /*#__PURE__*/_react.default.createElement(_falconUi.Box, (0, _extends2.default)({
      position: "absolute"
    }, (_ref = {}, _ref[side] = '100%', _ref), {
      top: "calc(50% - 35px)",
      display: "flex",
      bg: "white",
      alignItems: "center",
      justifyContent: "center",
      boxShadow: "subtle",
      flexDirection: "column",
      p: "sm",
      css: side === 'right' ? {
        borderTopLeftRadius: 8,
        borderBottomLeftRadius: 8,
        boxShadow: '-2px 5px 5px rgba(0,0,0,.1)'
      } : {
        borderTopRightRadius: 8,
        borderBottomRightRadius: 8,
        boxShadow: '2px 5px 5px rgba(0,0,0,.1)'
      }
    }), /*#__PURE__*/_react.default.createElement(_falconUi.Box, {
      title: (visible ? 'Close' : 'Open') + " theme editor",
      css: {
        cursor: 'pointer'
      },
      onClick: toggleVisibility
    }, /*#__PURE__*/_react.default.createElement(_falconUi.Icon, {
      src: "theme",
      fill: visible ? 'primary' : 'black',
      stroke: visible ? 'primary' : 'black'
    })), enableComponentFinder && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_falconUi.Divider, {
      m: "xs",
      css: {
        width: '100%'
      }
    }), /*#__PURE__*/_react.default.createElement(_falconUi.Box, {
      title: "Select a themable component in the page to inspect its theme",
      onClick: toggleFinder
    }, /*#__PURE__*/_react.default.createElement(_falconUi.Icon, {
      stroke: finderActive ? 'primary' : 'black',
      src: "finder"
    }))))), finderActive && /*#__PURE__*/_react.default.createElement(_ComponentFinder.ComponentFinder, {
      onChange: this.props.selectComponents
    }));
  };

  return ThemeEditor;
}(_react.default.Component);

exports.ThemeEditor = ThemeEditor;
ThemeEditor.defaultProps = {
  enableComponentFinder: true,
  side: 'right'
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,