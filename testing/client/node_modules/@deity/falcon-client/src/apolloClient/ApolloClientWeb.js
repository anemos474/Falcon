import { ApolloClient, ApolloLink } from '@apollo/client';
import { CachePersistor, LocalStorageWrapper } from 'apollo3-cache-persist';
import deepMerge from 'deepmerge';
import { defaultOptions } from './ApolloClient';
import { getApolloClientCache } from './getApolloClientDefaultCache';
import { getApolloClientUploadLink } from './getApolloClientUploadLink';
import { getFalconScopeIdLink } from './getFalconScopeLink';
import { getOnlyFromCacheWhenOfflineLink, isOnline } from './getOnlyFromCacheWhenOfflineLink';

/**
 * @typedef {object} RestoreApolloCacheConfig
 * @property {import('@apollo/client/cache').NormalizedCacheObject} normalizedCache ApolloClient normalized cache
 * @property {import('@apollo/client/cache').IntrospectionResultData} [fragmentMatcherData]
 */

/**
 * Restore an ApolloClient Cache instance with the provided arguments
 * @param {RestoreApolloCacheConfig} config Falcon configuration for creating ApolloClient instance
 * @returns {Promise<import('@apollo/client/cache').InMemoryCache>}
 */
export const restoreApolloCache = config => {
  const { fragmentMatcherData, normalizedCache } = config;

  const cache = getApolloClientCache(fragmentMatcherData);
  const cachePersistor = new CachePersistor({
    cache,
    storage: new LocalStorageWrapper(window.localStorage),
    key: '@deity/falcon-client/apollo-cache',
    debounce: 1000
  });

  if (isOnline()) {
    return cachePersistor.purge().then(() => {
      cache.restore(normalizedCache);

      return cache;
    });
  }

  return cachePersistor.restore().then(() => cache);
};

/**
 * @typedef {object} ApolloClientWebParams
 * @property {import('@apollo/client/cache').InMemoryCache} cache
 * @property {} resolvers
 * @property {import('@apollo/client').ApolloLink[]} [extraLinks=[]]
 * @property {import('@apollo/client').ApolloClientOptions} config configuration of ApolloClient
 * @property {{}} [headers={}]
 * @property {import('./getFalconScopeLink').FalconScopeIdProvider} [falconScopeIdProvider]
 */

/**
 * Creates an ApolloClient instance with the provided arguments
 * @param {ApolloClientWebParams} params Falcon configuration for creating ApolloClient instance
 * @returns {import('@apollo/client').ApolloClient}
 */
export function ApolloClientWeb(params) {
  const { cache, resolvers, extraLinks = [], config, headers = {}, falconScopeIdProvider } = params;
  const { httpLink, connectToDevTools, ...configRest } = config;

  /** @type {import('@apollo/client').ApolloClientOptions<any>} */
  const options = {
    ssrMode: false,
    connectToDevTools,
    cache,
    link: ApolloLink.from(
      [
        getOnlyFromCacheWhenOfflineLink(),
        ...extraLinks,
        falconScopeIdProvider && getFalconScopeIdLink(falconScopeIdProvider),
        getApolloClientUploadLink({
          httpLink: { ...httpLink },
          headers
        })
      ].filter(x => x)
    ),
    resolvers,
    defaultOptions: { ...defaultOptions }
  };

  return new ApolloClient(deepMerge.all([options, configRest], { clone: false }));
}
