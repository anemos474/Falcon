import { ApolloClient, ApolloLink } from '@apollo/client';
import fetch from 'node-fetch';
import deepMerge from 'deepmerge';
import { GET_CONFIG } from '@deity/falcon-front-kit';
import { GET_GEO_LOCATION } from '@deity/falcon-data';
import { pick } from '../components';
import { defaultOptions } from './ApolloClient';
import { apolloLinkServerError } from './apolloLinkServerError';
import { apolloLinkServerTiming } from './apolloLinkServerTiming';
import { getApolloClientCache } from './getApolloClientDefaultCache';
import { getApolloClientUploadLink } from './getApolloClientUploadLink';
import { getFalconScopeIdLink } from './getFalconScopeLink';

/**
 * @typedef {object} RestoreApolloCacheConfig
 * @property {object} [cacheInitialData] Apollo Cache initial data
 * @property {import('@apollo/client/cache').IntrospectionResultData} [fragmentMatcherData]
 */

/**
 * Restore an ApolloClient Cache instance with the provided arguments
 * @param {RestoreApolloCacheConfig} config Falcon configuration for creating ApolloClient instance
 * @returns {Promise<import('@apollo/client/cache').InMemoryCache>}
 */
export const restoreApolloCache = config => {
  const { cacheInitialData, fragmentMatcherData } = config;

  const cache = getApolloClientCache(fragmentMatcherData);

  cache.writeQuery({
    query: GET_CONFIG,
    data: { config: cacheInitialData.config }
  });
  cache.writeQuery({
    query: GET_GEO_LOCATION,
    data: { geoLocation: cacheInitialData.geoLocation }
  });

  return cache;
};

/**
 * @typedef {object} ApolloClientNodeParams
 * @property {import('koa').Context} ctx koa context
 * @property {import('@apollo/client/cache').InMemoryCache} cache
 * @property {object} resolvers
 * @property {import('@apollo/client').ApolloLink[]} [extraLinks=[]]
 * @property {import('@apollo/client').ApolloClientOptions} config configuration of ApolloClient
 * @property {{}} [headers={}]
 * @property {string} graphqlUrl,
 * @property {import('./getFalconScopeLink').FalconScopeIdProvider} [falconScopeIdProvider]
 */

/**
 * Creates an ApolloClient instance with the provided arguments
 * @param {ApolloClientNodeParams} params Falcon configuration for creating ApolloClient instance
 * @returns {import('@apollo/client').ApolloClient}
 */
export function ApolloClientNode(params) {
  const { ctx, cache, resolvers, extraLinks = [], config, graphqlUrl, headers = {}, falconScopeIdProvider } = params;
  const { httpLink, ...configRest } = config;

  const apolloUploadLink = getApolloClientUploadLink({
    httpLink: {
      ...httpLink,
      uri: graphqlUrl
    },
    headers: {
      ...pick(ctx.headers, ['accept-encoding', 'accept-language', 'cookie', 'user-agent', 'x-forwarded-for']),
      ...headers
    },
    fetch
  });

  /** @type {import('@apollo/client').ApolloClientOptions<any>} */
  const options = {
    ssrMode: true,
    connectToDevTools: false,
    cache,
    link: ApolloLink.from([
      apolloLinkServerTiming(ctx),
      apolloLinkServerError(ctx),
      ...extraLinks,
      getFalconScopeIdLink(falconScopeIdProvider),
      apolloUploadLink
    ]),
    resolvers,
    defaultOptions: { ...defaultOptions }
  };

  return new ApolloClient(deepMerge.all([options, configRest], { clone: false }));
}
