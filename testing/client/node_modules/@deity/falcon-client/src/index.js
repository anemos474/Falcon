import 'source-map-support/register';
import http from 'http';
import https from 'https';
import fs from 'fs';
import Logger from '@deity/falcon-logger';

async function falconWebServer() {
  const { Server } = require('./server');
  const { default: App, apolloClientOptions } = require('./clientApp');
  const clientBootstrap = require('./clientApp/bootstrap').default;
  const bootstrap = await clientBootstrap();
  const { config } = bootstrap;

  if (config.appName) {
    Logger.setApp(config.appName);
  }
  if (config.logLevel) {
    Logger.setLogLevel(config.logLevel);
  }

  process.on('unhandledRejection', reason => {
    Logger.error(reason, 'Unhandled Promise Rejection');
  });

  process.on('uncaughtException', ex => {
    Logger.error(ex, 'Uncaught Exception');
  });

  /* eslint-disable */
  const webpackAssets =
    process.env.NODE_ENV === 'production'
      ? require(process.env.WEBPACK_ASSETS)
      : __non_webpack_require__(process.env.WEBPACK_ASSETS);
  /* eslint-enable */

  /**
   * Creates an instance of Falcon web server
   * @param {ServerAppConfig} props Application parameters
   * @returns {WebServer} Falcon web server
   */
  return Server({ App, apolloClientOptions, bootstrap, webpackAssets });
}

function getHttpsConfiguration() {
  const enabled = `${process.env.HTTPS_ENABLED}` === 'true';

  return {
    enabled,
    key: enabled ? process.env.HTTPS_KEY_PATH : undefined,
    cert: enabled ? process.env.HTTPS_CERT_PATH : undefined
  };
}

(async () => {
  const server = await falconWebServer();
  let currentWebServerHandler = server.callback();

  const httpsConfig = getHttpsConfiguration();

  // https://github.com/koajs/koa/blob/master/docs/api/index.md#appcallback
  const serverObj =
    httpsConfig.enabled === false
      ? http.createServer(currentWebServerHandler)
      : https.createServer(
          { key: fs.readFileSync(httpsConfig.key), cert: fs.readFileSync(httpsConfig.cert) },
          currentWebServerHandler
        );
  serverObj.listen(server.port, error => {
    if (error) {
      Logger.error(error);
    }
    Logger.info(`🚀  Client ready at ${httpsConfig.enabled ? 'https' : 'http'}://localhost:${server.port}`);
    server.started();
  });

  if (module.hot) {
    Logger.info('✅  Server-side HMR Enabled!');

    module.hot.accept(['./server', './clientApp', './clientApp/bootstrap'], () => {
      Logger.info('🔁  HMR: Reloading server...');

      (async () => {
        try {
          const newServer = await falconWebServer();
          const newHandler = newServer.callback();
          serverObj.removeListener('request', currentWebServerHandler);
          serverObj.on('request', newHandler);
          currentWebServerHandler = newHandler;
          Logger.info('✅  HMR: Server reloaded.');
        } catch (error) {
          Logger.info('🛑  HMR: Reloading server failed, syntax error!');
        }
      })();
    });
  }
})();
