import noCacheHeadersMiddleware from '../noCacheHeadersMiddleware';
import apolloClientProvider from './apolloClientProvider';
import falconScope from './falconScopeMiddleware';
import geoLocation from './geoLocationMiddleware';
import ssr from './ssrMiddleware';
import appShell from './appShellMiddleware';
import appHtml from './appHtmlMiddleware';
import i18next from './i18nextMiddleware';
import assets from './assetsMiddleware';

/**
 * @typedef {object} RenderAppShell
 * @property {object} config App configuration
 * @property {object} webpackAssets webpack assets
 */

/**
 * Configure App Shell rendering middlewares
 * @param {RenderAppShell} params params
 * @returns {function(ctx: object, next: function)[]} Koa middlewares
 */
export function renderAppShell({ webpackAssets, config, apolloClientOptions }) {
  const { apolloClient, graphqlUrl } = config;

  return [
    noCacheHeadersMiddleware(),
    assets({ webpackAssets }),
    geoLocation(),
    apolloClientProvider({
      config: apolloClient,
      fragmentMatcherData: apolloClientOptions?.fragmentMatcherData,
      cacheInitialData: { config },
      graphqlUrl
    }),
    appShell({ config }),
    appHtml({ config })
  ];
}

/**
 * @typedef {object} RenderApp
 * @property {Function} App React Component
 * @property {object} config App configuration
 * @property {object} webpackAssets webpack assets
 */

/**
 * Configure App rendering middlewares
 * @param {RenderApp} params params
 * @returns {function(ctx: object, next: function)[]} Koa middlewares
 */
export async function renderApp({ webpackAssets, config, App, apolloClientOptions }) {
  const { i18n, serverSideRendering, apolloClient, graphqlUrl, falconScope: falconScopeConfig } = config;

  return [
    noCacheHeadersMiddleware(),
    assets({ webpackAssets }),
    geoLocation(),
    apolloClientProvider({
      config: apolloClient,
      fragmentMatcherData: apolloClientOptions?.fragmentMatcherData,
      cacheInitialData: { config },
      graphqlUrl
    }),
    falconScope({ defaultId: falconScopeConfig.defaultId }),
    await i18next({ ...i18n }),
    serverSideRendering
      ? ssr({
          config,
          App,
          cacheInitialData: { ...config }
        })
      : appShell({ config }),
    appHtml({ config })
  ].filter(x => x);
}
