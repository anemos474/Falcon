import {
  filterOutNonBreakpointBlockThemingProps,
  extractBreakpointBlockThemingProps,
  mapBreakpointBlockThemingPropsToBaseThemmingProps
} from '../formatBreakpointCssBlocks';

describe('filterOutNonBreakpointBlockThemingProps', () => {
  const breakpointsNames = ['sm', 'md', 'lg'];

  it('should return empty object when empty object provided', () => {
    const result = filterOutNonBreakpointBlockThemingProps(breakpointsNames, {});

    expect(result).toStrictEqual({});
  });

  it('should return empty object when only breakpoint block theming props defined', () => {
    const result = filterOutNonBreakpointBlockThemingProps(breakpointsNames, {
      sm: { color: 'primary' },
      md: { color: 'secondary' },
      lg: { color: 'error' }
    });

    expect(result).toStrictEqual({});
  });

  it('should return only non breakpoint block theming props when breakpoint and theming props defined', () => {
    const result = filterOutNonBreakpointBlockThemingProps(breakpointsNames, {
      sm: { color: 'primary' },
      md: { color: 'secondary' },
      lg: { color: 'error' },
      color: { md: 'primary' },
      bg: 'errorText'
    });

    expect(result).toStrictEqual({
      color: { md: 'primary' },
      bg: 'errorText'
    });
  });

  it('should return unmodified props when only theming props defined', () => {
    const result = filterOutNonBreakpointBlockThemingProps(breakpointsNames, {
      color: { md: 'primary' },
      bg: 'errorText'
    });

    expect(result).toStrictEqual({
      color: { md: 'primary' },
      bg: 'errorText'
    });
  });
});

describe('extractBreakpointBlockThemingProps', () => {
  const breakpointsNames = ['sm', 'md', 'lg'];

  it('should return empty object when empty object provided', () => {
    const result = extractBreakpointBlockThemingProps(breakpointsNames, {});

    expect(result).toStrictEqual({});
  });

  it('should return unmodified props when only breakpoint block theming props defined', () => {
    const result = extractBreakpointBlockThemingProps(breakpointsNames, {
      sm: { color: 'primary' },
      md: { color: 'secondary' },
      lg: { color: 'error' }
    });

    expect(result).toStrictEqual({
      sm: { color: 'primary' },
      md: { color: 'secondary' },
      lg: { color: 'error' }
    });
  });

  it('should return only breakpoint block theming props when breakpoint and theming props defined', () => {
    const result = extractBreakpointBlockThemingProps(breakpointsNames, {
      sm: { color: 'primary' },
      md: { color: 'secondary' },
      lg: { color: 'error' },
      color: { md: 'primary' },
      bg: 'errorText'
    });

    expect(result).toStrictEqual({
      sm: { color: 'primary' },
      md: { color: 'secondary' },
      lg: { color: 'error' }
    });
  });

  it('should return empty props when only theming props defined', () => {
    const result = extractBreakpointBlockThemingProps(breakpointsNames, {
      color: { md: 'primary' },
      bg: 'errorText'
    });

    expect(result).toStrictEqual({});
  });
});

describe('mapBreakpointBlockThemingPropsToBaseThemmingProps', () => {
  const breakpointsNames = ['sm', 'md', 'lg'];

  it('should return empty object when empty object provided', () => {
    const result = mapBreakpointBlockThemingPropsToBaseThemmingProps(breakpointsNames, {});

    expect(result).toStrictEqual({});
  });

  it('should return correct base theming props when breaking block theming props provided', () => {
    const result = mapBreakpointBlockThemingPropsToBaseThemmingProps(breakpointsNames, {
      sm: { color: 'primary' },
      md: { color: 'secondary' },
      lg: { color: 'error', bg: 'white' }
    });

    expect(result).toStrictEqual({
      color: { sm: 'primary', md: 'secondary', lg: 'error' },
      bg: { lg: 'white' }
    });
  });

  it('should ignore all non braking block theming props if provided', () => {
    const result = mapBreakpointBlockThemingPropsToBaseThemmingProps(breakpointsNames, {
      sm: { color: 'primary' },
      md: { color: 'secondary' },
      lg: { color: 'error', bg: 'white' },
      color: 'black'
    } as any);

    expect(result).toStrictEqual({
      color: { sm: 'primary', md: 'secondary', lg: 'error' },
      bg: { lg: 'white' }
    });
  });

  it('should ignore all non themable props defined in braking block', () => {
    const result = mapBreakpointBlockThemingPropsToBaseThemmingProps(breakpointsNames, {
      sm: { color: 'primary' },
      md: { color: 'secondary' },
      lg: { color: 'error', bg: 'white', nonThemingProp: 'test' }
    } as any);

    expect(result).toStrictEqual({
      color: { sm: 'primary', md: 'secondary', lg: 'error' },
      bg: { lg: 'white' }
    });
  });
});
