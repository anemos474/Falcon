import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React, { useState, useCallback, useRef, useEffect, useContext } from 'react';
import { themed } from '../theme';
import { Box } from './Box';
import { Icon } from './Icon';

var getHtmlChildren = function getHtmlChildren(el) {
  return Array.from(el.children).filter(function (child) {
    return child instanceof HTMLElement;
  });
};

var DropdownContext = /*#__PURE__*/React.createContext({});

var DropdownInnerDOM = function DropdownInnerDOM(_ref) {
  var children = _ref.children,
      onChange = _ref.onChange,
      id = _ref.id,
      rest = _objectWithoutPropertiesLoose(_ref, ["children", "onChange", "id"]);

  var _useState = useState(false),
      open = _useState[0],
      setOpen = _useState[1];

  var onChangeAndClose = function onChangeAndClose(value) {
    if (onChange) onChange(value);
    setOpen(false);
  };

  var menu = useRef(null);
  var label = useRef(null);

  var _useState2 = useState(-1),
      selectedIndex = _useState2[0],
      selectIndex = _useState2[1];

  var onKeyDown = useCallback(function (event) {
    if (menu.current) {
      var options = getHtmlChildren(menu.current);
      var preventDefault = true;

      switch (event.keyCode) {
        // up
        case 38:
          {
            selectIndex(function (s) {
              return Math.max(0, s - 1);
            });
            break;
          }
        // down

        case 40:
          {
            selectIndex(function (s) {
              return Math.min(s + 1, options.length);
            });
            break;
          }
        // escape

        case 27:
          {
            setOpen(false);
            if (label.current) label.current.focus();
            break;
          }

        default:
          {
            preventDefault = false;
          }
      }

      if (preventDefault) {
        event.preventDefault();
        event.stopPropagation();
      }
    }
  }, []);
  useEffect(function () {
    if (menu.current) {
      var options = getHtmlChildren(menu.current);
      var selected = options[selectedIndex];

      if (selected) {
        var selectedButton = selected.getElementsByTagName('button')[0];
        if (selectedButton) selectedButton.focus();
      }
    }
  }, [selectedIndex]);
  useEffect(function () {
    if (!open) selectIndex(-1);
  }, [open]);
  return /*#__PURE__*/React.createElement(DropdownContext.Provider, {
    value: {
      open: open,
      setOpen: setOpen,
      onChange: onChangeAndClose,
      menu: menu,
      label: label,
      id: id
    }
  }, /*#__PURE__*/React.createElement(Box, _extends({
    id: id,
    "aria-labelledby": id && id + "-label",
    onBlur: function onBlur(event) {
      // Only trigger close if no inner element has focus either; https://stackoverflow.com/a/47563344/8521718
      if (!event.currentTarget.contains(event.relatedTarget)) setOpen(false);
    },
    onKeyDown: onKeyDown,
    "aria-haspopup": "listbox",
    position: "relative"
  }, rest), children));
};

export var Dropdown = /*#__PURE__*/themed({
  tag: DropdownInnerDOM,
  defaultTheme: {
    dropdown: {
      display: 'flex',
      borderRadius: 'medium',
      border: 'regular',
      borderColor: 'secondaryDark',
      css: function css(_ref2) {
        var theme = _ref2.theme;
        return {
          userSelect: 'none',
          position: 'relative',
          ':hover, :focus': {
            borderColor: theme.colors.primary
          }
        };
      }
    }
  }
});

var DropdownLabelInnerDOM = function DropdownLabelInnerDOM(_ref3) {
  var children = _ref3.children,
      rest = _objectWithoutPropertiesLoose(_ref3, ["children"]);

  var _useContext = useContext(DropdownContext),
      open = _useContext.open,
      id = _useContext.id,
      setOpen = _useContext.setOpen,
      label = _useContext.label;

  var toggle = useCallback(function () {
    setOpen(function (exp) {
      return !exp;
    });
  }, [setOpen]);
  return /*#__PURE__*/React.createElement(Box, _extends({
    as: "button",
    id: id && id + "-label",
    type: "button",
    onClick: toggle,
    ref: label
  }, rest), /*#__PURE__*/React.createElement(Box, {
    flex: "1"
  }, children), /*#__PURE__*/React.createElement(Icon, {
    src: open ? 'dropdownArrowUp' : 'dropdownArrowDown',
    fallback: open ? '▴' : '▾'
  }));
};

export var DropdownLabel = /*#__PURE__*/themed({
  tag: DropdownLabelInnerDOM,
  defaultTheme: {
    dropdownLabel: {
      display: 'flex',
      py: 'xs',
      px: 'sm',
      fontSize: 'sm',
      justifyContent: 'space-between',
      css: {
        width: '100%',
        cursor: 'pointer',
        border: 'none',
        background: 'none',
        color: 'inherit'
      }
    }
  }
});

var DropdownMenuInnerDOM = function DropdownMenuInnerDOM(props) {
  var _useContext2 = useContext(DropdownContext),
      open = _useContext2.open,
      id = _useContext2.id,
      menu = _useContext2.menu;

  return open ? /*#__PURE__*/React.createElement(Box, _extends({
    as: "ul",
    ref: menu,
    "aria-controls": id,
    "aria-labelledby": id && id + "-label",
    role: "listbox",
    tabIndex: -1,
    display: open ? 'block' : 'none'
  }, props)) : null;
};

export var DropdownMenu = /*#__PURE__*/themed({
  tag: DropdownMenuInnerDOM,
  defaultTheme: {
    dropdownMenu: {
      m: 'none',
      p: 'none',
      borderRadius: 'medium',
      boxShadow: 'subtle',
      bg: 'white',
      css: function css(_ref4) {
        var theme = _ref4.theme;
        return {
          position: 'absolute',
          listStyle: 'none',
          top: 'calc(100% + 1px)',
          left: 0,
          right: 0,
          zIndex: theme.zIndex.dropDownMenu
        };
      },
      variants: {
        above: {
          css: {
            top: 'auto',
            bottom: 'calc(100% + 1px)'
          }
        }
      }
    }
  }
});

var DropdownMenuItemInnerDOM = function DropdownMenuItemInnerDOM(_ref5) {
  var children = _ref5.children,
      props = _objectWithoutPropertiesLoose(_ref5, ["children"]);

  var _useContext3 = useContext(DropdownContext),
      onChange = _useContext3.onChange,
      label = _useContext3.label;

  var select = useCallback(function (e) {
    if (onChange) onChange(props.value);
    if (e) e.stopPropagation();
    if (label) label.current.focus();
  }, [onChange, props.value, label]);
  return /*#__PURE__*/React.createElement(Box, _extends({
    as: "li",
    role: "option"
  }, props), /*#__PURE__*/React.createElement(Box, {
    as: "button",
    type: "button",
    tabIndex: -1,
    onClick: select
  }, children));
};

export var DropdownMenuItem = /*#__PURE__*/themed({
  tag: DropdownMenuItemInnerDOM,
  defaultProps: {
    value: undefined
  },
  defaultTheme: {
    dropdownMenuItem: {
      css: function css(_ref6) {
        var theme = _ref6.theme;
        return {
          '> button': {
            width: '100%',
            padding: theme.spacing.xs,
            textAlign: 'left',
            border: 'none',
            background: 'none',
            color: 'inherit',
            cursor: 'pointer'
          },
          ':hover, :focus': {
            background: "" + theme.colors.primaryLight
          }
        };
      }
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,