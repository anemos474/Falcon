import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React from 'react';
import { ThemeProvider as Provider } from 'emotion-theming';
import { Global, CacheProvider } from '@emotion/core';
import createCache from '@emotion/cache';
import { createTheme } from '../theme';
import { Root } from './Root'; // re-export withTheme from emotion so theme can be accessed from code

export { withTheme } from 'emotion-theming'; // IMPORTANT: those styles get injected as global styles
// every other reset style can be applied on Root component but not body margin

var tinyNormalizeStyles = {
  body: {
    margin: 0
  }
}; // IMPORTANT: temporary hack/workaround for not rendering styles
// when using emotion together with react-apollo after error on the server occured
// falcon-ui ThemeProvider now renders CacheProvider with always new cache provided when running on the server
// analogous to https://github.com/emotion-js/emotion/blob/master/packages/core/src/context.js#L54

var isServer = typeof document === 'undefined';
var cache = /*#__PURE__*/createCache();
export var ThemeProvider = function ThemeProvider(_ref) {
  var _ref$theme = _ref.theme,
      theme = _ref$theme === void 0 ? createTheme() : _ref$theme,
      _ref$globalCss = _ref.globalCss,
      globalCss = _ref$globalCss === void 0 ? tinyNormalizeStyles : _ref$globalCss,
      _ref$withoutRoot = _ref.withoutRoot,
      withoutRoot = _ref$withoutRoot === void 0 ? false : _ref$withoutRoot,
      rest = _objectWithoutPropertiesLoose(_ref, ["theme", "globalCss", "withoutRoot"]);

  return /*#__PURE__*/React.createElement(CacheProvider, {
    value: isServer ? createCache() : cache
  }, /*#__PURE__*/React.createElement(Provider, {
    theme: theme
  }, /*#__PURE__*/React.createElement(Global, {
    styles: globalCss
  }), withoutRoot ? rest.children : /*#__PURE__*/React.createElement(Root, rest)));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnRzL1RoZW1lUHJvdmlkZXIudHN4Il0sIm5hbWVzIjpbIlJlYWN0IiwiVGhlbWVQcm92aWRlciIsIlByb3ZpZGVyIiwiR2xvYmFsIiwiQ2FjaGVQcm92aWRlciIsImNyZWF0ZUNhY2hlIiwiY3JlYXRlVGhlbWUiLCJSb290Iiwid2l0aFRoZW1lIiwidGlueU5vcm1hbGl6ZVN0eWxlcyIsImJvZHkiLCJtYXJnaW4iLCJpc1NlcnZlciIsImRvY3VtZW50IiwiY2FjaGUiLCJ0aGVtZSIsImdsb2JhbENzcyIsIndpdGhvdXRSb290IiwicmVzdCIsImNoaWxkcmVuIl0sIm1hcHBpbmdzIjoiO0FBQUEsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjtBQUNBLFNBQVNDLGFBQWEsSUFBSUMsUUFBMUIsUUFBMEMsaUJBQTFDO0FBQ0EsU0FBU0MsTUFBVCxFQUFpQkMsYUFBakIsUUFBc0MsZUFBdEM7QUFDQSxPQUFPQyxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLFNBQVNDLFdBQVQsUUFBOEMsVUFBOUM7QUFDQSxTQUFTQyxJQUFULFFBQXFCLFFBQXJCLEMsQ0FFQTs7QUFDQSxTQUFTQyxTQUFULFFBQTBCLGlCQUExQixDLENBRUE7QUFDQTs7QUFDQSxJQUFNQyxtQkFBOEIsR0FBRztBQUNyQ0MsRUFBQUEsSUFBSSxFQUFFO0FBQ0pDLElBQUFBLE1BQU0sRUFBRTtBQURKO0FBRCtCLENBQXZDLEMsQ0FLQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxJQUFNQyxRQUFRLEdBQUcsT0FBT0MsUUFBUCxLQUFvQixXQUFyQztBQUNBLElBQU1DLEtBQUssZ0JBQUdULFdBQVcsRUFBekI7QUFPQSxPQUFPLElBQU1KLGFBQTJDLEdBQUcsU0FBOUNBLGFBQThDO0FBQUEsd0JBQ3pEYyxLQUR5RDtBQUFBLE1BQ3pEQSxLQUR5RCwyQkFDakRULFdBQVcsRUFEc0M7QUFBQSw0QkFFekRVLFNBRnlEO0FBQUEsTUFFekRBLFNBRnlELCtCQUU3Q1AsbUJBRjZDO0FBQUEsOEJBR3pEUSxXQUh5RDtBQUFBLE1BR3pEQSxXQUh5RCxpQ0FHM0MsS0FIMkM7QUFBQSxNQUl0REMsSUFKc0Q7O0FBQUEsc0JBTXpELG9CQUFDLGFBQUQ7QUFBZSxJQUFBLEtBQUssRUFBRU4sUUFBUSxHQUFHUCxXQUFXLEVBQWQsR0FBbUJTO0FBQWpELGtCQUNFLG9CQUFDLFFBQUQ7QUFBVSxJQUFBLEtBQUssRUFBRUM7QUFBakIsa0JBQ0Usb0JBQUMsTUFBRDtBQUFRLElBQUEsTUFBTSxFQUFFQztBQUFoQixJQURGLEVBRUdDLFdBQVcsR0FBR0MsSUFBSSxDQUFDQyxRQUFSLGdCQUFtQixvQkFBQyxJQUFELEVBQVVELElBQVYsQ0FGakMsQ0FERixDQU55RDtBQUFBLENBQXBEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFRoZW1lUHJvdmlkZXIgYXMgUHJvdmlkZXIgfSBmcm9tICdlbW90aW9uLXRoZW1pbmcnO1xuaW1wb3J0IHsgR2xvYmFsLCBDYWNoZVByb3ZpZGVyIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgY3JlYXRlQ2FjaGUgZnJvbSAnQGVtb3Rpb24vY2FjaGUnO1xuaW1wb3J0IHsgY3JlYXRlVGhlbWUsIFRoZW1lLCBDU1NPYmplY3QgfSBmcm9tICcuLi90aGVtZSc7XG5pbXBvcnQgeyBSb290IH0gZnJvbSAnLi9Sb290JztcblxuLy8gcmUtZXhwb3J0IHdpdGhUaGVtZSBmcm9tIGVtb3Rpb24gc28gdGhlbWUgY2FuIGJlIGFjY2Vzc2VkIGZyb20gY29kZVxuZXhwb3J0IHsgd2l0aFRoZW1lIH0gZnJvbSAnZW1vdGlvbi10aGVtaW5nJztcblxuLy8gSU1QT1JUQU5UOiB0aG9zZSBzdHlsZXMgZ2V0IGluamVjdGVkIGFzIGdsb2JhbCBzdHlsZXNcbi8vIGV2ZXJ5IG90aGVyIHJlc2V0IHN0eWxlIGNhbiBiZSBhcHBsaWVkIG9uIFJvb3QgY29tcG9uZW50IGJ1dCBub3QgYm9keSBtYXJnaW5cbmNvbnN0IHRpbnlOb3JtYWxpemVTdHlsZXM6IENTU09iamVjdCA9IHtcbiAgYm9keToge1xuICAgIG1hcmdpbjogMFxuICB9XG59O1xuLy8gSU1QT1JUQU5UOiB0ZW1wb3JhcnkgaGFjay93b3JrYXJvdW5kIGZvciBub3QgcmVuZGVyaW5nIHN0eWxlc1xuLy8gd2hlbiB1c2luZyBlbW90aW9uIHRvZ2V0aGVyIHdpdGggcmVhY3QtYXBvbGxvIGFmdGVyIGVycm9yIG9uIHRoZSBzZXJ2ZXIgb2NjdXJlZFxuLy8gZmFsY29uLXVpIFRoZW1lUHJvdmlkZXIgbm93IHJlbmRlcnMgQ2FjaGVQcm92aWRlciB3aXRoIGFsd2F5cyBuZXcgY2FjaGUgcHJvdmlkZWQgd2hlbiBydW5uaW5nIG9uIHRoZSBzZXJ2ZXJcbi8vIGFuYWxvZ291cyB0byBodHRwczovL2dpdGh1Yi5jb20vZW1vdGlvbi1qcy9lbW90aW9uL2Jsb2IvbWFzdGVyL3BhY2thZ2VzL2NvcmUvc3JjL2NvbnRleHQuanMjTDU0XG5jb25zdCBpc1NlcnZlciA9IHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCc7XG5jb25zdCBjYWNoZSA9IGNyZWF0ZUNhY2hlKCk7XG5cbmV4cG9ydCB0eXBlIFRoZW1lUHJvdmlkZXJQcm9wcyA9IHtcbiAgdGhlbWU/OiBUaGVtZTtcbiAgZ2xvYmFsQ3NzPzogQ1NTT2JqZWN0IHwgKCh0aGVtZTogVGhlbWUpID0+IENTU09iamVjdCk7XG4gIHdpdGhvdXRSb290PzogYm9vbGVhbjtcbn07XG5leHBvcnQgY29uc3QgVGhlbWVQcm92aWRlcjogUmVhY3QuRkM8VGhlbWVQcm92aWRlclByb3BzPiA9ICh7XG4gIHRoZW1lID0gY3JlYXRlVGhlbWUoKSxcbiAgZ2xvYmFsQ3NzID0gdGlueU5vcm1hbGl6ZVN0eWxlcyxcbiAgd2l0aG91dFJvb3QgPSBmYWxzZSxcbiAgLi4ucmVzdFxufSkgPT4gKFxuICA8Q2FjaGVQcm92aWRlciB2YWx1ZT17aXNTZXJ2ZXIgPyBjcmVhdGVDYWNoZSgpIDogY2FjaGV9PlxuICAgIDxQcm92aWRlciB0aGVtZT17dGhlbWV9PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e2dsb2JhbENzc30gLz5cbiAgICAgIHt3aXRob3V0Um9vdCA/IHJlc3QuY2hpbGRyZW4gOiA8Um9vdCB7Li4ucmVzdH0gLz59XG4gICAgPC9Qcm92aWRlcj5cbiAgPC9DYWNoZVByb3ZpZGVyPlxuKTtcbiJdfQ==