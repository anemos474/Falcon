import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React from 'react';
import PropTypes from 'prop-types';
import { withTheme } from 'emotion-theming';
import { themed } from '../theme';
var ENV = process.env.NODE_ENV;
export var IconRenderer = /*#__PURE__*/themed({
  tag: 'svg',
  defaultProps: {
    // https://stackoverflow.com/questions/18646111/disable-onfocus-event-for-svg-element
    focusable: 'false'
  },
  defaultTheme: {
    icon: {
      size: 'lg',
      stroke: 'primary'
    }
  }
});

var IconInner = function IconInner(props) {
  var src = props.src,
      fallback = props.fallback,
      theme = props.theme,
      rest = _objectWithoutPropertiesLoose(props, ["src", "fallback", "theme"]);

  var icons = theme.icons; // TODO: temporary fix for https://github.com/deity-io/falcon/issues/693, remove when resolved

  if (!icons) {
    return null;
  }

  if (icons[src]) {
    var _icons$src = icons[src],
        icon = _icons$src.icon,
        otherProps = _objectWithoutPropertiesLoose(_icons$src, ["icon"]);

    return /*#__PURE__*/React.createElement(IconRenderer, _extends({
      as: icon
    }, otherProps, rest));
  }

  if (fallback) {
    return fallback;
  }

  if (ENV !== 'production') {
    console.error("There is no icon \"" + src + "\" defined in your theme (\"theme.icons\"), nor has a fallback icon been defined.");
  }

  return null;
};

export var Icon = /*#__PURE__*/withTheme(IconInner);
Icon.propTypes = {
  src: PropTypes.string.isRequired
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnRzL0ljb24udHN4Il0sIm5hbWVzIjpbIlJlYWN0IiwiUHJvcFR5cGVzIiwid2l0aFRoZW1lIiwidGhlbWVkIiwiRU5WIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiSWNvblJlbmRlcmVyIiwidGFnIiwiZGVmYXVsdFByb3BzIiwiZm9jdXNhYmxlIiwiZGVmYXVsdFRoZW1lIiwiaWNvbiIsInNpemUiLCJzdHJva2UiLCJJY29uSW5uZXIiLCJwcm9wcyIsInNyYyIsImZhbGxiYWNrIiwidGhlbWUiLCJyZXN0IiwiaWNvbnMiLCJvdGhlclByb3BzIiwiY29uc29sZSIsImVycm9yIiwiSWNvbiIsInByb3BUeXBlcyIsInN0cmluZyIsImlzUmVxdWlyZWQiXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxTQUFTQyxTQUFULFFBQTBCLGlCQUExQjtBQUNBLFNBQVNDLE1BQVQsUUFBdUMsVUFBdkM7QUFFQSxJQUFNQyxHQUFHLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUF4QjtBQUdBLE9BQU8sSUFBTUMsWUFBWSxnQkFBR0wsTUFBTSxDQUFDO0FBQ2pDTSxFQUFBQSxHQUFHLEVBQUUsS0FENEI7QUFHakNDLEVBQUFBLFlBQVksRUFBRTtBQUNaO0FBQ0FDLElBQUFBLFNBQVMsRUFBRTtBQUZDLEdBSG1CO0FBUWpDQyxFQUFBQSxZQUFZLEVBQUU7QUFDWkMsSUFBQUEsSUFBSSxFQUFFO0FBQ0pDLE1BQUFBLElBQUksRUFBRSxJQURGO0FBRUpDLE1BQUFBLE1BQU0sRUFBRTtBQUZKO0FBRE07QUFSbUIsQ0FBRCxDQUEzQjs7QUFxQlAsSUFBTUMsU0FBK0MsR0FBRyxTQUFsREEsU0FBa0QsQ0FBQUMsS0FBSyxFQUFJO0FBQUEsTUFDdkRDLEdBRHVELEdBQ3JCRCxLQURxQixDQUN2REMsR0FEdUQ7QUFBQSxNQUNsREMsUUFEa0QsR0FDckJGLEtBRHFCLENBQ2xERSxRQURrRDtBQUFBLE1BQ3hDQyxLQUR3QyxHQUNyQkgsS0FEcUIsQ0FDeENHLEtBRHdDO0FBQUEsTUFDOUJDLElBRDhCLGlDQUNyQkosS0FEcUI7O0FBQUEsTUFFdkRLLEtBRnVELEdBRTdDRixLQUY2QyxDQUV2REUsS0FGdUQsRUFJL0Q7O0FBQ0EsTUFBSSxDQUFDQSxLQUFMLEVBQVk7QUFDVixXQUFPLElBQVA7QUFDRDs7QUFFRCxNQUFJQSxLQUFLLENBQUNKLEdBQUQsQ0FBVCxFQUFnQjtBQUFBLHFCQUNrQkksS0FBSyxDQUFDSixHQUFELENBRHZCO0FBQUEsUUFDTkwsSUFETSxjQUNOQSxJQURNO0FBQUEsUUFDR1UsVUFESDs7QUFHZCx3QkFBTyxvQkFBQyxZQUFEO0FBQWMsTUFBQSxFQUFFLEVBQUVWO0FBQWxCLE9BQTZCVSxVQUE3QixFQUFxREYsSUFBckQsRUFBUDtBQUNEOztBQUVELE1BQUlGLFFBQUosRUFBYztBQUNaLFdBQU9BLFFBQVA7QUFDRDs7QUFFRCxNQUFJZixHQUFHLEtBQUssWUFBWixFQUEwQjtBQUN4Qm9CLElBQUFBLE9BQU8sQ0FBQ0MsS0FBUix5QkFDdUJQLEdBRHZCO0FBR0Q7O0FBRUQsU0FBTyxJQUFQO0FBQ0QsQ0ExQkQ7O0FBNEJBLE9BQU8sSUFBTVEsSUFBSSxnQkFBR3hCLFNBQVMsQ0FBQ2MsU0FBRCxDQUF0QjtBQUVQVSxJQUFJLENBQUNDLFNBQUwsR0FBaUI7QUFDZlQsRUFBQUEsR0FBRyxFQUFFakIsU0FBUyxDQUFDMkIsTUFBVixDQUFpQkM7QUFEUCxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgd2l0aFRoZW1lIH0gZnJvbSAnZW1vdGlvbi10aGVtaW5nJztcbmltcG9ydCB7IHRoZW1lZCwgUHJvcHNXaXRoVGhlbWUgfSBmcm9tICcuLi90aGVtZSc7XG5cbmNvbnN0IEVOViA9IHByb2Nlc3MuZW52Lk5PREVfRU5WO1xuXG5leHBvcnQgdHlwZSBJY29uUmVuZGVyZXJQcm9wcyA9IFBhcmFtZXRlcnM8dHlwZW9mIEljb25SZW5kZXJlcj5bMF07XG5leHBvcnQgY29uc3QgSWNvblJlbmRlcmVyID0gdGhlbWVkKHtcbiAgdGFnOiAnc3ZnJyxcblxuICBkZWZhdWx0UHJvcHM6IHtcbiAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xODY0NjExMS9kaXNhYmxlLW9uZm9jdXMtZXZlbnQtZm9yLXN2Zy1lbGVtZW50XG4gICAgZm9jdXNhYmxlOiAnZmFsc2UnXG4gIH0sXG5cbiAgZGVmYXVsdFRoZW1lOiB7XG4gICAgaWNvbjoge1xuICAgICAgc2l6ZTogJ2xnJyxcbiAgICAgIHN0cm9rZTogJ3ByaW1hcnknXG4gICAgfVxuICB9XG59KTtcblxuZXhwb3J0IHR5cGUgSWNvblByb3BzID0gSWNvblJlbmRlcmVyUHJvcHMgJiB7XG4gIHNyYzogc3RyaW5nO1xuICBmYWxsYmFjaz86IGFueTtcbn07XG5cbmNvbnN0IEljb25Jbm5lcjogUmVhY3QuU0ZDPFByb3BzV2l0aFRoZW1lPEljb25Qcm9wcz4+ID0gcHJvcHMgPT4ge1xuICBjb25zdCB7IHNyYywgZmFsbGJhY2ssIHRoZW1lLCAuLi5yZXN0IH0gPSBwcm9wcztcbiAgY29uc3QgeyBpY29ucyB9ID0gdGhlbWU7XG5cbiAgLy8gVE9ETzogdGVtcG9yYXJ5IGZpeCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL2RlaXR5LWlvL2ZhbGNvbi9pc3N1ZXMvNjkzLCByZW1vdmUgd2hlbiByZXNvbHZlZFxuICBpZiAoIWljb25zKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoaWNvbnNbc3JjXSkge1xuICAgIGNvbnN0IHsgaWNvbiwgLi4ub3RoZXJQcm9wcyB9ID0gaWNvbnNbc3JjXTtcblxuICAgIHJldHVybiA8SWNvblJlbmRlcmVyIGFzPXtpY29ufSB7Li4uKG90aGVyUHJvcHMgYXMgYW55KX0gey4uLnJlc3R9IC8+O1xuICB9XG5cbiAgaWYgKGZhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGZhbGxiYWNrO1xuICB9XG5cbiAgaWYgKEVOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihcbiAgICAgIGBUaGVyZSBpcyBubyBpY29uIFwiJHtzcmN9XCIgZGVmaW5lZCBpbiB5b3VyIHRoZW1lIChcInRoZW1lLmljb25zXCIpLCBub3IgaGFzIGEgZmFsbGJhY2sgaWNvbiBiZWVuIGRlZmluZWQuYFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbmV4cG9ydCBjb25zdCBJY29uID0gd2l0aFRoZW1lKEljb25Jbm5lcikgYXMgUmVhY3QuU0ZDPEljb25Qcm9wcz47XG5cbkljb24ucHJvcFR5cGVzID0ge1xuICBzcmM6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZFxufTtcbiJdfQ==