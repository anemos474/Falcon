import merge from 'deepmerge';
import isPlainObject from 'is-plain-object';
import { keyframes } from '@emotion/core';
import { themablePropsKeys } from './responsiveprops';
export function extractThemableProps(props) {
  var themableProps = {};
  var rest = {}; // eslint-disable-next-line

  for (var _key in props) {
    if (themablePropsKeys.indexOf(_key) !== -1) {
      themableProps[_key] = props[_key];
    } else {
      rest[_key] = props[_key];
    }
  }

  return {
    themableProps: themableProps,
    rest: rest
  };
}
/**
 * Determines if object is `@emotion`'s keyframe definition,
 * they sets `anim=1` to keyframes processed by `@emotion/core/keyframes` function
 * @param {*} object
 */

function isEmotionKeyframe(object) {
  return object && object.anim === 1;
}

export function mergeThemes(theme, themeOverride) {
  var newTheme = merge(theme, themeOverride, {
    isMergeableObject: function isMergeableObject(x) {
      return isPlainObject(x) && !isEmotionKeyframe(x);
    }
  }); // keyframes merging needs to be handled in very special way
  // each not yet processed keyframes definitions needs to be passed
  // to emotion's keyframes function in order to be consumed in styles

  if (newTheme.keyframes) {
    // eslint-disable-next-line
    for (var keyframeKey in newTheme.keyframes) {
      // only process keyframes not yet processed by emotion (anim property not et)
      if (!newTheme.keyframes[keyframeKey].anim) {
        // TODO remove casting to `any` when https://github.com/deity-io/falcon/issues/545 fixed
        newTheme.keyframes[keyframeKey] = keyframes(newTheme.keyframes[keyframeKey]);
      }
    }
  }

  return newTheme;
}
export function gridSizes(columnAmount, theme) {
  function roundToMaxTwoDecimals(num) {
    return Math.round((num + Number.EPSILON) * 100) / 100;
  }

  var generatedSteps = {};

  for (var step = 1; step < columnAmount; step++) {
    var _key2 = step + "/" + columnAmount;

    var unformattedValue = step / columnAmount * 100;
    var value = roundToMaxTwoDecimals(unformattedValue) + "%";
    generatedSteps[_key2] = value;
  }

  theme.sizes = Object.assign({}, theme.sizes, generatedSteps);
}
export function mapNegativeSpacings(theme) {
  var spacing = theme.spacing;
  if (!spacing || typeof spacing !== 'object' || Object.keys(spacing).length <= 0) return theme;
  var negativeSpacings = {}; // Foreach value which is a number create a negative one with a key of '-key'

  Object.keys(spacing).forEach(function (key) {
    var value = spacing[key];
    if (typeof value !== 'number' || value <= 0) return;
    negativeSpacings["-" + key] = value * -1;
  });
  return Object.assign({}, theme, {
    spacing: Object.assign({}, spacing, negativeSpacings)
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90aGVtZS91dGlscy50cyJdLCJuYW1lcyI6WyJtZXJnZSIsImlzUGxhaW5PYmplY3QiLCJrZXlmcmFtZXMiLCJ0aGVtYWJsZVByb3BzS2V5cyIsImV4dHJhY3RUaGVtYWJsZVByb3BzIiwicHJvcHMiLCJ0aGVtYWJsZVByb3BzIiwicmVzdCIsImtleSIsImluZGV4T2YiLCJpc0Vtb3Rpb25LZXlmcmFtZSIsIm9iamVjdCIsImFuaW0iLCJtZXJnZVRoZW1lcyIsInRoZW1lIiwidGhlbWVPdmVycmlkZSIsIm5ld1RoZW1lIiwiaXNNZXJnZWFibGVPYmplY3QiLCJ4Iiwia2V5ZnJhbWVLZXkiLCJncmlkU2l6ZXMiLCJjb2x1bW5BbW91bnQiLCJyb3VuZFRvTWF4VHdvRGVjaW1hbHMiLCJudW0iLCJNYXRoIiwicm91bmQiLCJOdW1iZXIiLCJFUFNJTE9OIiwiZ2VuZXJhdGVkU3RlcHMiLCJzdGVwIiwidW5mb3JtYXR0ZWRWYWx1ZSIsInZhbHVlIiwic2l6ZXMiLCJtYXBOZWdhdGl2ZVNwYWNpbmdzIiwic3BhY2luZyIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJuZWdhdGl2ZVNwYWNpbmdzIiwiZm9yRWFjaCJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsS0FBUCxNQUFrQixXQUFsQjtBQUNBLE9BQU9DLGFBQVAsTUFBMEIsaUJBQTFCO0FBQ0EsU0FBU0MsU0FBVCxRQUEwQixlQUExQjtBQUNBLFNBQVNDLGlCQUFULFFBQWtDLG1CQUFsQztBQUtBLE9BQU8sU0FBU0Msb0JBQVQsQ0FBOEJDLEtBQTlCLEVBQTBDO0FBQy9DLE1BQU1DLGFBQWtCLEdBQUcsRUFBM0I7QUFDQSxNQUFNQyxJQUFTLEdBQUcsRUFBbEIsQ0FGK0MsQ0FJL0M7O0FBQ0EsT0FBSyxJQUFJQyxJQUFULElBQWdCSCxLQUFoQixFQUF1QjtBQUNyQixRQUFJRixpQkFBaUIsQ0FBQ00sT0FBbEIsQ0FBMEJELElBQTFCLE1BQTBDLENBQUMsQ0FBL0MsRUFBa0Q7QUFDaERGLE1B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LEdBQUcsRUFBSTtBQUNsQyxRQUFNdUIsS0FBSyxHQUFHRyxPQUFPLENBQUMxQixHQUFELENBQXJCO0FBRUEsUUFBSSxPQUFPdUIsS0FBUCxLQUFpQixRQUFqQixJQUE2QkEsS0FBSyxJQUFJLENBQTFDLEVBQTZDO0FBQzdDTyxJQUFBQSxnQkFBZ0IsT0FBSzlCLEdBQUwsQ0FBaEIsR0FBOEJ1QixLQUFLLEdBQUcsQ0FBQyxDQUF2QztBQUNELEdBTEQ7QUFPQSwyQkFBWWpCLEtBQVo7QUFBbUJvQixJQUFBQSxPQUFPLG9CQUFPQSxPQUFQLEVBQW1CSSxnQkFBbkI7QUFBMUI7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtZXJnZSBmcm9tICdkZWVwbWVyZ2UnO1xuaW1wb3J0IGlzUGxhaW5PYmplY3QgZnJvbSAnaXMtcGxhaW4tb2JqZWN0JztcbmltcG9ydCB7IGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHsgdGhlbWFibGVQcm9wc0tleXMgfSBmcm9tICcuL3Jlc3BvbnNpdmVwcm9wcyc7XG5pbXBvcnQgeyBUaGVtZSB9IGZyb20gJy4vaW5kZXgnO1xuXG5leHBvcnQgdHlwZSBSZWN1cnNpdmVQYXJ0aWFsPFQ+ID0geyBba2V5IGluIGtleW9mIFRdPzogUmVjdXJzaXZlUGFydGlhbDxUW2tleV0+IH07XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0VGhlbWFibGVQcm9wcyhwcm9wczogYW55KSB7XG4gIGNvbnN0IHRoZW1hYmxlUHJvcHM6IGFueSA9IHt9O1xuICBjb25zdCByZXN0OiBhbnkgPSB7fTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgZm9yIChsZXQga2V5IGluIHByb3BzKSB7XG4gICAgaWYgKHRoZW1hYmxlUHJvcHNLZXlzLmluZGV4T2Yoa2V5IGFzIGFueSkgIT09IC0xKSB7XG4gICAgICB0aGVtYWJsZVByb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN0W2tleV0gPSBwcm9wc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdGhlbWFibGVQcm9wcyxcbiAgICByZXN0XG4gIH07XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBvYmplY3QgaXMgYEBlbW90aW9uYCdzIGtleWZyYW1lIGRlZmluaXRpb24sXG4gKiB0aGV5IHNldHMgYGFuaW09MWAgdG8ga2V5ZnJhbWVzIHByb2Nlc3NlZCBieSBgQGVtb3Rpb24vY29yZS9rZXlmcmFtZXNgIGZ1bmN0aW9uXG4gKiBAcGFyYW0geyp9IG9iamVjdFxuICovXG5mdW5jdGlvbiBpc0Vtb3Rpb25LZXlmcmFtZShvYmplY3Q6IGFueSkge1xuICByZXR1cm4gb2JqZWN0ICYmIG9iamVjdC5hbmltID09PSAxO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VUaGVtZXModGhlbWU6IFRoZW1lLCB0aGVtZU92ZXJyaWRlOiBSZWN1cnNpdmVQYXJ0aWFsPFRoZW1lPik6IFRoZW1lIHtcbiAgY29uc3QgbmV3VGhlbWUgPSBtZXJnZSh0aGVtZSwgdGhlbWVPdmVycmlkZSBhcyBUaGVtZSwge1xuICAgIGlzTWVyZ2VhYmxlT2JqZWN0OiB4ID0+IGlzUGxhaW5PYmplY3QoeCkgJiYgIWlzRW1vdGlvbktleWZyYW1lKHgpXG4gIH0pO1xuXG4gIC8vIGtleWZyYW1lcyBtZXJnaW5nIG5lZWRzIHRvIGJlIGhhbmRsZWQgaW4gdmVyeSBzcGVjaWFsIHdheVxuICAvLyBlYWNoIG5vdCB5ZXQgcHJvY2Vzc2VkIGtleWZyYW1lcyBkZWZpbml0aW9ucyBuZWVkcyB0byBiZSBwYXNzZWRcbiAgLy8gdG8gZW1vdGlvbidzIGtleWZyYW1lcyBmdW5jdGlvbiBpbiBvcmRlciB0byBiZSBjb25zdW1lZCBpbiBzdHlsZXNcbiAgaWYgKG5ld1RoZW1lLmtleWZyYW1lcykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIGZvciAobGV0IGtleWZyYW1lS2V5IGluIG5ld1RoZW1lLmtleWZyYW1lcykge1xuICAgICAgLy8gb25seSBwcm9jZXNzIGtleWZyYW1lcyBub3QgeWV0IHByb2Nlc3NlZCBieSBlbW90aW9uIChhbmltIHByb3BlcnR5IG5vdCBldClcbiAgICAgIGlmICghbmV3VGhlbWUua2V5ZnJhbWVzW2tleWZyYW1lS2V5XS5hbmltKSB7XG4gICAgICAgIC8vIFRPRE8gcmVtb3ZlIGNhc3RpbmcgdG8gYGFueWAgd2hlbiBodHRwczovL2dpdGh1Yi5jb20vZGVpdHktaW8vZmFsY29uL2lzc3Vlcy81NDUgZml4ZWRcbiAgICAgICAgbmV3VGhlbWUua2V5ZnJhbWVzW2tleWZyYW1lS2V5XSA9IGtleWZyYW1lcyhuZXdUaGVtZS5rZXlmcmFtZXNba2V5ZnJhbWVLZXldIGFzIGFueSkgYXMgYW55O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdUaGVtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdyaWRTaXplcyhjb2x1bW5BbW91bnQ6IG51bWJlciwgdGhlbWU6IFRoZW1lKSB7XG4gIGZ1bmN0aW9uIHJvdW5kVG9NYXhUd29EZWNpbWFscyhudW06IG51bWJlcikge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKChudW0gKyBOdW1iZXIuRVBTSUxPTikgKiAxMDApIC8gMTAwO1xuICB9XG5cbiAgY29uc3QgZ2VuZXJhdGVkU3RlcHMgPSB7fTtcbiAgZm9yIChsZXQgc3RlcCA9IDE7IHN0ZXAgPCBjb2x1bW5BbW91bnQ7IHN0ZXArKykge1xuICAgIGNvbnN0IGtleSA9IGAke3N0ZXB9LyR7Y29sdW1uQW1vdW50fWA7XG4gICAgY29uc3QgdW5mb3JtYXR0ZWRWYWx1ZSA9IChzdGVwIC8gY29sdW1uQW1vdW50KSAqIDEwMDtcbiAgICBjb25zdCB2YWx1ZSA9IGAke3JvdW5kVG9NYXhUd29EZWNpbWFscyh1bmZvcm1hdHRlZFZhbHVlKX0lYDtcblxuICAgIGdlbmVyYXRlZFN0ZXBzW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHRoZW1lLnNpemVzID0geyAuLi50aGVtZS5zaXplcywgLi4uZ2VuZXJhdGVkU3RlcHMgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcE5lZ2F0aXZlU3BhY2luZ3ModGhlbWUpOiBUaGVtZSB7XG4gIGNvbnN0IHsgc3BhY2luZyB9ID0gdGhlbWU7XG5cbiAgaWYgKCFzcGFjaW5nIHx8IHR5cGVvZiBzcGFjaW5nICE9PSAnb2JqZWN0JyB8fCBPYmplY3Qua2V5cyhzcGFjaW5nKS5sZW5ndGggPD0gMCkgcmV0dXJuIHRoZW1lO1xuICBjb25zdCBuZWdhdGl2ZVNwYWNpbmdzID0ge307XG5cbiAgLy8gRm9yZWFjaCB2YWx1ZSB3aGljaCBpcyBhIG51bWJlciBjcmVhdGUgYSBuZWdhdGl2ZSBvbmUgd2l0aCBhIGtleSBvZiAnLWtleSdcbiAgT2JqZWN0LmtleXMoc3BhY2luZykuZm9yRWFjaChrZXkgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gc3BhY2luZ1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicgfHwgdmFsdWUgPD0gMCkgcmV0dXJuO1xuICAgIG5lZ2F0aXZlU3BhY2luZ3NbYC0ke2tleX1gXSA9IHZhbHVlICogLTE7XG4gIH0pO1xuXG4gIHJldHVybiB7IC4uLnRoZW1lLCBzcGFjaW5nOiB7IC4uLnNwYWNpbmcsIC4uLm5lZ2F0aXZlU3BhY2luZ3MgfSB9O1xufVxuIl19