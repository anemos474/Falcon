/// <reference types="react" />
import CSS from 'csstype';
import { Keyframes } from '@emotion/serialize';
import { baseTheme } from './baseTheme';
import { PropsMappings } from './responsiveprops';
import { RecursivePartial } from './utils';
export * from './themed';
export * from './utils';
export * from './responsiveprops';
export * from './formatBreakpointCssBlocks';
export declare function createTheme(themeOverride?: RecursivePartial<Theme>): Theme;
export interface Theme {
    colors: ThemeColors;
    breakpoints: Readonly<ThemeBreakpoints>;
    spacing: Readonly<ThemeSpacing>;
    sizes: Readonly<ThemeSizes>;
    fonts: ThemeFonts;
    fontSizes: Readonly<ThemeFontSizes>;
    fontWeights: ThemeFontWeights;
    lineHeights: Readonly<ThemeLineHeights>;
    letterSpacings: Readonly<ThemeLetterSpacings>;
    borders: ThemeBorders;
    borderRadius: Readonly<ThemeBorderRadius>;
    boxShadows: ThemeBoxShadows;
    easingFunctions: ThemeEasingFunctions;
    transitionDurations: ThemeTransitionDurations;
    keyframes: ThemeKeyframes;
    zIndex: ThemeZIndex;
    opacities: Readonly<ThemeOpacities>;
    textDecorations: ThemeTextDecorations;
    components: ThemeComponents;
    icons: ThemeIcons;
}
declare type ThemedPropMapping = {
    themeProp: keyof Theme;
};
declare type CssProps = CSS.PropertiesFallback<number | string>;
declare type ResponsivePropMapping = {
    cssProp: keyof CssProps;
};
declare type CSSPseudoObject = {
    [key in CSS.SimplePseudos]?: CSSObject;
};
declare type CssOtherProps = undefined | number | string | CSSObject;
declare type CSSOthersObject = {
    [propertiesName: string]: CssOtherProps | CssOtherProps[];
};
declare type CssResponsiveProps = {
    [key in keyof CssProps]?: {
        [Breakpoint in keyof ThemeBreakpoints]?: CssProps[key];
    } | CssProps[key];
};
export interface CSSObject extends CssResponsiveProps, CSSPseudoObject, CSSOthersObject {
}
export declare type PropsWithTheme<TProps, TTheme extends Theme = Theme> = TProps & {
    theme: TTheme;
};
declare type ThemePropMap<TProp extends keyof PropsMappings> = PropsMappings[TProp] extends ThemedPropMapping ? Extract<keyof Theme[PropsMappings[TProp]['themeProp']], string> : PropsMappings[TProp] extends ResponsivePropMapping ? CssProps[PropsMappings[TProp]['cssProp']] : TProp extends keyof CssProps ? CssProps[TProp] : string | number;
export declare type BaseThemingProps = {
    [TProp in keyof PropsMappings]?: ThemePropMap<TProp> | {
        [TBreakpoint in keyof ThemeBreakpoints]?: ThemePropMap<TProp>;
    };
};
export declare type BreakpointBlockThemingProps = {
    [TProp in keyof ThemeBreakpoints]?: {
        [TProp in keyof PropsMappings]?: ThemePropMap<TProp>;
    };
};
export declare type InlineCss<TProps> = ((props: PropsWithTheme<TProps>) => CSSObject) | CSSObject;
export declare type DefaultTheme<TProps = any> = {
    [name: string]: ComponentTheme<TProps>;
};
export declare type PropsWithDefaultTheme<TProps> = {
    defaultTheme?: DefaultTheme<TProps>;
};
/** old `ThemedComponentProps` */
export declare type ThemingProps<TProps = any> = BaseThemingProps & BreakpointBlockThemingProps & {
    defaultTheme?: DefaultTheme<TProps>;
    variant?: string;
    css?: InlineCss<TProps>;
};
export declare type PropsWithThemingProps<TProps> = TProps & ThemingProps<TProps>;
declare type ComponentThemeVariant<TProps> = BaseThemingProps & BreakpointBlockThemingProps & {
    css?: InlineCss<TProps>;
};
export declare type ComponentTheme<TProps> = ComponentThemeVariant<TProps> & {
    variants?: {
        [variantKey: string]: ComponentThemeVariant<TProps>;
    };
};
export interface ThemeComponents {
    [key: string]: ComponentTheme<{}>;
}
export declare type ThemeIcons = {
    [name: string]: {
        icon: React.ComponentType | ((props: any) => JSX.Element);
    } & ThemingProps<any>;
};
declare type Colors = typeof baseTheme.colors;
export interface ThemeColors extends Colors {
}
declare type Breakpoints = Record<keyof typeof baseTheme.breakpoints, number | string>;
export interface ThemeBreakpoints extends Breakpoints {
}
declare type Spacing = Record<keyof typeof baseTheme.spacing, number | string>;
export interface ThemeSpacing extends Spacing {
}
declare type Sizes = Record<keyof typeof baseTheme.sizes, number | string>;
export interface ThemeSizes extends Sizes {
}
declare type Fonts = typeof baseTheme.fonts;
export interface ThemeFonts extends Fonts {
}
declare type FontSizes = Record<keyof typeof baseTheme.fontSizes, number | string>;
export interface ThemeFontSizes extends FontSizes {
}
declare type FontWeights = typeof baseTheme.fontWeights;
export interface ThemeFontWeights extends FontWeights {
}
declare type LineHeights = Record<keyof typeof baseTheme.lineHeights, number | string>;
export interface ThemeLineHeights extends LineHeights {
}
declare type LetterSpacings = Record<keyof typeof baseTheme.letterSpacings, number | string>;
export interface ThemeLetterSpacings extends LetterSpacings {
}
declare type Borders = typeof baseTheme.borders;
export interface ThemeBorders extends Borders {
}
declare type BorderRadius = Record<keyof typeof baseTheme.borderRadius, number | string>;
export interface ThemeBorderRadius extends BorderRadius {
}
declare type BoxShadows = typeof baseTheme.boxShadows;
export interface ThemeBoxShadows extends BoxShadows {
}
declare type EasingFunctions = typeof baseTheme.easingFunctions;
export interface ThemeEasingFunctions extends EasingFunctions {
}
declare type TransitionDurations = typeof baseTheme.transitionDurations;
export interface ThemeTransitionDurations extends TransitionDurations {
}
declare type Opacities = Record<keyof typeof baseTheme.opacities, number>;
export interface ThemeOpacities extends Opacities {
}
declare type TextDecorations = typeof baseTheme.textDecorations;
export interface ThemeTextDecorations extends TextDecorations {
}
export interface ThemeKeyframes {
    [key: string]: CSSObject | Keyframes;
}
declare type ZIndex = typeof baseTheme.zIndex;
export interface ThemeZIndex extends ZIndex {
}
//# sourceMappingURL=index.d.ts.map