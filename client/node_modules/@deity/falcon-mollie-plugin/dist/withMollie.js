"use strict";

var _interopRequireWildcard = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.withMollie = void 0;

var _extends2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/extends"));

var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));

var _reactHelmetAsync = /*#__PURE__*/require("react-helmet-async");

/**
 * Mollie Docs
 * https://docs.mollie.com/guides/mollie-components/overview#add-the-mollie-components-javascript-library-to-your-checkout
 */
var locales = {
  default: 'en_US',
  en: 'en_US',
  nl: 'nl_NL' // TODO: possible remaining values to be mapped: nl_BE fr_FR fr_BE de_DE de_AT de_CH es_ES ca_ES pt_PT it_IT nb_NO sv_SE fi_FI da_DK is_IS hu_HU pl_PL lv_LV lt_LT

};

var withMollie = function withMollie(WrappedComponent) {
  return function (props) {
    var _useState = (0, _react.useState)(false),
        scriptLoaded = _useState[0],
        setScriptLoaded = _useState[1];

    var _useState2 = (0, _react.useState)(null),
        mollie = _useState2[0],
        setMollie = _useState2[1];

    var errMessage = 'Mollie ProfileID was not returned from the server!';
    var _props$locale = props.locale,
        appLocale = _props$locale === void 0 ? 'en_US' : _props$locale,
        LoaderComp = props.LoaderComp,
        ErrorComponent = props.ErrorComponent,
        config = props.config;
    var profileId = config.profileId,
        _config$testMode = config.testMode,
        testMode = _config$testMode === void 0 ? false : _config$testMode;
    (0, _react.useEffect)(function () {
      if (scriptLoaded && profileId) {
        setMollie(window.Mollie(profileId, {
          locale: locales[appLocale] || locales.default,
          testmode: testMode
        }));
      }
    }, [scriptLoaded, appLocale, profileId, testMode]);
    (0, _react.useEffect)(function () {
      return function () {
        var script = document.querySelector('#mollieScript');

        if (typeof script !== 'undefined' && script != null) {
          script.parentNode.removeChild(script);
          delete window.Mollie;
        }
      };
    }, []);

    if (!profileId) {
      return ErrorComponent ? /*#__PURE__*/_react.default.createElement(ErrorComponent, null, errMessage) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, errMessage);
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_reactHelmetAsync.Helmet, {
      onChangeClientState: function onChangeClientState() {
        document.querySelector('#mollieScript').addEventListener('load', function () {
          return setScriptLoaded(true);
        });
      }
    }, /*#__PURE__*/_react.default.createElement("script", {
      id: "mollieScript",
      src: "https://js.mollie.com/v1/mollie.js",
      async: true
    })), mollie ? /*#__PURE__*/_react.default.createElement(WrappedComponent, (0, _extends2.default)({}, props, {
      config: config,
      mollie: mollie
    })) : LoaderComp && /*#__PURE__*/_react.default.createElement(LoaderComp, null));
  };
};

exports.withMollie = withMollie;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy93aXRoTW9sbGllLnRzeCJdLCJuYW1lcyI6WyJsb2NhbGVzIiwiZGVmYXVsdCIsImVuIiwibmwiLCJ3aXRoTW9sbGllIiwiV3JhcHBlZENvbXBvbmVudCIsInByb3BzIiwic2NyaXB0TG9hZGVkIiwic2V0U2NyaXB0TG9hZGVkIiwibW9sbGllIiwic2V0TW9sbGllIiwiZXJyTWVzc2FnZSIsImxvY2FsZSIsImFwcExvY2FsZSIsIkxvYWRlckNvbXAiLCJFcnJvckNvbXBvbmVudCIsImNvbmZpZyIsInByb2ZpbGVJZCIsInRlc3RNb2RlIiwid2luZG93IiwiTW9sbGllIiwidGVzdG1vZGUiLCJzY3JpcHQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJhZGRFdmVudExpc3RlbmVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUlBOztBQUNBOztBQUxBO0FBQ0E7QUFDQTtBQUNBO0FBVUEsSUFBTUEsT0FBTyxHQUFHO0FBQ2RDLEVBQUFBLE9BQU8sRUFBRSxPQURLO0FBRWRDLEVBQUFBLEVBQUUsRUFBRSxPQUZVO0FBR2RDLEVBQUFBLEVBQUUsRUFBRSxPQUhVLENBSWQ7O0FBSmMsQ0FBaEI7O0FBT08sSUFBTUMsVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBQUMsZ0JBQWdCLEVBQUk7QUFDNUMsU0FBTyxVQUFBQyxLQUFLLEVBQUk7QUFDZCxvQkFBd0MscUJBQVMsS0FBVCxDQUF4QztBQUFBLFFBQU9DLFlBQVA7QUFBQSxRQUFxQkMsZUFBckI7O0FBQ0EscUJBQTRCLHFCQUFTLElBQVQsQ0FBNUI7QUFBQSxRQUFPQyxNQUFQO0FBQUEsUUFBZUMsU0FBZjs7QUFFQSxRQUFNQyxVQUFVLEdBQUcsb0RBQW5CO0FBQ0Esd0JBQTRFTCxLQUE1RSxDQUFRTSxNQUFSO0FBQUEsUUFBZ0JDLFNBQWhCLDhCQUE0QixPQUE1QjtBQUFBLFFBQXFDQyxVQUFyQyxHQUE0RVIsS0FBNUUsQ0FBcUNRLFVBQXJDO0FBQUEsUUFBaURDLGNBQWpELEdBQTRFVCxLQUE1RSxDQUFpRFMsY0FBakQ7QUFBQSxRQUFpRUMsTUFBakUsR0FBNEVWLEtBQTVFLENBQWlFVSxNQUFqRTtBQUNBLFFBQVFDLFNBQVIsR0FBd0NELE1BQXhDLENBQVFDLFNBQVI7QUFBQSwyQkFBd0NELE1BQXhDLENBQW1CRSxRQUFuQjtBQUFBLFFBQW1CQSxRQUFuQixpQ0FBOEIsS0FBOUI7QUFFQSwwQkFBVSxZQUFNO0FBQ2QsVUFBSVgsWUFBWSxJQUFJVSxTQUFwQixFQUErQjtBQUM3QlAsUUFBQUEsU0FBUyxDQUNQUyxNQUFNLENBQUNDLE1BQVAsQ0FBY0gsU0FBZCxFQUF5QjtBQUN2QkwsVUFBQUEsTUFBTSxFQUFFWixPQUFPLENBQUNhLFNBQUQsQ0FBUCxJQUFzQmIsT0FBTyxDQUFDQyxPQURmO0FBRXZCb0IsVUFBQUEsUUFBUSxFQUFFSDtBQUZhLFNBQXpCLENBRE8sQ0FBVDtBQU1EO0FBQ0YsS0FURCxFQVNHLENBQUNYLFlBQUQsRUFBZU0sU0FBZixFQUEwQkksU0FBMUIsRUFBcUNDLFFBQXJDLENBVEg7QUFXQSwwQkFBVSxZQUFNO0FBQ2QsYUFBTyxZQUFNO0FBQ1gsWUFBTUksTUFBTSxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsZUFBdkIsQ0FBZjs7QUFDQSxZQUFJLE9BQU9GLE1BQVAsS0FBa0IsV0FBbEIsSUFBaUNBLE1BQU0sSUFBSSxJQUEvQyxFQUFxRDtBQUNuREEsVUFBQUEsTUFBTSxDQUFDRyxVQUFQLENBQWtCQyxXQUFsQixDQUE4QkosTUFBOUI7QUFFQSxpQkFBT0gsTUFBTSxDQUFDQyxNQUFkO0FBQ0Q7QUFDRixPQVBEO0FBUUQsS0FURCxFQVNHLEVBVEg7O0FBV0EsUUFBSSxDQUFDSCxTQUFMLEVBQWdCO0FBQ2QsYUFBT0YsY0FBYyxnQkFBRyw2QkFBQyxjQUFELFFBQWlCSixVQUFqQixDQUFILGdCQUFtRCw0REFBR0EsVUFBSCxDQUF4RTtBQUNEOztBQUVELHdCQUNFLHlFQUNFLDZCQUFDLHdCQUFEO0FBQ0UsTUFBQSxtQkFBbUIsRUFBRSwrQkFBTTtBQUN6QlksUUFBQUEsUUFBUSxDQUFDQyxhQUFULENBQXVCLGVBQXZCLEVBQXdDRyxnQkFBeEMsQ0FBeUQsTUFBekQsRUFBaUU7QUFBQSxpQkFBTW5CLGVBQWUsQ0FBQyxJQUFELENBQXJCO0FBQUEsU0FBakU7QUFDRDtBQUhILG9CQUtFO0FBQVEsTUFBQSxFQUFFLEVBQUMsY0FBWDtBQUEwQixNQUFBLEdBQUcsRUFBQyxvQ0FBOUI7QUFBbUUsTUFBQSxLQUFLO0FBQXhFLE1BTEYsQ0FERixFQVFHQyxNQUFNLGdCQUFHLDZCQUFDLGdCQUFELDZCQUFzQkgsS0FBdEI7QUFBNkIsTUFBQSxNQUFNLEVBQUVVLE1BQXJDO0FBQTZDLE1BQUEsTUFBTSxFQUFFUDtBQUFyRCxPQUFILEdBQXFFSyxVQUFVLGlCQUFJLDZCQUFDLFVBQUQsT0FSNUYsQ0FERjtBQVlELEdBOUNEO0FBK0NELENBaERNIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNb2xsaWUgRG9jc1xuICogaHR0cHM6Ly9kb2NzLm1vbGxpZS5jb20vZ3VpZGVzL21vbGxpZS1jb21wb25lbnRzL292ZXJ2aWV3I2FkZC10aGUtbW9sbGllLWNvbXBvbmVudHMtamF2YXNjcmlwdC1saWJyYXJ5LXRvLXlvdXItY2hlY2tvdXRcbiAqL1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBIZWxtZXQgfSBmcm9tICdyZWFjdC1oZWxtZXQtYXN5bmMnO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBXaW5kb3cge1xuICAgIE1vbGxpZTogYW55O1xuICB9XG59XG5cbmNvbnN0IGxvY2FsZXMgPSB7XG4gIGRlZmF1bHQ6ICdlbl9VUycsXG4gIGVuOiAnZW5fVVMnLFxuICBubDogJ25sX05MJ1xuICAvLyBUT0RPOiBwb3NzaWJsZSByZW1haW5pbmcgdmFsdWVzIHRvIGJlIG1hcHBlZDogbmxfQkUgZnJfRlIgZnJfQkUgZGVfREUgZGVfQVQgZGVfQ0ggZXNfRVMgY2FfRVMgcHRfUFQgaXRfSVQgbmJfTk8gc3ZfU0UgZmlfRkkgZGFfREsgaXNfSVMgaHVfSFUgcGxfUEwgbHZfTFYgbHRfTFRcbn07XG5cbmV4cG9ydCBjb25zdCB3aXRoTW9sbGllID0gV3JhcHBlZENvbXBvbmVudCA9PiB7XG4gIHJldHVybiBwcm9wcyA9PiB7XG4gICAgY29uc3QgW3NjcmlwdExvYWRlZCwgc2V0U2NyaXB0TG9hZGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBbbW9sbGllLCBzZXRNb2xsaWVdID0gdXNlU3RhdGUobnVsbCk7XG5cbiAgICBjb25zdCBlcnJNZXNzYWdlID0gJ01vbGxpZSBQcm9maWxlSUQgd2FzIG5vdCByZXR1cm5lZCBmcm9tIHRoZSBzZXJ2ZXIhJztcbiAgICBjb25zdCB7IGxvY2FsZTogYXBwTG9jYWxlID0gJ2VuX1VTJywgTG9hZGVyQ29tcCwgRXJyb3JDb21wb25lbnQsIGNvbmZpZyB9ID0gcHJvcHM7XG4gICAgY29uc3QgeyBwcm9maWxlSWQsIHRlc3RNb2RlID0gZmFsc2UgfSA9IGNvbmZpZztcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoc2NyaXB0TG9hZGVkICYmIHByb2ZpbGVJZCkge1xuICAgICAgICBzZXRNb2xsaWUoXG4gICAgICAgICAgd2luZG93Lk1vbGxpZShwcm9maWxlSWQsIHtcbiAgICAgICAgICAgIGxvY2FsZTogbG9jYWxlc1thcHBMb2NhbGVdIHx8IGxvY2FsZXMuZGVmYXVsdCxcbiAgICAgICAgICAgIHRlc3Rtb2RlOiB0ZXN0TW9kZVxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSwgW3NjcmlwdExvYWRlZCwgYXBwTG9jYWxlLCBwcm9maWxlSWQsIHRlc3RNb2RlXSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21vbGxpZVNjcmlwdCcpO1xuICAgICAgICBpZiAodHlwZW9mIHNjcmlwdCAhPT0gJ3VuZGVmaW5lZCcgJiYgc2NyaXB0ICE9IG51bGwpIHtcbiAgICAgICAgICBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXG4gICAgICAgICAgZGVsZXRlIHdpbmRvdy5Nb2xsaWU7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSwgW10pO1xuXG4gICAgaWYgKCFwcm9maWxlSWQpIHtcbiAgICAgIHJldHVybiBFcnJvckNvbXBvbmVudCA/IDxFcnJvckNvbXBvbmVudD57ZXJyTWVzc2FnZX08L0Vycm9yQ29tcG9uZW50PiA6IDw+e2Vyck1lc3NhZ2V9PC8+O1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICA8SGVsbWV0XG4gICAgICAgICAgb25DaGFuZ2VDbGllbnRTdGF0ZT17KCkgPT4ge1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21vbGxpZVNjcmlwdCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiBzZXRTY3JpcHRMb2FkZWQodHJ1ZSkpO1xuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8c2NyaXB0IGlkPVwibW9sbGllU2NyaXB0XCIgc3JjPVwiaHR0cHM6Ly9qcy5tb2xsaWUuY29tL3YxL21vbGxpZS5qc1wiIGFzeW5jIC8+XG4gICAgICAgIDwvSGVsbWV0PlxuICAgICAgICB7bW9sbGllID8gPFdyYXBwZWRDb21wb25lbnQgey4uLnByb3BzfSBjb25maWc9e2NvbmZpZ30gbW9sbGllPXttb2xsaWV9IC8+IDogTG9hZGVyQ29tcCAmJiA8TG9hZGVyQ29tcCAvPn1cbiAgICAgIDwvPlxuICAgICk7XG4gIH07XG59O1xuIl19