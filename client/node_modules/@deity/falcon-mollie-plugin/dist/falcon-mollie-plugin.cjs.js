'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var reactHelmetAsync = require('react-helmet-async');

const MolliePlugin = props => {
  const {
    children,
    config = {}
  } = props;
  const issuers = config.issuers || [];

  const payFn = async paymentData => {
    // Payment specific data
    // https://docs.mollie.com/reference/v2/orders-api/create-order#payment-parameters
    if (paymentData) return paymentData;
    return {};
  };

  return children(payFn, issuers);
};

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var _jsxFileName = "/home/vsts/work/1/s/packages/payment/falcon-mollie-plugin/src/withMollie.tsx";
const locales = {
  default: 'en_US',
  en: 'en_US',
  nl: 'nl_NL' // TODO: possible remaining values to be mapped: nl_BE fr_FR fr_BE de_DE de_AT de_CH es_ES ca_ES pt_PT it_IT nb_NO sv_SE fi_FI da_DK is_IS hu_HU pl_PL lv_LV lt_LT

};
const withMollie = WrappedComponent => {
  return props => {
    const [scriptLoaded, setScriptLoaded] = React.useState(false);
    const [mollie, setMollie] = React.useState(null);
    const errMessage = 'Mollie ProfileID was not returned from the server!';
    const {
      locale: appLocale = 'en_US',
      LoaderComp,
      ErrorComponent,
      config
    } = props;
    const {
      profileId,
      testMode = false
    } = config;
    React.useEffect(() => {
      if (scriptLoaded && profileId) {
        setMollie(window.Mollie(profileId, {
          locale: locales[appLocale] || locales.default,
          testmode: testMode
        }));
      }
    }, [scriptLoaded, appLocale, profileId, testMode]);
    React.useEffect(() => {
      return () => {
        const script = document.querySelector('#mollieScript');

        if (typeof script !== 'undefined' && script != null) {
          script.parentNode.removeChild(script);
          delete window.Mollie;
        }
      };
    }, []);

    if (!profileId) {
      return ErrorComponent ? /*#__PURE__*/React__default.createElement(ErrorComponent, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 53,
          columnNumber: 31
        }
      }, errMessage) : /*#__PURE__*/React__default.createElement(React__default.Fragment, null, errMessage);
    }

    return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(reactHelmetAsync.Helmet, {
      onChangeClientState: () => {
        document.querySelector('#mollieScript').addEventListener('load', () => setScriptLoaded(true));
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 58,
        columnNumber: 9
      }
    }, /*#__PURE__*/React__default.createElement("script", {
      id: "mollieScript",
      src: "https://js.mollie.com/v1/mollie.js",
      async: true,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 63,
        columnNumber: 11
      }
    })), mollie ? /*#__PURE__*/React__default.createElement(WrappedComponent, _extends({}, props, {
      config: config,
      mollie: mollie,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 65,
        columnNumber: 19
      }
    })) : LoaderComp && /*#__PURE__*/React__default.createElement(LoaderComp, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 65,
        columnNumber: 99
      }
    }));
  };
};

const Mollie = props => {
  const {
    children,
    mollie
  } = props;

  const payFn = async paymentData => {
    // Credit card token generation
    if (props.method === 'creditcard') {
      const {
        token,
        error
      } = await mollie.createToken();
      if (error) throw error;
      return {
        token
      };
    } // Payment specific data
    // https://docs.mollie.com/reference/v2/orders-api/create-order#payment-parameters


    if (paymentData) return paymentData;
    return {};
  };

  return children(payFn, mollie);
};

const MollieCardPlugin = withMollie(Mollie);

exports.MollieCardPlugin = MollieCardPlugin;
exports.MolliePlugin = MolliePlugin;
//# sourceMappingURL=falcon-mollie-plugin.cjs.js.map
