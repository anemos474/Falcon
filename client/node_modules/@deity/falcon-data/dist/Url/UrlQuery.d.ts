import PropTypes from 'prop-types';
import { QueryHookOptions, LazyQueryHookOptions } from '@apollo/client';
import { Query } from '../Query/Query';
export declare const GET_URL: import("@apollo/client").DocumentNode;
export declare type ResourceMeta = {
    __typename: 'ResourceMeta';
    /** @example `shop-category`, `shop-product`, `blog-post`,... */
    type: string;
    id: string;
    path: string;
};
export declare type RedirectMeta = {
    __typename: 'RedirectMeta';
    path: string;
    status: number;
};
export declare type UrlQueryVariables = {
    path: string;
};
export declare type UrlResult = ResourceMeta | RedirectMeta;
export declare type UrlResponse = {
    url: UrlResult;
};
export declare class UrlQuery extends Query<UrlResponse, UrlQueryVariables> {
    static defaultProps: {
        query: import("@apollo/client").DocumentNode;
    };
    static propTypes: {
        variables: PropTypes.Requireable<PropTypes.InferProps<{
            path: PropTypes.Validator<string>;
        }>>;
        passLoading: PropTypes.Requireable<boolean>;
        passError: PropTypes.Requireable<boolean>;
        client: PropTypes.Requireable<object>;
        children: PropTypes.Validator<(...args: any[]) => any>;
        fetchPolicy: PropTypes.Requireable<string>;
        notifyOnNetworkStatusChange: PropTypes.Requireable<boolean>;
        onCompleted: PropTypes.Requireable<(...args: any[]) => any>;
        onError: PropTypes.Requireable<(...args: any[]) => any>;
        pollInterval: PropTypes.Requireable<number>;
        query: PropTypes.Validator<object>;
        ssr: PropTypes.Requireable<boolean>;
        partialRefetch: PropTypes.Requireable<boolean>;
        returnPartialData: PropTypes.Requireable<boolean>;
    };
}
export declare const useUrlQuery: (options?: QueryHookOptions<UrlResponse>) => import("@apollo/client").QueryResult<UrlResponse, import("@apollo/client").OperationVariables>;
export declare const useUrlLazyQuery: (options?: LazyQueryHookOptions<UrlResponse>) => import("@apollo/client").QueryTuple<UrlResponse, import("@apollo/client").OperationVariables>;
//# sourceMappingURL=UrlQuery.d.ts.map