import React from 'react';
import PropTypes from 'prop-types';
import { OperationVariables, QueryResult } from '@apollo/client';
import { QueryComponentOptions } from '@apollo/client/react/components';
import { FetchMore, ApolloFetchMore } from './fetchMore';
export declare type QueryRenderProps<TData = any, TVariables = OperationVariables> = {
    fetchMore: (() => any) | ApolloFetchMore<TData, TVariables>;
} & Omit<QueryResult<TData, TVariables>, 'fetchMore'>;
export declare type QueryProps<TData, TVariables> = {
    fetchMore?: FetchMore<TData, TVariables>;
    passLoading?: boolean;
    passError?: boolean;
    children?: (renderProps: QueryRenderProps<TData, TVariables>) => any;
} & Omit<QueryComponentOptions<TData, TVariables>, 'children'>;
export declare class Query<TData = any, TVariables = OperationVariables> extends React.Component<QueryProps<TData, TVariables>> {
    static propTypes: {
        passLoading: PropTypes.Requireable<boolean>;
        passError: PropTypes.Requireable<boolean>;
        client: PropTypes.Requireable<object>;
        children: PropTypes.Validator<(...args: any[]) => any>;
        fetchPolicy: PropTypes.Requireable<string>;
        notifyOnNetworkStatusChange: PropTypes.Requireable<boolean>;
        onCompleted: PropTypes.Requireable<(...args: any[]) => any>;
        onError: PropTypes.Requireable<(...args: any[]) => any>;
        pollInterval: PropTypes.Requireable<number>;
        query: PropTypes.Validator<object>;
        variables: PropTypes.Requireable<object>;
        ssr: PropTypes.Requireable<boolean>;
        partialRefetch: PropTypes.Requireable<boolean>;
        returnPartialData: PropTypes.Requireable<boolean>;
    };
    render(): JSX.Element;
}
//# sourceMappingURL=Query.d.ts.map