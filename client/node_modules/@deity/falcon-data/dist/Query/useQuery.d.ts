import { DocumentNode } from 'graphql';
import { QueryHookOptions, OperationVariables } from '@apollo/client';
import { FetchMore } from './fetchMore';
export declare type UseQueryOptions<TData, TVariables = any> = QueryHookOptions<TData, TVariables> & {
    fetchMore?: FetchMore<TData, TVariables>;
};
export declare function useQuery<TData = any, TVariables = OperationVariables>(query: DocumentNode, options?: UseQueryOptions<TData, TVariables>): {
    fetchMore: ((<K extends keyof TVariables>(fetchMoreOptions: import("@apollo/client").FetchMoreQueryOptions<TVariables, K, TData> & import("@apollo/client").FetchMoreOptions<TData, TVariables>) => Promise<import("@apollo/client").ApolloQueryResult<TData>>) & (<TData2, TVariables2, K_1 extends keyof TVariables2>(fetchMoreOptions: {
        query?: DocumentNode | import("@graphql-typed-document-node/core").TypedDocumentNode<TData, TVariables>;
    } & import("@apollo/client").FetchMoreQueryOptions<TVariables2, K_1, TData> & import("@apollo/client").FetchMoreOptions<TData2, TVariables2>) => Promise<import("@apollo/client").ApolloQueryResult<TData2>>)) | (() => any);
    client: import("@apollo/client").ApolloClient<any>;
    data: TData;
    previousData?: TData;
    error?: import("@apollo/client").ApolloError;
    loading: boolean;
    networkStatus: import("@apollo/client").NetworkStatus;
    called: true;
    startPolling: (pollInterval: number) => void;
    stopPolling: () => void;
    subscribeToMore: <TSubscriptionData = TData, TSubscriptionVariables = TVariables>(options: import("@apollo/client").SubscribeToMoreOptions<TData, TSubscriptionVariables, TSubscriptionData>) => () => void;
    updateQuery: <TVars = TVariables>(mapFn: (previousQueryResult: TData, options: Pick<import("@apollo/client").WatchQueryOptions<TVars, TData>, "variables">) => TData) => void;
    refetch: (variables?: Partial<TVariables>) => Promise<import("@apollo/client").ApolloQueryResult<TData>>;
    variables: TVariables;
};
//# sourceMappingURL=useQuery.d.ts.map