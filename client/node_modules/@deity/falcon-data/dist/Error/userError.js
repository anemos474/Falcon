"use strict";

exports.__esModule = true;
exports.tryGetUserError = exports.isUserError = exports.isNetworkError = void 0;

var _client = /*#__PURE__*/require("@apollo/client");

var _falconErrors = /*#__PURE__*/require("@deity/falcon-errors");

/**
 * Determines if `error` is Apollo network error
 * @param error
 */
var isNetworkError = function isNetworkError(error) {
  return (0, _client.isApolloError)(error) && !!error.networkError;
};
/**
 * Determines if `error` is Apollo graphQl error, which is considered as user error
 * @param error
 */


exports.isNetworkError = isNetworkError;

var isUserError = function isUserError(error) {
  if ((0, _client.isApolloError)(error)) {
    var graphQLErrors = error.graphQLErrors,
        networkError = error.networkError;

    if (!networkError && Array.isArray(graphQLErrors) && graphQLErrors.length > 0) {
      return true;
    }
  }

  return false;
};
/**
 * Extract all user errors if any
 * @param error
 */


exports.isUserError = isUserError;

var tryGetUserError = function tryGetUserError(error) {
  if (isUserError(error)) {
    var _ref = error,
        graphQLErrors = _ref.graphQLErrors;
    return graphQLErrors.reduce(function (result, _ref2) {
      var message = _ref2.message,
          _ref2$extensions = _ref2.extensions,
          extensions = _ref2$extensions === void 0 ? {} : _ref2$extensions;

      if (extensions.code === _falconErrors.codes.BAD_USER_INPUT && extensions.errors) {
        var errors = extensions.errors;
        var userInputErrors = Object.keys(errors).map(function (x) {
          return {
            message: errors[x].message || errors[x],
            code: errors[x].code || 'UNKNOWN',
            path: x
          };
        });
        return [].concat(result, userInputErrors);
      }

      return [].concat(result, [{
        message: message,
        code: extensions.code
      }]);
    }, []);
  }

  return [];
};

exports.tryGetUserError = tryGetUserError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9FcnJvci91c2VyRXJyb3IudHMiXSwibmFtZXMiOlsiaXNOZXR3b3JrRXJyb3IiLCJlcnJvciIsIm5ldHdvcmtFcnJvciIsImlzVXNlckVycm9yIiwiZ3JhcGhRTEVycm9ycyIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsInRyeUdldFVzZXJFcnJvciIsInJlZHVjZSIsInJlc3VsdCIsIm1lc3NhZ2UiLCJleHRlbnNpb25zIiwiY29kZSIsImNvZGVzIiwiQkFEX1VTRVJfSU5QVVQiLCJlcnJvcnMiLCJ1c2VySW5wdXRFcnJvcnMiLCJPYmplY3QiLCJrZXlzIiwibWFwIiwieCIsInBhdGgiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7O0FBQ0E7O0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxJQUFNQSxjQUFjLEdBQUcsU0FBakJBLGNBQWlCLENBQXVCQyxLQUF2QjtBQUFBLFNBQzVCLDJCQUFjQSxLQUFkLEtBQXdCLENBQUMsQ0FBQ0EsS0FBSyxDQUFDQyxZQURKO0FBQUEsQ0FBdkI7QUFHUDtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFDTyxJQUFNQyxXQUFXLEdBQUcsU0FBZEEsV0FBYyxDQUF1QkYsS0FBdkIsRUFBa0Q7QUFDM0UsTUFBSSwyQkFBY0EsS0FBZCxDQUFKLEVBQTBCO0FBQ3hCLFFBQVFHLGFBQVIsR0FBd0NILEtBQXhDLENBQVFHLGFBQVI7QUFBQSxRQUF1QkYsWUFBdkIsR0FBd0NELEtBQXhDLENBQXVCQyxZQUF2Qjs7QUFDQSxRQUFJLENBQUNBLFlBQUQsSUFBaUJHLEtBQUssQ0FBQ0MsT0FBTixDQUFjRixhQUFkLENBQWpCLElBQWlEQSxhQUFhLENBQUNHLE1BQWQsR0FBdUIsQ0FBNUUsRUFBK0U7QUFDN0UsYUFBTyxJQUFQO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPLEtBQVA7QUFDRCxDQVRNO0FBV1A7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBQ08sSUFBTUMsZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixDQUF1QlAsS0FBdkIsRUFBdUQ7QUFDcEYsTUFBSUUsV0FBVyxDQUFDRixLQUFELENBQWYsRUFBd0I7QUFDdEIsZUFBMkJBLEtBQTNCO0FBQUEsUUFBUUcsYUFBUixRQUFRQSxhQUFSO0FBRUEsV0FBT0EsYUFBYSxDQUFDSyxNQUFkLENBQW1DLFVBQUNDLE1BQUQsU0FBMEM7QUFBQSxVQUEvQkMsT0FBK0IsU0FBL0JBLE9BQStCO0FBQUEsbUNBQXRCQyxVQUFzQjtBQUFBLFVBQXRCQSxVQUFzQixpQ0FBVCxFQUFTOztBQUNsRixVQUFJQSxVQUFVLENBQUNDLElBQVgsS0FBb0JDLG9CQUFNQyxjQUExQixJQUE0Q0gsVUFBVSxDQUFDSSxNQUEzRCxFQUFtRTtBQUNqRSxZQUFRQSxNQUFSLEdBQW1CSixVQUFuQixDQUFRSSxNQUFSO0FBQ0EsWUFBTUMsZUFBZSxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWUgsTUFBWixFQUFvQkksR0FBcEIsQ0FBd0IsVUFBQUMsQ0FBQztBQUFBLGlCQUFLO0FBQ3BEVixZQUFBQSxPQUFPLEVBQUVLLE1BQU0sQ0FBQ0ssQ0FBRCxDQUFOLENBQVVWLE9BQVYsSUFBcUJLLE1BQU0sQ0FBQ0ssQ0FBRCxDQURnQjtBQUVwRFIsWUFBQUEsSUFBSSxFQUFFRyxNQUFNLENBQUNLLENBQUQsQ0FBTixDQUFVUixJQUFWLElBQWtCLFNBRjRCO0FBR3BEUyxZQUFBQSxJQUFJLEVBQUVEO0FBSDhDLFdBQUw7QUFBQSxTQUF6QixDQUF4QjtBQU1BLHlCQUFXWCxNQUFYLEVBQXNCTyxlQUF0QjtBQUNEOztBQUVELHVCQUFXUCxNQUFYLEdBQW1CO0FBQUVDLFFBQUFBLE9BQU8sRUFBUEEsT0FBRjtBQUFXRSxRQUFBQSxJQUFJLEVBQUVELFVBQVUsQ0FBQ0M7QUFBNUIsT0FBbkI7QUFDRCxLQWJNLEVBYUosRUFiSSxDQUFQO0FBY0Q7O0FBRUQsU0FBTyxFQUFQO0FBQ0QsQ0FyQk0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcG9sbG9FcnJvciwgaXNBcG9sbG9FcnJvciB9IGZyb20gJ0BhcG9sbG8vY2xpZW50JztcbmltcG9ydCB7IGNvZGVzIH0gZnJvbSAnQGRlaXR5L2ZhbGNvbi1lcnJvcnMnO1xuXG5leHBvcnQgdHlwZSBFcnJvck1vZGVsID0ge1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIGNvZGU6IHN0cmluZztcbiAgLyoqIHBhdGggdG8gcHJvcGVydHkgKG9uIG9wZXJhdGlvbiBpbnB1dCBvciBvcGVyYXRpb24gb3V0cHV0KSBvbiB3aGljaCBlcnJvciBvY2N1cnMgKi9cbiAgcGF0aD86IGFueTtcbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBgZXJyb3JgIGlzIEFwb2xsbyBuZXR3b3JrIGVycm9yXG4gKiBAcGFyYW0gZXJyb3JcbiAqL1xuZXhwb3J0IGNvbnN0IGlzTmV0d29ya0Vycm9yID0gPFRFcnJvciBleHRlbmRzIEVycm9yPihlcnJvcjogVEVycm9yKTogYm9vbGVhbiA9PlxuICBpc0Fwb2xsb0Vycm9yKGVycm9yKSAmJiAhIWVycm9yLm5ldHdvcmtFcnJvcjtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGBlcnJvcmAgaXMgQXBvbGxvIGdyYXBoUWwgZXJyb3IsIHdoaWNoIGlzIGNvbnNpZGVyZWQgYXMgdXNlciBlcnJvclxuICogQHBhcmFtIGVycm9yXG4gKi9cbmV4cG9ydCBjb25zdCBpc1VzZXJFcnJvciA9IDxURXJyb3IgZXh0ZW5kcyBFcnJvcj4oZXJyb3I6IFRFcnJvcik6IGJvb2xlYW4gPT4ge1xuICBpZiAoaXNBcG9sbG9FcnJvcihlcnJvcikpIHtcbiAgICBjb25zdCB7IGdyYXBoUUxFcnJvcnMsIG5ldHdvcmtFcnJvciB9ID0gZXJyb3I7XG4gICAgaWYgKCFuZXR3b3JrRXJyb3IgJiYgQXJyYXkuaXNBcnJheShncmFwaFFMRXJyb3JzKSAmJiBncmFwaFFMRXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogRXh0cmFjdCBhbGwgdXNlciBlcnJvcnMgaWYgYW55XG4gKiBAcGFyYW0gZXJyb3JcbiAqL1xuZXhwb3J0IGNvbnN0IHRyeUdldFVzZXJFcnJvciA9IDxURXJyb3IgZXh0ZW5kcyBFcnJvcj4oZXJyb3I6IFRFcnJvcik6IEVycm9yTW9kZWxbXSA9PiB7XG4gIGlmIChpc1VzZXJFcnJvcihlcnJvcikpIHtcbiAgICBjb25zdCB7IGdyYXBoUUxFcnJvcnMgfSA9IChlcnJvciBhcyBhbnkpIGFzIEFwb2xsb0Vycm9yO1xuXG4gICAgcmV0dXJuIGdyYXBoUUxFcnJvcnMucmVkdWNlPEVycm9yTW9kZWxbXT4oKHJlc3VsdCwgeyBtZXNzYWdlLCBleHRlbnNpb25zID0ge30gfSkgPT4ge1xuICAgICAgaWYgKGV4dGVuc2lvbnMuY29kZSA9PT0gY29kZXMuQkFEX1VTRVJfSU5QVVQgJiYgZXh0ZW5zaW9ucy5lcnJvcnMpIHtcbiAgICAgICAgY29uc3QgeyBlcnJvcnMgfSA9IGV4dGVuc2lvbnM7XG4gICAgICAgIGNvbnN0IHVzZXJJbnB1dEVycm9ycyA9IE9iamVjdC5rZXlzKGVycm9ycykubWFwKHggPT4gKHtcbiAgICAgICAgICBtZXNzYWdlOiBlcnJvcnNbeF0ubWVzc2FnZSB8fCBlcnJvcnNbeF0sXG4gICAgICAgICAgY29kZTogZXJyb3JzW3hdLmNvZGUgfHwgJ1VOS05PV04nLFxuICAgICAgICAgIHBhdGg6IHhcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHJldHVybiBbLi4ucmVzdWx0LCAuLi51c2VySW5wdXRFcnJvcnNdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gWy4uLnJlc3VsdCwgeyBtZXNzYWdlLCBjb2RlOiBleHRlbnNpb25zLmNvZGUgfV07XG4gICAgfSwgW10pO1xuICB9XG5cbiAgcmV0dXJuIFtdO1xufTtcbiJdfQ==