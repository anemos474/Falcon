import { ApolloClientNode, restoreApolloCache } from '../../apolloClient/ApolloClientNode';

/**
 * Apollo Client Provider middleware, sets ApolloClient on ctx.state.client
 * @param {object} params params
 * @param {object} params.config ApolloClient configuration
 * @param {object} params.cacheInitialData Apollo Cache initial data
 * @param {object} params.resolvers Apollo Client resolvers
 * @param {object} params.fragmentMatcherData
 * @param {string} params.graphqlUrl
 * @returns {import('koa').Middleware} Koa middleware function
 */
export default ({ config, cacheInitialData = {}, resolvers, fragmentMatcherData, graphqlUrl }) => {
  /**
   * @param {import('koa').Context} ctx
   * @param {} next
   */
  return async (ctx, next) => {
    const cache = restoreApolloCache({
      cacheInitialData: {
        ...cacheInitialData,
        geoLocation: ctx.state.geoLocation
      },
      fragmentMatcherData
    });

    ctx.state.apolloClient = new ApolloClientNode({
      ctx,
      cache,
      resolvers,
      config,
      graphqlUrl,
      falconScopeIdProvider: () => undefined
    });

    return next();
  };
};
