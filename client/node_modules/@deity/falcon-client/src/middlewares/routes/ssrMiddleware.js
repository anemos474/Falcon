import React from 'react';
import { getDataFromTree } from '@apollo/client/react/ssr';
import { ChunkExtractorManager } from '@loadable/server';
import { FalconClientApp } from '../../components/FalconClientApp';
/**
 * Server Side Rendering middleware.
 * @param {{ config }} params params
 * @param {object} params.config configuration
 * @param {object} params.App React Component to render
 * @returns {import('koa').Middleware} Koa middleware
 */
export default ({ config, App, cacheInitialData, resolvers }) => async (ctx, next) => {
  const { falconScope, apolloClient, i18next, serverTiming, geoLocation } = ctx.state;

  ctx.state.routerContext = {};
  ctx.state.helmetContext = {};

  const markup = (
    <ChunkExtractorManager extractor={ctx.state.chunkExtractor}>
      <FalconClientApp
        ctx={ctx}
        config={config}
        scope={falconScope}
        apolloClientCache={apolloClient.cache}
        geoLocation={geoLocation}
        cacheInitialData={cacheInitialData}
        resolvers={resolvers}
        i18next={i18next}
      >
        <App />
      </FalconClientApp>
    </ChunkExtractorManager>
  );

  await serverTiming.profile(async () => getDataFromTree(markup), 'getDataFromTree()');

  ctx.state.AppMarkup = markup;

  if (ctx.state.routerContext.url) {
    if (ctx.state.routerContext.status) ctx.status = ctx.state.routerContext.status;
    return ctx.redirect(ctx.state.routerContext.url);
  }

  return next();
};
