import { parse } from 'url';
import { GET_BACKEND_CONFIG, GET_GEO_LOCATION } from '@deity/falcon-data';
import { tryGetFalconScopeConfig } from '@deity/falcon-front-kit';
import { getFalconScope } from '../../components';

/**
 * @typedef {object} Options
 * @property {string} defaultId id of default scope
 */

/**
 * @param {Options} options
 * @returns {import('koa').Middleware} Koa middleware
 */
export default ({ defaultId }) => {
  return async (ctx, next) => {
    const { apolloClient } = ctx.state;

    const { data } = await apolloClient.query({ query: GET_BACKEND_CONFIG });
    const { geoLocation } = apolloClient.readQuery({ query: GET_GEO_LOCATION }) || {};
    const { scopes } = data.backendConfig;

    const falconClientScopeConfig = tryGetFalconScopeConfig(
      { scopes, defaultId },
      { url: parse(ctx.href), cookies: ctx.request.universalCookies, geoLocation },
      getFalconScope
    );

    ctx.state.falconScope = falconClientScopeConfig;

    return next();
  };
};
