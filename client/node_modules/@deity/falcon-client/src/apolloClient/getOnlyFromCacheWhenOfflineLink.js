import { ApolloLink, Observable } from '@apollo/client';

export function isOnline() {
  return window.navigator && window.navigator.onLine;
}

/**
 * Configure default Cache for ApolloClient
 * @returns {import('@apollo/client').ApolloLink}
 */
export const getOnlyFromCacheWhenOfflineLink = () => {
  return new ApolloLink((operation, forward) => {
    if (isOnline()) {
      return forward(operation);
    }

    const operationDefinition = operation.query.definitions.find(x => x.kind === 'OperationDefinition');
    if (!operationDefinition || (operationDefinition && operationDefinition.operation !== 'query')) {
      return forward(operation);
    }

    const { cache } = operation.getContext();
    try {
      const data = cache.read({
        query: operation.query,
        variables: operation.variables
      });

      const response = { data };
      // SEE: https://github.com/apollographql/apollo-link/blob/c32e170b72ae1a94cea1c633f977d2dbfcada0e1/packages/apollo-link-http/src/httpLink.ts#L133
      return new Observable(observer => {
        observer.next(response);
        observer.complete();

        return response;
      });
    } catch (error) {
      // cannot read from cache (e.g. because not found), so we forward this `operation` to let Apollo handle this state
      // TODO: check all possible reasons and rescue appropriately

      return forward(operation);
    }
  });
};
