/* eslint-disable import/newline-after-import */
import React from 'react';
import { ApolloProvider } from '@apollo/client';
import { useFalconScope } from '@deity/falcon-front-kit';
const AC =
  process.env.BUILD_TARGET === 'client'
    ? require('../apolloClient/ApolloClientWeb')
    : require('../apolloClient/ApolloClientNode');

/**
 * @typedef {object} ClientOfFalconServerProps
 * @property {import('koa').Context} ctx koa context
 * @property {import('@apollo/client/cache').InMemoryCache} cache
 * @property {object} resolvers
 * @property {import('@apollo/client').ApolloLink[]} [extraLinks=[]]
 * @property {import('@apollo/client').ApolloClientOptions} config
 * @property {string} graphqlUrl
 * @property {object} [cacheInitialData]
 */

export const ClientOfFalconServer = ({
  ctx,
  cache,
  resolvers,
  extraLinks,
  config,
  headers,
  graphqlUrl,
  cacheInitialData,
  children
}) => {
  const ApolloClient = process.env.BUILD_TARGET === 'client' ? AC.ApolloClientWeb : AC.ApolloClientNode;

  const falconScope = useFalconScope();

  const apolloClient =
    process.env.BUILD_TARGET === 'client'
      ? new ApolloClient({
          cache,
          resolvers,
          extraLinks,
          config,
          headers,
          falconScopeIdProvider: () => falconScope.current.id
        })
      : new ApolloClient({
          cache,
          resolvers,
          extraLinks,
          config,
          headers,
          falconScopeIdProvider: () => falconScope.current.id,
          graphqlUrl,
          ctx
        });
  apolloClient.onResetStore(() => cache.writeData({ data: cacheInitialData }));

  return <ApolloProvider client={apolloClient}>{children}</ApolloProvider>;
};
