import 'core-js';
import 'regenerator-runtime/runtime';
import 'app-webmanifest';

import { parse } from 'url';
import React from 'react';
import { Cookies } from 'react-cookie';
import { hydrate, render } from 'react-dom';
import { loadableReady } from '@loadable/component';
import { GET_BACKEND_CONFIG, GET_GEO_LOCATION } from '@deity/falcon-data';
import { getClientConfig, tryGetFalconScopeConfig } from '@deity/falcon-front-kit';
import { getFalconScope } from './components';
import { FalconClientApp } from './components/FalconClientApp';
import { ApolloClientWeb, restoreApolloCache } from './apolloClient/ApolloClientWeb';
import App, { apolloClientOptions } from './clientApp';
import i18nFactory from './i18n/i18nClientFactory';

// eslint-disable-next-line no-underscore-dangle
const apolloNormalizedState = window.__APOLLO_STATE__ || {};
const clientConfig = getClientConfig(apolloNormalizedState) || {};
const renderApp = clientConfig.serverSideRendering ? hydrate : render;

loadableReady()
  .then(() =>
    restoreApolloCache({
      fragmentMatcherData: apolloClientOptions.fragmentMatcherData,
      normalizedCache: apolloNormalizedState
    })
  )
  .then(apolloCache => {
    /** @type {import('@apollo/client').ApolloClient} */
    const apolloClient = new ApolloClientWeb({
      config: clientConfig.apolloClient,
      cache: apolloCache,
      resolvers: apolloClientOptions.resolvers
    });

    const { geoLocation } = apolloClient.readQuery({ query: GET_GEO_LOCATION }) || {};

    return apolloClient.query({ query: GET_BACKEND_CONFIG }).then(({ data }) => {
      const { scopes } = data.backendConfig;

      const { defaultId } = clientConfig.falconScope; // TODO: add config validation - scope.default is required!
      const falconClientScopeConfig = tryGetFalconScopeConfig(
        { scopes, defaultId },
        { url: parse(window.location.href), cookies: new Cookies(document.cookie), geoLocation },
        getFalconScope
      );

      return {
        scope: falconClientScopeConfig,
        apolloCache,
        geoLocation
      };
    });
  })
  .then(({ ...rest }) => {
    const { scope } = rest;
    const currentScope = scope.available.find(x => x.id === scope.currentId);

    return i18nFactory({
      ...clientConfig.i18n,
      lng: currentScope.languageTag
    }).then(i18next => ({ i18next, ...rest }));
  })
  .then(({ scope, apolloCache, i18next, geoLocation }) => {
    const markup = (
      <FalconClientApp
        config={clientConfig}
        scope={scope}
        geoLocation={geoLocation}
        apolloClientCache={apolloCache}
        cacheInitialData={apolloClientOptions.cacheInitialData}
        resolvers={apolloClientOptions.resolvers}
        i18next={i18next}
      >
        <App />
      </FalconClientApp>
    );

    return renderApp(markup, document.getElementById('root'));
  });

if (module.hot) {
  module.hot.accept();
}
