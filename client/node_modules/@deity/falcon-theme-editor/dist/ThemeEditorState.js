"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.ThemeEditorState = exports.ThemeStateContext = void 0;

var _inheritsLoose2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/inheritsLoose"));

var _falconUi = /*#__PURE__*/require("@deity/falcon-ui");

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var ThemeStateContext = /*#__PURE__*/_react.default.createContext({});

exports.ThemeStateContext = ThemeStateContext;

var ThemeEditorState = /*#__PURE__*/function (_React$Component) {
  (0, _inheritsLoose2.default)(ThemeEditorState, _React$Component);

  function ThemeEditorState(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;

    _this.setActiveTab = function (tabKey) {
      _this.setState({
        activeTab: tabKey
      });
    };

    _this.setActivePreset = function (presetKey) {
      _this.setState(function (state) {
        var tabs = Object.assign({}, state.tabs);
        var presets = Object.assign({}, Object.assign({}, tabs.presets));
        presets.active = presetKey;
        tabs.presets = presets;
        return {
          tabs: tabs
        };
      });
    };

    _this.updateTheme = function (themeDiff, _temp) {
      var _ref = _temp === void 0 ? {} : _temp,
          _ref$useInitial = _ref.useInitial,
          useInitial = _ref$useInitial === void 0 ? false : _ref$useInitial;

      requestAnimationFrame(function () {
        _this.setState(function (state) {
          var themeBase = useInitial ? _this.props.initial : state.activeTheme;
          return {
            activeTheme: (0, _falconUi.mergeThemes)(themeBase, themeDiff)
          };
        });
      });
    };

    _this.toggleFinder = function () {
      _this.setState(function (state) {
        return {
          finderActive: !state.finderActive
        };
      });
    };

    _this.toggleVisibility = function () {
      _this.setState(function (state) {
        return {
          visible: !state.visible
        };
      });
    };

    _this.selectComponents = function (components) {
      requestAnimationFrame(function () {
        _this.setState(function (state) {
          var tabs = Object.assign({}, state.tabs);
          tabs.component = {
            selectedComponents: components
          };
          return {
            tabs: tabs,
            activeTab: 'component',
            visible: true,
            finderActive: false
          };
        });
      });
    };

    _this.toggleOpenPanel = function (key) {
      _this.setState(function (state) {
        var tabs = Object.assign({}, state.tabs);
        var openPanels = Object.assign({}, Object.assign({}, tabs.theme).openPanels);
        openPanels[key] = !openPanels[key];
        tabs.theme.openPanels = openPanels;
        return {
          tabs: tabs
        };
      });
    };

    _this.openThemePropsPanel = function (panel, subpanel) {
      _this.setState(function (state) {
        var _openPanels;

        var tabs = Object.assign({}, state.tabs);
        var openPanels = (_openPanels = {}, _openPanels[panel] = true, _openPanels);

        if (subpanel) {
          openPanels[panel + subpanel] = true;
        }

        tabs.theme.openPanels = openPanels;
        return {
          tabs: tabs,
          activeTab: 'theme',
          visible: true
        };
      });
    };

    _this.state = {
      activeTheme: props.initial,
      // eslint-disable-next-line react/no-unused-state
      initialTheme: props.initial,
      visible: false,
      finderActive: false,
      activeTab: 'theme',
      tabs: {
        theme: {
          openPanels: {}
        },
        component: {
          selectedComponents: []
        },
        presets: {
          active: 'Deity Green'
        }
      },
      presets: props.presets
    };
    return _this;
  }

  var _proto = ThemeEditorState.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/_react.default.createElement(ThemeStateContext.Provider, {
      value: {
        selectComponents: this.selectComponents,
        openThemePropsPanel: this.openThemePropsPanel,
        toggleFinder: this.toggleFinder,
        finderActive: this.state.finderActive,
        presets: this.state.presets
      }
    }, this.props.children({
      theme: this.state.activeTheme,
      updateTheme: this.updateTheme,
      initialTheme: this.props.initial,
      selectComponents: this.selectComponents,
      toggleVisibility: this.toggleVisibility,
      toggleFinder: this.toggleFinder,
      visible: this.state.visible,
      finderActive: this.state.finderActive,
      activeTab: this.state.activeTab,
      setActiveTab: this.setActiveTab,
      tabs: this.state.tabs,
      toggleOpenPanel: this.toggleOpenPanel,
      setActivePreset: this.setActivePreset
    }));
  };

  return ThemeEditorState;
}(_react.default.Component);

exports.ThemeEditorState = ThemeEditorState;
ThemeEditorState.defaultProps = {
  presets: []
};

ThemeEditorState.getDerivedStateFromProps = function (props, state) {
  if (props.initial !== state.initialTheme) {
    return {
      activeTheme: props.initial,
      initialTheme: props.initial
    };
  }

  return null;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,