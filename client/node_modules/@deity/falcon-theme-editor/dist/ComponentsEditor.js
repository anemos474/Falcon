"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.ComponentsEditor = void 0;

var _inheritsLoose2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/inheritsLoose"));

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _falconUi = /*#__PURE__*/require("@deity/falcon-ui");

var _thememeta = /*#__PURE__*/require("./thememeta");

function keys(object) {
  return Object.keys(object);
}

var ThemedPropEditor = function ThemedPropEditor(_ref) {
  var themeProp = _ref.themeProp,
      themeSection = _ref.themeSection,
      _onChange = _ref.onChange,
      propKey = _ref.propKey,
      propValue = _ref.propValue;
  var meta = _thememeta.themeMeta[themeProp];
  if (!meta) return null;
  return /*#__PURE__*/_react.default.createElement(_falconUi.Dropdown, {
    onChange: function onChange(value) {
      return _onChange(value.key, value.value);
    }
  }, /*#__PURE__*/_react.default.createElement(_falconUi.DropdownLabel, {
    css: {
      width: '100%'
    }
  }, /*#__PURE__*/_react.default.createElement(_falconUi.GridLayout, {
    gridTemplateColumns: "auto 1fr"
  }, /*#__PURE__*/_react.default.createElement(_falconUi.Box, null, propValue, /*#__PURE__*/_react.default.createElement(_falconUi.Box, {
    as: "span",
    fontSize: "xs",
    ml: "xs"
  }, "(", themeSection[propValue], meta.unit, ")")), meta.previewCss && /*#__PURE__*/_react.default.createElement(_falconUi.Box, {
    justifySelf: "end",
    bg: "secondaryLight",
    border: "regular",
    borderColor: "secondaryDark",
    size: "md",
    css: meta.previewCss(themeSection[propValue])
  }))), /*#__PURE__*/_react.default.createElement(_falconUi.DropdownMenu, null, keys(themeSection).map(function (key) {
    return /*#__PURE__*/_react.default.createElement(_falconUi.DropdownMenuItem, {
      key: key,
      value: {
        key: propKey,
        value: key
      },
      pl: "sm",
      pr: "xxl",
      color: key === propValue ? 'primaryText' : 'secondaryText',
      bg: key === propValue ? 'primary' : 'transparent'
    }, /*#__PURE__*/_react.default.createElement(_falconUi.GridLayout, {
      gridTemplateColumns: "auto 1fr"
    }, /*#__PURE__*/_react.default.createElement(_falconUi.Box, null, key, /*#__PURE__*/_react.default.createElement(_falconUi.Box, {
      as: "span",
      fontSize: "xs",
      ml: "xs"
    }, "(", themeSection[key], meta.unit, ")")), meta.previewCss && /*#__PURE__*/_react.default.createElement(_falconUi.Box, {
      justifySelf: "end",
      bg: "secondaryLight",
      border: "regular",
      borderColor: "secondaryDark",
      size: "md",
      css: meta.previewCss(themeSection[key])
    })));
  })));
};

var ComponentEditor = /*#__PURE__*/function (_React$Component) {
  (0, _inheritsLoose2.default)(ComponentEditor, _React$Component);

  function ComponentEditor() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = ComponentEditor.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        theme = _this$props.theme,
        themeProps = _this$props.themeProps,
        defaultThemeProps = _this$props.defaultThemeProps,
        _onChange3 = _this$props.onChange;
    var mergedProps = (0, _falconUi.mergeThemes)(defaultThemeProps, themeProps || {});
    return /*#__PURE__*/_react.default.createElement(_falconUi.Box, null, keys(_falconUi.mappings).filter(function (mapping) {
      return mergedProps[mapping] !== undefined;
    }).map(function (prop) {
      var _ref2 = _falconUi.mappings[prop],
          themeProp = _ref2.themeProp;
      var propValue = mergedProps[prop];
      return /*#__PURE__*/_react.default.createElement(_falconUi.GridLayout, {
        key: prop,
        gridTemplateColumns: "120px 1fr",
        mb: "md",
        alignItems: "center"
      }, /*#__PURE__*/_react.default.createElement(_falconUi.Text, {
        p: "none",
        ellipsis: true
      }, prop), typeof propValue === 'string' && (themeProp ? /*#__PURE__*/_react.default.createElement(ThemedPropEditor, {
        propKey: prop,
        propValue: propValue,
        themeProp: themeProp,
        themeSection: theme[themeProp],
        onChange: _onChange3
      }) : /*#__PURE__*/_react.default.createElement(_falconUi.Input, {
        border: "none",
        fontWeight: "bold",
        value: propValue,
        readOnly: true
      })), typeof propValue === 'object' && /*#__PURE__*/_react.default.createElement(_falconUi.GridLayout, {
        gridGap: "sm",
        border: "regular",
        borderColor: "secondary",
        borderRadius: "medium",
        p: "sm"
      }, keys(propValue).map(function (breakpointKey) {
        return /*#__PURE__*/_react.default.createElement(_falconUi.Box, null, /*#__PURE__*/_react.default.createElement(_falconUi.Text, {
          pb: "xs"
        }, breakpointKey, /*#__PURE__*/_react.default.createElement(_falconUi.Box, {
          as: "span",
          ml: "xs",
          fontSize: "xs"
        }, "(min-width: ", theme.breakpoints[breakpointKey], "px)")), themeProp ? /*#__PURE__*/_react.default.createElement(ThemedPropEditor, {
          propKey: prop,
          propValue: propValue[breakpointKey],
          themeProp: themeProp,
          themeSection: theme[themeProp],
          onChange: function onChange(key, value) {
            var _onChange2;

            _onChange3(key, (_onChange2 = {}, _onChange2[breakpointKey] = value, _onChange2));
          }
        }) : /*#__PURE__*/_react.default.createElement(_falconUi.Input, {
          border: "none",
          fontWeight: "bold",
          value: propValue[breakpointKey],
          readOnly: true
        }));
      })));
    }));
  };

  return ComponentEditor;
}(_react.default.Component);

var ComponentsEditor = function ComponentsEditor(_ref3) {
  var theme = _ref3.theme,
      selectedComponents = _ref3.selectedComponents,
      onComponentThemeChange = _ref3.onComponentThemeChange;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, selectedComponents.map(function (selectedComponent) {
    var themeKey = Object.keys(selectedComponent.defaultTheme)[0];
    return /*#__PURE__*/_react.default.createElement(_falconUi.Box, {
      key: themeKey
    }, /*#__PURE__*/_react.default.createElement(_falconUi.H3, {
      mb: "md"
    }, themeKey, " theme"), /*#__PURE__*/_react.default.createElement(ComponentEditor, {
      defaultThemeProps: selectedComponent.defaultTheme[themeKey],
      themeProps: theme.components[themeKey],
      theme: theme,
      onChange: onComponentThemeChange(themeKey)
    }), selectedComponent.defaultTheme[themeKey].variants && /*#__PURE__*/_react.default.createElement(_falconUi.Box, null, Object.keys(selectedComponent.defaultTheme[themeKey].variants).map(function (variantKey) {
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, {
        key: variantKey
      }, /*#__PURE__*/_react.default.createElement(_falconUi.H3, {
        fontSize: "md",
        my: "md"
      }, "variant: ", variantKey), /*#__PURE__*/_react.default.createElement(ComponentEditor, {
        defaultThemeProps: selectedComponent.defaultTheme[themeKey].variants[variantKey],
        themeProps: theme.components[themeKey] && theme.components[themeKey].variants && theme.components[themeKey].variants[variantKey],
        theme: theme,
        onChange: onComponentThemeChange(themeKey, variantKey)
      }));
    })));
  }));
};

exports.ComponentsEditor = ComponentsEditor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Db21wb25lbnRzRWRpdG9yLnRzeCJdLCJuYW1lcyI6WyJrZXlzIiwib2JqZWN0IiwiT2JqZWN0IiwiVGhlbWVkUHJvcEVkaXRvciIsInRoZW1lUHJvcCIsInRoZW1lU2VjdGlvbiIsIm9uQ2hhbmdlIiwicHJvcEtleSIsInByb3BWYWx1ZSIsIm1ldGEiLCJ0aGVtZU1ldGEiLCJ2YWx1ZSIsImtleSIsIndpZHRoIiwidW5pdCIsInByZXZpZXdDc3MiLCJtYXAiLCJDb21wb25lbnRFZGl0b3IiLCJyZW5kZXIiLCJwcm9wcyIsInRoZW1lIiwidGhlbWVQcm9wcyIsImRlZmF1bHRUaGVtZVByb3BzIiwibWVyZ2VkUHJvcHMiLCJtYXBwaW5ncyIsImZpbHRlciIsIm1hcHBpbmciLCJ1bmRlZmluZWQiLCJwcm9wIiwiYnJlYWtwb2ludEtleSIsImJyZWFrcG9pbnRzIiwiUmVhY3QiLCJDb21wb25lbnQiLCJDb21wb25lbnRzRWRpdG9yIiwic2VsZWN0ZWRDb21wb25lbnRzIiwib25Db21wb25lbnRUaGVtZUNoYW5nZSIsInNlbGVjdGVkQ29tcG9uZW50IiwidGhlbWVLZXkiLCJkZWZhdWx0VGhlbWUiLCJjb21wb25lbnRzIiwidmFyaWFudHMiLCJ2YXJpYW50S2V5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFnQkE7O0FBR0EsU0FBU0EsSUFBVCxDQUFpQkMsTUFBakIsRUFBNEI7QUFDMUIsU0FBT0MsTUFBTSxDQUFDRixJQUFQLENBQVlDLE1BQVosQ0FBUDtBQUNEOztBQW1CRCxJQUFNRSxnQkFBa0QsR0FBRyxTQUFyREEsZ0JBQXFELE9BTXJEO0FBQUEsTUFMSkMsU0FLSSxRQUxKQSxTQUtJO0FBQUEsTUFKSkMsWUFJSSxRQUpKQSxZQUlJO0FBQUEsTUFISkMsU0FHSSxRQUhKQSxRQUdJO0FBQUEsTUFGSkMsT0FFSSxRQUZKQSxPQUVJO0FBQUEsTUFESkMsU0FDSSxRQURKQSxTQUNJO0FBQ0osTUFBTUMsSUFBSSxHQUFHQyxxQkFBVU4sU0FBVixDQUFiO0FBQ0EsTUFBSSxDQUFDSyxJQUFMLEVBQVcsT0FBTyxJQUFQO0FBRVgsc0JBQ0UsNkJBQUMsa0JBQUQ7QUFBVSxJQUFBLFFBQVEsRUFBRSxrQkFBQUUsS0FBSztBQUFBLGFBQUlMLFNBQVEsQ0FBQ0ssS0FBSyxDQUFDQyxHQUFQLEVBQVlELEtBQUssQ0FBQ0EsS0FBbEIsQ0FBWjtBQUFBO0FBQXpCLGtCQUNFLDZCQUFDLHVCQUFEO0FBQWUsSUFBQSxHQUFHLEVBQUU7QUFBRUUsTUFBQUEsS0FBSyxFQUFFO0FBQVQ7QUFBcEIsa0JBQ0UsNkJBQUMsb0JBQUQ7QUFBWSxJQUFBLG1CQUFtQixFQUFDO0FBQWhDLGtCQUNFLDZCQUFDLGFBQUQsUUFDR0wsU0FESCxlQUVFLDZCQUFDLGFBQUQ7QUFBSyxJQUFBLEVBQUUsRUFBQyxNQUFSO0FBQWUsSUFBQSxRQUFRLEVBQUMsSUFBeEI7QUFBNkIsSUFBQSxFQUFFLEVBQUM7QUFBaEMsVUFDSUgsWUFBWSxDQUFDRyxTQUFELENBRGhCLEVBRUdDLElBQUksQ0FBQ0ssSUFGUixNQUZGLENBREYsRUFTR0wsSUFBSSxDQUFDTSxVQUFMLGlCQUNDLDZCQUFDLGFBQUQ7QUFDRSxJQUFBLFdBQVcsRUFBQyxLQURkO0FBRUUsSUFBQSxFQUFFLEVBQUMsZ0JBRkw7QUFHRSxJQUFBLE1BQU0sRUFBQyxTQUhUO0FBSUUsSUFBQSxXQUFXLEVBQUMsZUFKZDtBQUtFLElBQUEsSUFBSSxFQUFDLElBTFA7QUFNRSxJQUFBLEdBQUcsRUFBRU4sSUFBSSxDQUFDTSxVQUFMLENBQWdCVixZQUFZLENBQUNHLFNBQUQsQ0FBNUI7QUFOUCxJQVZKLENBREYsQ0FERixlQXdCRSw2QkFBQyxzQkFBRCxRQUNHUixJQUFJLENBQUNLLFlBQUQsQ0FBSixDQUFtQlcsR0FBbkIsQ0FBdUIsVUFBQUosR0FBRztBQUFBLHdCQUN6Qiw2QkFBQywwQkFBRDtBQUNFLE1BQUEsR0FBRyxFQUFFQSxHQURQO0FBRUUsTUFBQSxLQUFLLEVBQUU7QUFBRUEsUUFBQUEsR0FBRyxFQUFFTCxPQUFQO0FBQWdCSSxRQUFBQSxLQUFLLEVBQUVDO0FBQXZCLE9BRlQ7QUFHRSxNQUFBLEVBQUUsRUFBQyxJQUhMO0FBSUUsTUFBQSxFQUFFLEVBQUMsS0FKTDtBQUtFLE1BQUEsS0FBSyxFQUFFQSxHQUFHLEtBQUtKLFNBQVIsR0FBb0IsYUFBcEIsR0FBb0MsZUFMN0M7QUFNRSxNQUFBLEVBQUUsRUFBRUksR0FBRyxLQUFLSixTQUFSLEdBQW9CLFNBQXBCLEdBQWdDO0FBTnRDLG9CQVFFLDZCQUFDLG9CQUFEO0FBQVksTUFBQSxtQkFBbUIsRUFBQztBQUFoQyxvQkFDRSw2QkFBQyxhQUFELFFBQ0dJLEdBREgsZUFFRSw2QkFBQyxhQUFEO0FBQUssTUFBQSxFQUFFLEVBQUMsTUFBUjtBQUFlLE1BQUEsUUFBUSxFQUFDLElBQXhCO0FBQTZCLE1BQUEsRUFBRSxFQUFDO0FBQWhDLFlBQ0lQLFlBQVksQ0FBQ08sR0FBRCxDQURoQixFQUVHSCxJQUFJLENBQUNLLElBRlIsTUFGRixDQURGLEVBUUdMLElBQUksQ0FBQ00sVUFBTCxpQkFDQyw2QkFBQyxhQUFEO0FBQ0UsTUFBQSxXQUFXLEVBQUMsS0FEZDtBQUVFLE1BQUEsRUFBRSxFQUFDLGdCQUZMO0FBR0UsTUFBQSxNQUFNLEVBQUMsU0FIVDtBQUlFLE1BQUEsV0FBVyxFQUFDLGVBSmQ7QUFLRSxNQUFBLElBQUksRUFBQyxJQUxQO0FBTUUsTUFBQSxHQUFHLEVBQUVOLElBQUksQ0FBQ00sVUFBTCxDQUFnQlYsWUFBWSxDQUFDTyxHQUFELENBQTVCO0FBTlAsTUFUSixDQVJGLENBRHlCO0FBQUEsR0FBMUIsQ0FESCxDQXhCRixDQURGO0FBMkRELENBckVEOztJQXVFTUssZTs7Ozs7Ozs7O1NBQ0pDLE0sR0FBQSxrQkFBUztBQUNQLHNCQUEyRCxLQUFLQyxLQUFoRTtBQUFBLFFBQVFDLEtBQVIsZUFBUUEsS0FBUjtBQUFBLFFBQWVDLFVBQWYsZUFBZUEsVUFBZjtBQUFBLFFBQTJCQyxpQkFBM0IsZUFBMkJBLGlCQUEzQjtBQUFBLFFBQThDaEIsVUFBOUMsZUFBOENBLFFBQTlDO0FBRUEsUUFBTWlCLFdBQVcsR0FBRywyQkFBWUQsaUJBQVosRUFBdUNELFVBQVUsSUFBSSxFQUFyRCxDQUFwQjtBQUVBLHdCQUNFLDZCQUFDLGFBQUQsUUFDR3JCLElBQUksQ0FBQ3dCLGtCQUFELENBQUosQ0FDRUMsTUFERixDQUNTLFVBQUFDLE9BQU87QUFBQSxhQUFJSCxXQUFXLENBQUNHLE9BQUQsQ0FBWCxLQUF5QkMsU0FBN0I7QUFBQSxLQURoQixFQUVFWCxHQUZGLENBRU0sVUFBQ1ksSUFBRCxFQUFpQztBQUNwQyxrQkFBc0JKLG1CQUFTSSxJQUFULENBQXRCO0FBQUEsVUFBUXhCLFNBQVIsU0FBUUEsU0FBUjtBQUNBLFVBQU1JLFNBQVMsR0FBR2UsV0FBVyxDQUFDSyxJQUFELENBQTdCO0FBRUEsMEJBQ0UsNkJBQUMsb0JBQUQ7QUFBWSxRQUFBLEdBQUcsRUFBRUEsSUFBakI7QUFBdUIsUUFBQSxtQkFBbUIsRUFBQyxXQUEzQztBQUF1RCxRQUFBLEVBQUUsRUFBQyxJQUExRDtBQUErRCxRQUFBLFVBQVUsRUFBQztBQUExRSxzQkFDRSw2QkFBQyxjQUFEO0FBQU0sUUFBQSxDQUFDLEVBQUMsTUFBUjtBQUFlLFFBQUEsUUFBUTtBQUF2QixTQUNHQSxJQURILENBREYsRUFLRyxPQUFPcEIsU0FBUCxLQUFxQixRQUFyQixLQUNFSixTQUFTLGdCQUNSLDZCQUFDLGdCQUFEO0FBQ0UsUUFBQSxPQUFPLEVBQUV3QixJQURYO0FBRUUsUUFBQSxTQUFTLEVBQUVwQixTQUZiO0FBR0UsUUFBQSxTQUFTLEVBQUVKLFNBSGI7QUFJRSxRQUFBLFlBQVksRUFBRWdCLEtBQUssQ0FBQ2hCLFNBQUQsQ0FKckI7QUFLRSxRQUFBLFFBQVEsRUFBRUU7QUFMWixRQURRLGdCQVNSLDZCQUFDLGVBQUQ7QUFBTyxRQUFBLE1BQU0sRUFBQyxNQUFkO0FBQXFCLFFBQUEsVUFBVSxFQUFDLE1BQWhDO0FBQXVDLFFBQUEsS0FBSyxFQUFFRSxTQUE5QztBQUFtRSxRQUFBLFFBQVE7QUFBM0UsUUFWSCxDQUxILEVBa0JHLE9BQU9BLFNBQVAsS0FBcUIsUUFBckIsaUJBQ0MsNkJBQUMsb0JBQUQ7QUFBWSxRQUFBLE9BQU8sRUFBQyxJQUFwQjtBQUF5QixRQUFBLE1BQU0sRUFBQyxTQUFoQztBQUEwQyxRQUFBLFdBQVcsRUFBQyxXQUF0RDtBQUFrRSxRQUFBLFlBQVksRUFBQyxRQUEvRTtBQUF3RixRQUFBLENBQUMsRUFBQztBQUExRixTQUNHUixJQUFJLENBQUNRLFNBQUQsQ0FBSixDQUFnQlEsR0FBaEIsQ0FBb0IsVUFBQWEsYUFBYTtBQUFBLDRCQUNoQyw2QkFBQyxhQUFELHFCQUNFLDZCQUFDLGNBQUQ7QUFBTSxVQUFBLEVBQUUsRUFBQztBQUFULFdBQ0dBLGFBREgsZUFFRSw2QkFBQyxhQUFEO0FBQUssVUFBQSxFQUFFLEVBQUMsTUFBUjtBQUFlLFVBQUEsRUFBRSxFQUFDLElBQWxCO0FBQXVCLFVBQUEsUUFBUSxFQUFDO0FBQWhDLDJCQUNlVCxLQUFLLENBQUNVLFdBQU4sQ0FBa0JELGFBQWxCLENBRGYsUUFGRixDQURGLEVBUUd6QixTQUFTLGdCQUNSLDZCQUFDLGdCQUFEO0FBQ0UsVUFBQSxPQUFPLEVBQUV3QixJQURYO0FBRUUsVUFBQSxTQUFTLEVBQUVwQixTQUFTLENBQUNxQixhQUFELENBRnRCO0FBR0UsVUFBQSxTQUFTLEVBQUV6QixTQUhiO0FBSUUsVUFBQSxZQUFZLEVBQUVnQixLQUFLLENBQUNoQixTQUFELENBSnJCO0FBS0UsVUFBQSxRQUFRLEVBQUUsa0JBQUNRLEdBQUQsRUFBTUQsS0FBTixFQUFnQjtBQUFBOztBQUN4QkwsWUFBQUEsVUFBUSxDQUFDTSxHQUFELCtCQUNMaUIsYUFESyxJQUNXbEIsS0FEWCxjQUFSO0FBR0Q7QUFUSCxVQURRLGdCQWFSLDZCQUFDLGVBQUQ7QUFBTyxVQUFBLE1BQU0sRUFBQyxNQUFkO0FBQXFCLFVBQUEsVUFBVSxFQUFDLE1BQWhDO0FBQXVDLFVBQUEsS0FBSyxFQUFFSCxTQUFTLENBQUNxQixhQUFELENBQXZEO0FBQXdFLFVBQUEsUUFBUTtBQUFoRixVQXJCSixDQURnQztBQUFBLE9BQWpDLENBREgsQ0FuQkosQ0FERjtBQW1ERCxLQXpERixDQURILENBREY7QUE4REQsRzs7O0VBcEUyQkUsZUFBTUMsUzs7QUE2RTdCLElBQU1DLGdCQUFrRCxHQUFHLFNBQXJEQSxnQkFBcUQ7QUFBQSxNQUNoRWIsS0FEZ0UsU0FDaEVBLEtBRGdFO0FBQUEsTUFFaEVjLGtCQUZnRSxTQUVoRUEsa0JBRmdFO0FBQUEsTUFHaEVDLHNCQUhnRSxTQUdoRUEsc0JBSGdFO0FBQUEsc0JBS2hFLDREQUNHRCxrQkFBa0IsQ0FBQ2xCLEdBQW5CLENBQXVCLFVBQUFvQixpQkFBaUIsRUFBSTtBQUMzQyxRQUFNQyxRQUFRLEdBQUduQyxNQUFNLENBQUNGLElBQVAsQ0FBWW9DLGlCQUFpQixDQUFDRSxZQUE5QixFQUE0QyxDQUE1QyxDQUFqQjtBQUVBLHdCQUNFLDZCQUFDLGFBQUQ7QUFBSyxNQUFBLEdBQUcsRUFBRUQ7QUFBVixvQkFDRSw2QkFBQyxZQUFEO0FBQUksTUFBQSxFQUFFLEVBQUM7QUFBUCxPQUFhQSxRQUFiLFdBREYsZUFHRSw2QkFBQyxlQUFEO0FBQ0UsTUFBQSxpQkFBaUIsRUFBRUQsaUJBQWlCLENBQUNFLFlBQWxCLENBQStCRCxRQUEvQixDQURyQjtBQUVFLE1BQUEsVUFBVSxFQUFFakIsS0FBSyxDQUFDbUIsVUFBTixDQUFpQkYsUUFBakIsQ0FGZDtBQUdFLE1BQUEsS0FBSyxFQUFFakIsS0FIVDtBQUlFLE1BQUEsUUFBUSxFQUFFZSxzQkFBc0IsQ0FBQ0UsUUFBRDtBQUpsQyxNQUhGLEVBVUdELGlCQUFpQixDQUFDRSxZQUFsQixDQUErQkQsUUFBL0IsRUFBeUNHLFFBQXpDLGlCQUNDLDZCQUFDLGFBQUQsUUFDR3RDLE1BQU0sQ0FBQ0YsSUFBUCxDQUFhb0MsaUJBQWlCLENBQUNFLFlBQWxCLENBQStCRCxRQUEvQixDQUFELENBQWtERyxRQUE5RCxFQUF3RXhCLEdBQXhFLENBQTRFLFVBQUF5QixVQUFVO0FBQUEsMEJBQ3JGLDZCQUFDLGNBQUQsQ0FBTyxRQUFQO0FBQWdCLFFBQUEsR0FBRyxFQUFFQTtBQUFyQixzQkFDRSw2QkFBQyxZQUFEO0FBQUksUUFBQSxRQUFRLEVBQUMsSUFBYjtBQUFrQixRQUFBLEVBQUUsRUFBQztBQUFyQixzQkFDWUEsVUFEWixDQURGLGVBSUUsNkJBQUMsZUFBRDtBQUNFLFFBQUEsaUJBQWlCLEVBQUdMLGlCQUFpQixDQUFDRSxZQUFsQixDQUErQkQsUUFBL0IsQ0FBRCxDQUFrREcsUUFBbEQsQ0FBMkRDLFVBQTNELENBRHJCO0FBRUUsUUFBQSxVQUFVLEVBQ1JyQixLQUFLLENBQUNtQixVQUFOLENBQWlCRixRQUFqQixLQUNBakIsS0FBSyxDQUFDbUIsVUFBTixDQUFpQkYsUUFBakIsRUFBMkJHLFFBRDNCLElBRUFwQixLQUFLLENBQUNtQixVQUFOLENBQWlCRixRQUFqQixFQUEyQkcsUUFBM0IsQ0FBcUNDLFVBQXJDLENBTEo7QUFPRSxRQUFBLEtBQUssRUFBRXJCLEtBUFQ7QUFRRSxRQUFBLFFBQVEsRUFBRWUsc0JBQXNCLENBQUNFLFFBQUQsRUFBV0ksVUFBWDtBQVJsQyxRQUpGLENBRHFGO0FBQUEsS0FBdEYsQ0FESCxDQVhKLENBREY7QUFrQ0QsR0FyQ0EsQ0FESCxDQUxnRTtBQUFBLENBQTNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gIFRoZW1lLFxuICBtYXBwaW5ncyxcbiAgQ29tcG9uZW50VGhlbWUsXG4gIG1lcmdlVGhlbWVzLFxuICBCb3gsXG4gIERyb3Bkb3duLFxuICBEcm9wZG93bkxhYmVsLFxuICBEcm9wZG93bk1lbnUsXG4gIERyb3Bkb3duTWVudUl0ZW0sXG4gIEdyaWRMYXlvdXQsXG4gIFJlc3BvbnNpdmVQcm9wTWFwcGluZyxcbiAgVGV4dCxcbiAgSDMsXG4gIElucHV0XG59IGZyb20gJ0BkZWl0eS9mYWxjb24tdWknO1xuaW1wb3J0IHsgdGhlbWVNZXRhIH0gZnJvbSAnLi90aGVtZW1ldGEnO1xuaW1wb3J0IHsgQ29tcG9uZW50V2l0aERlZmF1bHRUaGVtZSB9IGZyb20gJy4nO1xuXG5mdW5jdGlvbiBrZXlzPE8+KG9iamVjdDogTykge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqZWN0KSBhcyAoa2V5b2YgTylbXTtcbn1cblxudHlwZSBDb21wb25lbnRFZGl0b3JQcm9wcyA9IHtcbiAgdGhlbWU6IFRoZW1lO1xuICBkZWZhdWx0VGhlbWVQcm9wczogQ29tcG9uZW50VGhlbWU8e30+O1xuICB0aGVtZVByb3BzPzogQ29tcG9uZW50VGhlbWU8e30+O1xuICBvbkNoYW5nZTogKGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nIHwgb2JqZWN0KSA9PiB2b2lkO1xufTtcblxudHlwZSBUaGVtZWRQcm9wRWRpdG9yUHJvcHMgPSB7XG4gIG9uQ2hhbmdlOiAoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7XG4gIHRoZW1lUHJvcDoga2V5b2YgVGhlbWU7XG4gIHRoZW1lU2VjdGlvbjoge1xuICAgIFtuYW1lOiBzdHJpbmddOiBhbnk7XG4gIH07XG4gIHByb3BWYWx1ZTogc3RyaW5nOyAvLyB3YXJ0b3NjIHVzdGF3aW9uYSBvYmVjbmllIHcgdGhlbWVcbiAgcHJvcEtleTogc3RyaW5nO1xufTtcblxuY29uc3QgVGhlbWVkUHJvcEVkaXRvcjogUmVhY3QuU0ZDPFRoZW1lZFByb3BFZGl0b3JQcm9wcz4gPSAoe1xuICB0aGVtZVByb3AsXG4gIHRoZW1lU2VjdGlvbixcbiAgb25DaGFuZ2UsXG4gIHByb3BLZXksXG4gIHByb3BWYWx1ZVxufSkgPT4ge1xuICBjb25zdCBtZXRhID0gdGhlbWVNZXRhW3RoZW1lUHJvcF07XG4gIGlmICghbWV0YSkgcmV0dXJuIG51bGw7XG5cbiAgcmV0dXJuIChcbiAgICA8RHJvcGRvd24gb25DaGFuZ2U9e3ZhbHVlID0+IG9uQ2hhbmdlKHZhbHVlLmtleSwgdmFsdWUudmFsdWUpfT5cbiAgICAgIDxEcm9wZG93bkxhYmVsIGNzcz17eyB3aWR0aDogJzEwMCUnIH19PlxuICAgICAgICA8R3JpZExheW91dCBncmlkVGVtcGxhdGVDb2x1bW5zPVwiYXV0byAxZnJcIj5cbiAgICAgICAgICA8Qm94PlxuICAgICAgICAgICAge3Byb3BWYWx1ZX1cbiAgICAgICAgICAgIDxCb3ggYXM9XCJzcGFuXCIgZm9udFNpemU9XCJ4c1wiIG1sPVwieHNcIj5cbiAgICAgICAgICAgICAgKHt0aGVtZVNlY3Rpb25bcHJvcFZhbHVlXX1cbiAgICAgICAgICAgICAge21ldGEudW5pdH0pXG4gICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICA8L0JveD5cblxuICAgICAgICAgIHttZXRhLnByZXZpZXdDc3MgJiYgKFxuICAgICAgICAgICAgPEJveFxuICAgICAgICAgICAgICBqdXN0aWZ5U2VsZj1cImVuZFwiXG4gICAgICAgICAgICAgIGJnPVwic2Vjb25kYXJ5TGlnaHRcIlxuICAgICAgICAgICAgICBib3JkZXI9XCJyZWd1bGFyXCJcbiAgICAgICAgICAgICAgYm9yZGVyQ29sb3I9XCJzZWNvbmRhcnlEYXJrXCJcbiAgICAgICAgICAgICAgc2l6ZT1cIm1kXCJcbiAgICAgICAgICAgICAgY3NzPXttZXRhLnByZXZpZXdDc3ModGhlbWVTZWN0aW9uW3Byb3BWYWx1ZV0pfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L0dyaWRMYXlvdXQ+XG4gICAgICA8L0Ryb3Bkb3duTGFiZWw+XG5cbiAgICAgIDxEcm9wZG93bk1lbnU+XG4gICAgICAgIHtrZXlzKHRoZW1lU2VjdGlvbikubWFwKGtleSA9PiAoXG4gICAgICAgICAgPERyb3Bkb3duTWVudUl0ZW1cbiAgICAgICAgICAgIGtleT17a2V5fVxuICAgICAgICAgICAgdmFsdWU9e3sga2V5OiBwcm9wS2V5LCB2YWx1ZToga2V5IH19XG4gICAgICAgICAgICBwbD1cInNtXCJcbiAgICAgICAgICAgIHByPVwieHhsXCJcbiAgICAgICAgICAgIGNvbG9yPXtrZXkgPT09IHByb3BWYWx1ZSA/ICdwcmltYXJ5VGV4dCcgOiAnc2Vjb25kYXJ5VGV4dCd9XG4gICAgICAgICAgICBiZz17a2V5ID09PSBwcm9wVmFsdWUgPyAncHJpbWFyeScgOiAndHJhbnNwYXJlbnQnfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxHcmlkTGF5b3V0IGdyaWRUZW1wbGF0ZUNvbHVtbnM9XCJhdXRvIDFmclwiPlxuICAgICAgICAgICAgICA8Qm94PlxuICAgICAgICAgICAgICAgIHtrZXl9XG4gICAgICAgICAgICAgICAgPEJveCBhcz1cInNwYW5cIiBmb250U2l6ZT1cInhzXCIgbWw9XCJ4c1wiPlxuICAgICAgICAgICAgICAgICAgKHt0aGVtZVNlY3Rpb25ba2V5XX1cbiAgICAgICAgICAgICAgICAgIHttZXRhLnVuaXR9KVxuICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAge21ldGEucHJldmlld0NzcyAmJiAoXG4gICAgICAgICAgICAgICAgPEJveFxuICAgICAgICAgICAgICAgICAganVzdGlmeVNlbGY9XCJlbmRcIlxuICAgICAgICAgICAgICAgICAgYmc9XCJzZWNvbmRhcnlMaWdodFwiXG4gICAgICAgICAgICAgICAgICBib3JkZXI9XCJyZWd1bGFyXCJcbiAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yPVwic2Vjb25kYXJ5RGFya1wiXG4gICAgICAgICAgICAgICAgICBzaXplPVwibWRcIlxuICAgICAgICAgICAgICAgICAgY3NzPXttZXRhLnByZXZpZXdDc3ModGhlbWVTZWN0aW9uW2tleV0pfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L0dyaWRMYXlvdXQ+XG4gICAgICAgICAgPC9Ecm9wZG93bk1lbnVJdGVtPlxuICAgICAgICApKX1cbiAgICAgIDwvRHJvcGRvd25NZW51PlxuICAgIDwvRHJvcGRvd24+XG4gICk7XG59O1xuXG5jbGFzcyBDb21wb25lbnRFZGl0b3IgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8Q29tcG9uZW50RWRpdG9yUHJvcHM+IHtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdGhlbWUsIHRoZW1lUHJvcHMsIGRlZmF1bHRUaGVtZVByb3BzLCBvbkNoYW5nZSB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IG1lcmdlZFByb3BzID0gbWVyZ2VUaGVtZXMoZGVmYXVsdFRoZW1lUHJvcHMgYXMgYW55LCAodGhlbWVQcm9wcyB8fCB7fSkgYXMgYW55KSBhcyBDb21wb25lbnRUaGVtZTx7fT47XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEJveD5cbiAgICAgICAge2tleXMobWFwcGluZ3MpXG4gICAgICAgICAgLmZpbHRlcihtYXBwaW5nID0+IG1lcmdlZFByb3BzW21hcHBpbmddICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgLm1hcCgocHJvcDoga2V5b2YgdHlwZW9mIG1hcHBpbmdzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IHRoZW1lUHJvcCB9ID0gbWFwcGluZ3NbcHJvcF0gYXMgUmVzcG9uc2l2ZVByb3BNYXBwaW5nO1xuICAgICAgICAgICAgY29uc3QgcHJvcFZhbHVlID0gbWVyZ2VkUHJvcHNbcHJvcF07XG5cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxHcmlkTGF5b3V0IGtleT17cHJvcH0gZ3JpZFRlbXBsYXRlQ29sdW1ucz1cIjEyMHB4IDFmclwiIG1iPVwibWRcIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgPFRleHQgcD1cIm5vbmVcIiBlbGxpcHNpcz5cbiAgICAgICAgICAgICAgICAgIHtwcm9wfVxuICAgICAgICAgICAgICAgIDwvVGV4dD5cblxuICAgICAgICAgICAgICAgIHt0eXBlb2YgcHJvcFZhbHVlID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgKHRoZW1lUHJvcCA/IChcbiAgICAgICAgICAgICAgICAgICAgPFRoZW1lZFByb3BFZGl0b3JcbiAgICAgICAgICAgICAgICAgICAgICBwcm9wS2V5PXtwcm9wfVxuICAgICAgICAgICAgICAgICAgICAgIHByb3BWYWx1ZT17cHJvcFZhbHVlfVxuICAgICAgICAgICAgICAgICAgICAgIHRoZW1lUHJvcD17dGhlbWVQcm9wfVxuICAgICAgICAgICAgICAgICAgICAgIHRoZW1lU2VjdGlvbj17dGhlbWVbdGhlbWVQcm9wXX1cbiAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICA8SW5wdXQgYm9yZGVyPVwibm9uZVwiIGZvbnRXZWlnaHQ9XCJib2xkXCIgdmFsdWU9e3Byb3BWYWx1ZSBhcyBzdHJpbmd9IHJlYWRPbmx5IC8+XG4gICAgICAgICAgICAgICAgICApKX1cblxuICAgICAgICAgICAgICAgIHt0eXBlb2YgcHJvcFZhbHVlID09PSAnb2JqZWN0JyAmJiAoXG4gICAgICAgICAgICAgICAgICA8R3JpZExheW91dCBncmlkR2FwPVwic21cIiBib3JkZXI9XCJyZWd1bGFyXCIgYm9yZGVyQ29sb3I9XCJzZWNvbmRhcnlcIiBib3JkZXJSYWRpdXM9XCJtZWRpdW1cIiBwPVwic21cIj5cbiAgICAgICAgICAgICAgICAgICAge2tleXMocHJvcFZhbHVlKS5tYXAoYnJlYWtwb2ludEtleSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgPEJveD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0IHBiPVwieHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAge2JyZWFrcG9pbnRLZXl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxCb3ggYXM9XCJzcGFuXCIgbWw9XCJ4c1wiIGZvbnRTaXplPVwieHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobWluLXdpZHRoOiB7dGhlbWUuYnJlYWtwb2ludHNbYnJlYWtwb2ludEtleV19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICAgICAgICAgICAge3RoZW1lUHJvcCA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPFRoZW1lZFByb3BFZGl0b3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wS2V5PXtwcm9wfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BWYWx1ZT17cHJvcFZhbHVlW2JyZWFrcG9pbnRLZXldfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZW1lUHJvcD17dGhlbWVQcm9wfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZW1lU2VjdGlvbj17dGhlbWVbdGhlbWVQcm9wXX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlKGtleSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbYnJlYWtwb2ludEtleV06IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0IGJvcmRlcj1cIm5vbmVcIiBmb250V2VpZ2h0PVwiYm9sZFwiIHZhbHVlPXtwcm9wVmFsdWVbYnJlYWtwb2ludEtleV19IHJlYWRPbmx5IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICAgIDwvR3JpZExheW91dD5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L0dyaWRMYXlvdXQ+XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pfVxuICAgICAgPC9Cb3g+XG4gICAgKTtcbiAgfVxufVxuXG50eXBlIENvbXBvbmVudHNFZGl0b3JQcm9wcyA9IHtcbiAgc2VsZWN0ZWRDb21wb25lbnRzOiBDb21wb25lbnRXaXRoRGVmYXVsdFRoZW1lW107XG4gIHRoZW1lOiBUaGVtZTtcbiAgb25Db21wb25lbnRUaGVtZUNoYW5nZTogKHRoZW1lS2V5OiBzdHJpbmcsIHZhcmlhbnRLZXk/OiBzdHJpbmcpID0+IChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyB8IG9iamVjdCkgPT4gdm9pZDtcbn07XG5cbmV4cG9ydCBjb25zdCBDb21wb25lbnRzRWRpdG9yOiBSZWFjdC5TRkM8Q29tcG9uZW50c0VkaXRvclByb3BzPiA9ICh7XG4gIHRoZW1lLFxuICBzZWxlY3RlZENvbXBvbmVudHMsXG4gIG9uQ29tcG9uZW50VGhlbWVDaGFuZ2Vcbn0pID0+IChcbiAgPD5cbiAgICB7c2VsZWN0ZWRDb21wb25lbnRzLm1hcChzZWxlY3RlZENvbXBvbmVudCA9PiB7XG4gICAgICBjb25zdCB0aGVtZUtleSA9IE9iamVjdC5rZXlzKHNlbGVjdGVkQ29tcG9uZW50LmRlZmF1bHRUaGVtZSlbMF07XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxCb3gga2V5PXt0aGVtZUtleX0+XG4gICAgICAgICAgPEgzIG1iPVwibWRcIj57dGhlbWVLZXl9IHRoZW1lPC9IMz5cblxuICAgICAgICAgIDxDb21wb25lbnRFZGl0b3JcbiAgICAgICAgICAgIGRlZmF1bHRUaGVtZVByb3BzPXtzZWxlY3RlZENvbXBvbmVudC5kZWZhdWx0VGhlbWVbdGhlbWVLZXldfVxuICAgICAgICAgICAgdGhlbWVQcm9wcz17dGhlbWUuY29tcG9uZW50c1t0aGVtZUtleV19XG4gICAgICAgICAgICB0aGVtZT17dGhlbWV9XG4gICAgICAgICAgICBvbkNoYW5nZT17b25Db21wb25lbnRUaGVtZUNoYW5nZSh0aGVtZUtleSl9XG4gICAgICAgICAgLz5cblxuICAgICAgICAgIHtzZWxlY3RlZENvbXBvbmVudC5kZWZhdWx0VGhlbWVbdGhlbWVLZXldLnZhcmlhbnRzICYmIChcbiAgICAgICAgICAgIDxCb3g+XG4gICAgICAgICAgICAgIHtPYmplY3Qua2V5cygoc2VsZWN0ZWRDb21wb25lbnQuZGVmYXVsdFRoZW1lW3RoZW1lS2V5XSBhcyBhbnkpLnZhcmlhbnRzKS5tYXAodmFyaWFudEtleSA9PiAoXG4gICAgICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50IGtleT17dmFyaWFudEtleX0+XG4gICAgICAgICAgICAgICAgICA8SDMgZm9udFNpemU9XCJtZFwiIG15PVwibWRcIj5cbiAgICAgICAgICAgICAgICAgICAgdmFyaWFudDoge3ZhcmlhbnRLZXl9XG4gICAgICAgICAgICAgICAgICA8L0gzPlxuICAgICAgICAgICAgICAgICAgPENvbXBvbmVudEVkaXRvclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VGhlbWVQcm9wcz17KHNlbGVjdGVkQ29tcG9uZW50LmRlZmF1bHRUaGVtZVt0aGVtZUtleV0gYXMgYW55KS52YXJpYW50c1t2YXJpYW50S2V5XX1cbiAgICAgICAgICAgICAgICAgICAgdGhlbWVQcm9wcz17XG4gICAgICAgICAgICAgICAgICAgICAgdGhlbWUuY29tcG9uZW50c1t0aGVtZUtleV0gJiZcbiAgICAgICAgICAgICAgICAgICAgICB0aGVtZS5jb21wb25lbnRzW3RoZW1lS2V5XS52YXJpYW50cyAmJlxuICAgICAgICAgICAgICAgICAgICAgIHRoZW1lLmNvbXBvbmVudHNbdGhlbWVLZXldLnZhcmlhbnRzIVt2YXJpYW50S2V5XVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoZW1lPXt0aGVtZX1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e29uQ29tcG9uZW50VGhlbWVDaGFuZ2UodGhlbWVLZXksIHZhcmlhbnRLZXkpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvQm94PlxuICAgICAgKTtcbiAgICB9KX1cbiAgPC8+XG4pO1xuIl19