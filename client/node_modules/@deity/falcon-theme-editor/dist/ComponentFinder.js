"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.ComponentFinder = void 0;

var _inheritsLoose2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/inheritsLoose"));

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _falconUi = /*#__PURE__*/require("@deity/falcon-ui");

function throttle(callback, wait, context) {
  var timeout;
  var callbackArgs;

  var later = function later() {
    callback.apply(context, callbackArgs);
    timeout = undefined;
  };

  return function () {
    if (!timeout) {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      callbackArgs = args;
      timeout = window.setTimeout(later, wait);
    }
  };
}

function getNearestThemableComponentForElement(element) {
  var maxElementHierarchyTraversal = 3;
  var currentTraversal = 0;
  var elementToCheck = element;

  while (currentTraversal < maxElementHierarchyTraversal) {
    if (!elementToCheck) {
      return undefined;
    } // __reactInternalInstance trick based on https://stackoverflow.com/a/50204915/105206
    // eslint-disable-next-line


    for (var key in elementToCheck) {
      if (key.startsWith('__reactInternalInstance$')) {
        var fiberNode = elementToCheck[key]; // eslint-disable-next-line

        var component = fiberNode && fiberNode._debugOwner;
        var defaultTheme = component && component.memoizedProps && component.memoizedProps.defaultTheme;

        if (defaultTheme) {
          return {
            defaultTheme: defaultTheme,
            rect: elementToCheck.getBoundingClientRect()
          };
        } // some themed components render via another component, like checkbox
        // so we need to search for parent's defaultTheme prop as well
        // eslint-disable-next-line


        var parentComponent = component && component._debugOwner;
        var parentDefaultTheme = parentComponent && parentComponent.memoizedProps && parentComponent.memoizedProps.defaultTheme;

        if (parentDefaultTheme && elementToCheck.parentElement) {
          return {
            defaultTheme: parentDefaultTheme,
            rect: elementToCheck.parentElement.getBoundingClientRect()
          };
        }
      }
    }

    elementToCheck = elementToCheck.parentElement;
    currentTraversal++;
  }

  return undefined;
} // based on https://stackoverflow.com/questions/3426404/create-a-hexadecimal-colour-based-on-a-string-with-javascript


function getHashCode(val) {
  var hash = 0;
  if (val.length === 0) return hash;

  for (var i = 0; i < val.length; i++) {
    // eslint-disable-next-line
    hash = val.charCodeAt(i) + ((hash << 5) - hash); // eslint-disable-next-line

    hash &= hash;
  }

  return hash;
}

function getHSLA(hash) {
  var shortened = hash % 360;
  return "hsla(" + shortened + ", 90%, 30%, 0.2)";
}

var ComponentFinder = /*#__PURE__*/function (_React$Component) {
  (0, _inheritsLoose2.default)(ComponentFinder, _React$Component);

  function ComponentFinder() {
    var _this;

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {};
    _this.currentElementFromPoint = undefined;
    _this.throttledOnChange = undefined;

    _this.onClick = function (e) {
      if (!_this.props.onChange) return;
      if (!_this.state.locatedComponent) return;

      _this.props.onChange([{
        defaultTheme: _this.state.locatedComponent.defaultTheme
      }]);

      e.preventDefault();
      e.stopPropagation();
    };

    _this.onScroll = function () {
      if (!_this.state.locatedComponent) return;

      _this.setState({
        locatedComponent: undefined
      });
    };

    return _this;
  }

  var _proto = ComponentFinder.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.throttledOnChange = throttle(this.onChange, 50, this);
    window.addEventListener('mousemove', this.throttledOnChange);
    window.addEventListener('click', this.onClick, true);
    window.addEventListener('scroll', this.onScroll);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    window.removeEventListener('mousemove', this.throttledOnChange);
    window.removeEventListener('click', this.onClick, true);
    window.addEventListener('scroll', this.onScroll);
    this.currentElementFromPoint = undefined;
    this.throttledOnChange = undefined;
  };

  _proto.onChange = function onChange(e) {
    var _this2 = this;

    var elementFromPoint = document.elementFromPoint(e.clientX, e.clientY);
    if (!elementFromPoint) return;
    if (this.currentElementFromPoint === elementFromPoint) return;
    this.currentElementFromPoint = elementFromPoint;
    var nearestThemableComponent = getNearestThemableComponentForElement(this.currentElementFromPoint);
    requestAnimationFrame(function () {
      _this2.setState({
        locatedComponent: nearestThemableComponent
      });
    });
  };

  _proto.renderOverlay = function renderOverlay() {
    var locatedComponent = this.state.locatedComponent;
    if (!locatedComponent) return null;
    var themeKey = Object.keys(locatedComponent.defaultTheme)[0];
    return /*#__PURE__*/_react.default.createElement(_falconUi.Box, {
      position: "absolute",
      style: {
        left: locatedComponent.rect.left,
        right: locatedComponent.rect.right,
        top: locatedComponent.rect.top,
        bottom: locatedComponent.rect.bottom,
        height: locatedComponent.rect.height,
        width: locatedComponent.rect.width,
        backgroundColor: getHSLA(getHashCode(themeKey))
      }
    }, /*#__PURE__*/_react.default.createElement(_falconUi.Box, {
      bg: "black",
      position: "absolute",
      bottom: "100%",
      fontSize: "sm",
      px: "sm",
      py: "xs",
      color: "white"
    }, themeKey));
  };

  _proto.render = function render() {
    return /*#__PURE__*/_react.default.createElement(_falconUi.Portal, null, /*#__PURE__*/_react.default.createElement(_falconUi.Box, {
      position: "fixed",
      top: "0",
      left: "0",
      css: {
        pointerEvents: 'none',
        height: 100,
        width: 100,
        zIndex: 10000
      }
    }, this.renderOverlay()));
  };

  return ComponentFinder;
}(_react.default.Component);

exports.ComponentFinder = ComponentFinder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,