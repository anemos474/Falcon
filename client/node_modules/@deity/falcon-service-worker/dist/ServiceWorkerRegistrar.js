"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.ServiceWorkerRegistrar = void 0;

var _createClass2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/inheritsLoose"));

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _propTypes = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("prop-types"));

var _ServiceWorkerContext = /*#__PURE__*/require("./ServiceWorkerContext");

var ServiceWorkerRegistrar = /*#__PURE__*/function (_React$Component) {
  (0, _inheritsLoose2.default)(ServiceWorkerRegistrar, _React$Component);

  function ServiceWorkerRegistrar(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.onControllerChange = _this.onControllerChange.bind((0, _assertThisInitialized2.default)(_this));
    _this.state = {
      isSupported: false,
      registration: undefined
    };
    return _this;
  }

  var _proto = ServiceWorkerRegistrar.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;

    if (!this.isSupported) {
      return;
    }

    this.whenReady(function () {
      var _this2$props = _this2.props,
          scriptUrl = _this2$props.scriptUrl,
          options = _this2$props.options;
      navigator.serviceWorker.register(scriptUrl, options).then(function (registration) {
        _this2.setState(function (state) {
          return Object.assign({}, state, {
            isSupported: true,
            registration: registration
          });
        });

        navigator.serviceWorker.addEventListener('controllerchange', _this2.onControllerChange);
        console.log("Service Worker '" + scriptUrl + "' registered in '" + registration.scope + "' scope.");
      }).catch(function (error) {
        console.warn("Service Worker '" + scriptUrl + "' registration failed.", error);
      });
    });
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (!this.isSupported) {
      return;
    }

    navigator.serviceWorker.removeEventListener('controllerchange', this.onControllerChange);
  };

  _proto.onControllerChange = function onControllerChange(event) {
    if (event.currentTarget !== navigator.serviceWorker.controller) {
      return window.location.reload();
    }
  };

  /**
   * if `document.readyState` is `complete` invoke `callback` immediately, otherwise delay it until `load` event is fired
   * @param {Function} callback function
   */
  _proto.whenReady = function whenReady(callback) {
    if (document.readyState === 'complete') {
      callback();
    } else {
      window.addEventListener('load', callback);
    }
  };

  _proto.render = function render() {
    var _this$props = this.props,
        children = _this$props.children,
        scriptUrl = _this$props.scriptUrl,
        options = _this$props.options;
    var _this$state = this.state,
        isSupported = _this$state.isSupported,
        registration = _this$state.registration;
    return /*#__PURE__*/_react.default.createElement(_ServiceWorkerContext.ServiceWorkerContext.Provider, {
      value: {
        isSupported: isSupported,
        registration: registration,
        scriptUrl: scriptUrl,
        options: options
      }
    }, children);
  };

  (0, _createClass2.default)(ServiceWorkerRegistrar, [{
    key: "isSupported",
    get: function get() {
      var _window = window,
          navigator = _window.navigator,
          location = _window.location;
      var isApiAvailable = navigator && 'serviceWorker' in navigator;
      var isHttps = location.protocol === 'https:';
      var isLocalHost = location.host.match(/(localhost|127.0.0.1)/);
      return isApiAvailable && (isHttps || isLocalHost);
    }
  }]);
  return ServiceWorkerRegistrar;
}(_react.default.Component);

exports.ServiceWorkerRegistrar = ServiceWorkerRegistrar;
ServiceWorkerRegistrar.propTypes = {
  scriptUrl: _propTypes.default.string,
  options: /*#__PURE__*/_propTypes.default.shape({
    scope: _propTypes.default.string,
    type: /*#__PURE__*/_propTypes.default.oneOf(['classic', 'module']),
    updateViaCache: /*#__PURE__*/_propTypes.default.oneOf(['imports', 'all', 'none'])
  })
};
ServiceWorkerRegistrar.defaultProps = {
  scriptUrl: '/sw.js'
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9TZXJ2aWNlV29ya2VyUmVnaXN0cmFyLnRzeCJdLCJuYW1lcyI6WyJTZXJ2aWNlV29ya2VyUmVnaXN0cmFyIiwicHJvcHMiLCJvbkNvbnRyb2xsZXJDaGFuZ2UiLCJiaW5kIiwic3RhdGUiLCJpc1N1cHBvcnRlZCIsInJlZ2lzdHJhdGlvbiIsInVuZGVmaW5lZCIsImNvbXBvbmVudERpZE1vdW50Iiwid2hlblJlYWR5Iiwic2NyaXB0VXJsIiwib3B0aW9ucyIsIm5hdmlnYXRvciIsInNlcnZpY2VXb3JrZXIiLCJyZWdpc3RlciIsInRoZW4iLCJzZXRTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJjb25zb2xlIiwibG9nIiwic2NvcGUiLCJjYXRjaCIsImVycm9yIiwid2FybiIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiY3VycmVudFRhcmdldCIsImNvbnRyb2xsZXIiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInJlbG9hZCIsImNhbGxiYWNrIiwiZG9jdW1lbnQiLCJyZWFkeVN0YXRlIiwicmVuZGVyIiwiY2hpbGRyZW4iLCJpc0FwaUF2YWlsYWJsZSIsImlzSHR0cHMiLCJwcm90b2NvbCIsImlzTG9jYWxIb3N0IiwiaG9zdCIsIm1hdGNoIiwiUmVhY3QiLCJDb21wb25lbnQiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJzaGFwZSIsInR5cGUiLCJvbmVPZiIsInVwZGF0ZVZpYUNhY2hlIiwiZGVmYXVsdFByb3BzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0lBVWFBLHNCOzs7QUFjWCxrQ0FBWUMsS0FBWixFQUFtQjtBQUFBOztBQUNqQix3Q0FBTUEsS0FBTjtBQUVBLFVBQUtDLGtCQUFMLEdBQTBCLE1BQUtBLGtCQUFMLENBQXdCQyxJQUF4Qiw2Q0FBMUI7QUFFQSxVQUFLQyxLQUFMLEdBQWE7QUFDWEMsTUFBQUEsV0FBVyxFQUFFLEtB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QkFBbUJBLFNBQXZEO0FBQ0EsVUFBTTBCLE9BQU8sR0FBR1IsUUFBUSxDQUFDUyxRQUFULEtBQXNCLFFBQXRDO0FBQ0EsVUFBTUMsV0FBVyxHQUFHVixRQUFRLENBQUNXLElBQVQsQ0FBY0MsS0FBZCxDQUFvQix1QkFBcEIsQ0FBcEI7QUFFQSxhQUFPTCxjQUFjLEtBQUtDLE9BQU8sSUFBSUUsV0FBaEIsQ0FBckI7QUFDRDs7O0VBeEV5Q0csZUFBTUMsUzs7O0FBQXJDNUMsc0IsQ0FDSjZDLFMsR0FBWTtBQUNqQm5DLEVBQUFBLFNBQVMsRUFBRW9DLG1CQUFVQyxNQURKO0FBRWpCcEMsRUFBQUEsT0FBTyxlQUFFbUMsbUJBQVVFLEtBQVYsQ0FBZ0I7QUFDdkI1QixJQUFBQSxLQUFLLEVBQUUwQixtQkFBVUMsTUFETTtBQUV2QkUsSUFBQUEsSUFBSSxlQUFFSCxtQkFBVUksS0FBVixDQUFnQixDQUFDLFNBQUQsRUFBWSxRQUFaLENBQWhCLENBRmlCO0FBR3ZCQyxJQUFBQSxjQUFjLGVBQUVMLG1CQUFVSSxLQUFWLENBQWdCLENBQUMsU0FBRCxFQUFZLEtBQVosRUFBbUIsTUFBbkIsQ0FBaEI7QUFITyxHQUFoQjtBQUZRLEM7QUFEUmxELHNCLENBVUpvRCxZLEdBQWU7QUFDcEIxQyxFQUFBQSxTQUFTLEVBQUU7QUFEUyxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBTZXJ2aWNlV29ya2VyQ29udGV4dCB9IGZyb20gJy4vU2VydmljZVdvcmtlckNvbnRleHQnO1xuXG5leHBvcnQgdHlwZSBTZXJ2aWNlV29ya2VyUmVnaXN0cmFyUHJvcHMgPSB7XG4gIHNjcmlwdFVybD86IHN0cmluZztcbiAgb3B0aW9ucz86IFJlZ2lzdHJhdGlvbk9wdGlvbnM7XG59O1xuZXhwb3J0IHR5cGUgU2VydmljZVdvcmtlclJlZ2lzdHJhclN0YXRlID0ge1xuICBpc1N1cHBvcnRlZDogYm9vbGVhbjtcbiAgcmVnaXN0cmF0aW9uPzogU2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbjtcbn07XG5leHBvcnQgY2xhc3MgU2VydmljZVdvcmtlclJlZ2lzdHJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxTZXJ2aWNlV29ya2VyUmVnaXN0cmFyUHJvcHMsIFNlcnZpY2VXb3JrZXJSZWdpc3RyYXJTdGF0ZT4ge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHNjcmlwdFVybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvcHRpb25zOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgc2NvcGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICB0eXBlOiBQcm9wVHlwZXMub25lT2YoWydjbGFzc2ljJywgJ21vZHVsZSddKSxcbiAgICAgIHVwZGF0ZVZpYUNhY2hlOiBQcm9wVHlwZXMub25lT2YoWydpbXBvcnRzJywgJ2FsbCcsICdub25lJ10pXG4gICAgfSlcbiAgfTtcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIHNjcmlwdFVybDogJy9zdy5qcydcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMub25Db250cm9sbGVyQ2hhbmdlID0gdGhpcy5vbkNvbnRyb2xsZXJDaGFuZ2UuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc1N1cHBvcnRlZDogZmFsc2UsXG4gICAgICByZWdpc3RyYXRpb246IHVuZGVmaW5lZFxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAoIXRoaXMuaXNTdXBwb3J0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLndoZW5SZWFkeSgoKSA9PiB7XG4gICAgICBjb25zdCB7IHNjcmlwdFVybCwgb3B0aW9ucyB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXJcbiAgICAgICAgLnJlZ2lzdGVyKHNjcmlwdFVybCwgb3B0aW9ucylcbiAgICAgICAgLnRoZW4ocmVnaXN0cmF0aW9uID0+IHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHN0YXRlID0+ICh7XG4gICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgIGlzU3VwcG9ydGVkOiB0cnVlLFxuICAgICAgICAgICAgcmVnaXN0cmF0aW9uXG4gICAgICAgICAgfSkpO1xuICAgICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRyb2xsZXJjaGFuZ2UnLCB0aGlzLm9uQ29udHJvbGxlckNoYW5nZSk7XG5cbiAgICAgICAgICBjb25zb2xlLmxvZyhgU2VydmljZSBXb3JrZXIgJyR7c2NyaXB0VXJsfScgcmVnaXN0ZXJlZCBpbiAnJHtyZWdpc3RyYXRpb24uc2NvcGV9JyBzY29wZS5gKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oYFNlcnZpY2UgV29ya2VyICcke3NjcmlwdFVybH0nIHJlZ2lzdHJhdGlvbiBmYWlsZWQuYCwgZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICghdGhpcy5pc1N1cHBvcnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbnRyb2xsZXJjaGFuZ2UnLCB0aGlzLm9uQ29udHJvbGxlckNoYW5nZSk7XG4gIH1cblxuICBvbkNvbnRyb2xsZXJDaGFuZ2UoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldCAhPT0gbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuY29udHJvbGxlcikge1xuICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICB9XG4gIH1cblxuICBnZXQgaXNTdXBwb3J0ZWQoKSB7XG4gICAgY29uc3QgeyBuYXZpZ2F0b3IsIGxvY2F0aW9uIH0gPSB3aW5kb3c7XG4gICAgY29uc3QgaXNBcGlBdmFpbGFibGUgPSBuYXZpZ2F0b3IgJiYgJ3NlcnZpY2VXb3JrZXInIGluIG5hdmlnYXRvcjtcbiAgICBjb25zdCBpc0h0dHBzID0gbG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwczonO1xuICAgIGNvbnN0IGlzTG9jYWxIb3N0ID0gbG9jYXRpb24uaG9zdC5tYXRjaCgvKGxvY2FsaG9zdHwxMjcuMC4wLjEpLyk7XG5cbiAgICByZXR1cm4gaXNBcGlBdmFpbGFibGUgJiYgKGlzSHR0cHMgfHwgaXNMb2NhbEhvc3QpO1xuICB9XG5cbiAgLyoqXG4gICAqIGlmIGBkb2N1bWVudC5yZWFkeVN0YXRlYCBpcyBgY29tcGxldGVgIGludm9rZSBgY2FsbGJhY2tgIGltbWVkaWF0ZWx5LCBvdGhlcndpc2UgZGVsYXkgaXQgdW50aWwgYGxvYWRgIGV2ZW50IGlzIGZpcmVkXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAqL1xuICB3aGVuUmVhZHkoY2FsbGJhY2spIHtcbiAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBjYWxsYmFjayk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4sIHNjcmlwdFVybCwgb3B0aW9ucyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGlzU3VwcG9ydGVkLCByZWdpc3RyYXRpb24gfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFNlcnZpY2VXb3JrZXJDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7IGlzU3VwcG9ydGVkLCByZWdpc3RyYXRpb24sIHNjcmlwdFVybCwgb3B0aW9ucyB9fT5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9TZXJ2aWNlV29ya2VyQ29udGV4dC5Qcm92aWRlcj5cbiAgICApO1xuICB9XG59XG4iXX0=