{"version":3,"file":"index.js","sources":["../../src/format/constants.ts","../../src/format/colors.ts","../../src/format/utils.ts","../../src/format/minimal.ts","../../src/format/index.ts","../../src/bin/index.ts"],"sourcesContent":["import { LOGGER_KEYS as loggerKeys } from 'pino-pretty/lib/constants';\n\nexport { ERROR_LIKE_KEYS, MESSAGE_KEY, TIMESTAMP_KEY, LEVELS, LEVEL_NAMES } from 'pino-pretty/lib/constants';\n\nexport const LOGGER_KEYS: string[] = [...loggerKeys, 'module', 'app'];\n","import chalk, { Chalk } from 'chalk';\nimport { LEVELS, LEVEL_NAMES } from './constants';\n\nexport type Colorizer = (input: string) => string;\n\nexport interface ColorizerFn {\n  (input: string): string;\n  message: Colorizer;\n  default: Colorizer;\n  random: Colorizer;\n  error: Colorizer;\n}\n\nexport type ColorizerMap = {\n  default: Colorizer;\n  60: Colorizer;\n  50: Colorizer;\n  40: Colorizer;\n  30: Colorizer;\n  20: Colorizer;\n  10: Colorizer;\n  message: Colorizer;\n  random: Colorizer;\n  error: Colorizer;\n};\n\ndeclare type RandomColorDictionary = {\n  [key: string]: Chalk;\n};\n\nconst nocolor: Colorizer = input => input;\nconst plain: ColorizerMap = {\n  default: nocolor,\n  60: nocolor,\n  50: nocolor,\n  40: nocolor,\n  30: nocolor,\n  20: nocolor,\n  10: nocolor,\n  message: nocolor,\n  random: nocolor,\n  error: nocolor\n};\n\nconst ctx: Chalk = new chalk.constructor({ enabled: true, level: 3 });\n\nconst randomColorDictionary: RandomColorDictionary = {};\nconst randomColors: Chalk[] = [\n  ctx.green,\n  ctx.yellow,\n  ctx.magenta,\n  ctx.hex('00FF00'),\n  ctx.hex('9932CC'),\n  ctx.hex('A52A2A'),\n  ctx.hex('1E90FF'),\n  ctx.hex('ADFF2F'),\n  ctx.redBright\n];\n\nconst randomColor = input => {\n  if (!(input in randomColorDictionary)) {\n    const color = randomColors.shift();\n    randomColors.push(color);\n    randomColorDictionary[input] = color;\n  }\n  return randomColorDictionary[input](input);\n};\n\nconst colored: ColorizerMap = {\n  default: ctx.white,\n  60: ctx.bgRed,\n  50: ctx.red,\n  40: ctx.yellow,\n  30: ctx.green,\n  20: ctx.blue,\n  10: ctx.grey,\n  message: ctx.cyan,\n  random: randomColor,\n  error: ctx.red\n};\n\nconst colorizeLevel = (level: string, colorizer: ColorizerMap): string => {\n  if (Number.isInteger(+level)) {\n    return level in LEVELS ? colorizer[level](LEVELS[level]) : colorizer.default(LEVELS.default);\n  }\n  const levelNum = LEVEL_NAMES[level.toLowerCase()] || 'default';\n  return colorizer[levelNum](LEVELS[levelNum]);\n};\n\nconst plainColorizer = (level: string): string => {\n  return colorizeLevel(level, plain);\n};\nplainColorizer.message = plain.message;\nplainColorizer.default = plain.default;\nplainColorizer.random = plain.random;\nplainColorizer.error = plain.error;\n\nconst coloredColorizer = (level: string): string => {\n  return colorizeLevel(level, colored);\n};\ncoloredColorizer.message = colored.message;\ncoloredColorizer.default = colored.default;\ncoloredColorizer.random = colored.random;\ncoloredColorizer.error = colored.error;\n\n/**\n * Factory function get a function to colorized levels. The returned function\n * also includes a `.message(str)` method to colorize strings.\n * @param {bool} [useColors=false] When `true` a function that applies standard\n * terminal colors is returned.\n *\n * @returns {Function} `function (level) {}` has a `.message(str)` method to\n * apply colorization to a string. The core function accepts either an integer\n * `level` or a `string` level. The integer level will map to a known level\n * string or to `USERLVL` if not known.  The string `level` will map to the same\n * colors as the integer `level` and will also default to `USERLVL` if the given\n * string is not a recognized level name.\n */\nexport default (useColors: boolean = false): ColorizerFn => (useColors ? coloredColorizer : plainColorizer);\n","import bourne from '@hapi/bourne';\nimport getSource from 'get-source';\nimport { internals, isObject, prettifyObject as prettifyObjectOriginal } from 'pino-pretty/lib/utils';\nimport colors from './colors';\nimport { LOGGER_KEYS, MESSAGE_KEY, ERROR_LIKE_KEYS } from './constants';\nimport {\n  GetSourceFile,\n  MaybeString,\n  ReadSourceInput,\n  PrettifyModuleInput,\n  PrettifyErrorLogInput,\n  PrettifyObjectInput,\n  PrettifyGraphQLErrorLogInput\n} from './types';\n\nexport {\n  prettifyLevel,\n  prettifyMessage,\n  prettifyMetadata,\n  prettifyTime,\n  internals,\n  isObject\n} from 'pino-pretty/lib/utils';\n\nconst defaultColorizer = colors();\n\nexport type PrettifyModuleFn = (input: PrettifyModuleInput) => MaybeString;\nexport type PrettifyGraphQLErrorLogFn = (input: PrettifyGraphQLErrorLogInput) => MaybeString;\nexport type PrettifyGraphQLParsingErrorLogFn = (input: PrettifyGraphQLErrorLogInput) => MaybeString;\nexport type PrettifyErrorLogFn = (input: PrettifyErrorLogInput) => MaybeString;\nexport type PrettifyObjectFn = (input: PrettifyObjectInput) => MaybeString;\nexport type ReadSourceFn = (input: ReadSourceInput) => string[];\nexport type ColorSectionFn = (input: {\n  output: string;\n  line: number;\n  position: number;\n  colorizer: typeof defaultColorizer;\n  setLineNumber?: boolean;\n  paddingLines?: number;\n}) => string[];\n\nexport const jsonParser: (input: string) => { value?: any; err?: any } = input => {\n  try {\n    return { value: bourne.parse(input, { protoAction: 'remove' }) };\n  } catch (err) {\n    return { err };\n  }\n};\n\nexport const prettifyModule: PrettifyModuleFn = ({ log, colorizer = defaultColorizer }) => {\n  if (log.module) {\n    return `[${colorizer.random(log.module)}]`;\n  }\n  return undefined;\n};\n\nexport const prettifyGraphQLErrorLog: PrettifyGraphQLErrorLogFn = ({\n  log,\n  ident,\n  eol,\n  colorizer = defaultColorizer\n}) => {\n  const { path, extensions } = log;\n\n  let result: string = `${eol}`;\n\n  if (extensions.code) {\n    result += `GraphQL Error Code: ${colorizer.error(extensions.code)}${eol}`;\n  }\n  if (path) {\n    let pathString: string = '';\n    path.forEach(item => {\n      const limiter: string = pathString.length ? '.' : '';\n      if (Number.isInteger(item)) {\n        pathString += `[${item}]`;\n      } else {\n        pathString += `${limiter}${item}`;\n      }\n    });\n    result += `Path: ${colorizer.error(pathString)}${eol}${eol}`;\n  }\n\n  const stack: string[] = extensions && extensions.exception && extensions.exception.stacktrace;\n  if (stack && stack.length > 1) {\n    const codeLine: string = stack[1];\n    // Highlighting the actual code line\n    stack[1] = colorizer.error(codeLine);\n\n    const codeSnippet: string[] = readSourceFromStack({\n      colorizer,\n      stack,\n      setLineNumber: true,\n      paddingLines: 5\n    });\n    if (codeSnippet.length) {\n      result += `${codeSnippet.join(eol)}${eol}${eol}`;\n    }\n\n    const joinedLines = internals.joinLinesWithIndentation({ input: stack.join(eol), ident, eol });\n    result += `${ident}${joinedLines}${eol}`;\n  }\n\n  return `${result}${eol}`;\n};\n\nexport const prettifyGraphQLParsingErrorLog: PrettifyGraphQLParsingErrorLogFn = ({ log, colorizer, eol = '\\n' }) => {\n  const { body, locations } = log as { body?: string; locations?: { line: number; column: number }[] };\n  const [currentLocation] = locations;\n\n  return `${colorSection({\n    output: body,\n    colorizer,\n    line: currentLocation.line - 1,\n    position: currentLocation.column,\n    paddingLines: 5\n  }).join(eol)}${eol}`;\n};\n\nexport const prettifyObject: PrettifyObjectFn = ({\n  log,\n  ident = '    ',\n  eol = '\\n',\n  skipKeys = [],\n  errorLikeKeys = ERROR_LIKE_KEYS,\n  excludeLoggerKeys = true\n}) =>\n  prettifyObjectOriginal({\n    input: log,\n    ident,\n    eol,\n    skipKeys: [...LOGGER_KEYS, ...skipKeys],\n    errorLikeKeys,\n    excludeLoggerKeys\n  });\n\nexport const prettifyErrorLog: PrettifyErrorLogFn = ({\n  log,\n  messageKey = MESSAGE_KEY,\n  colorizer,\n  ident = '    ',\n  eol = '\\n',\n  errorLikeKeys = ERROR_LIKE_KEYS,\n  errorProperties = []\n}) => {\n  const { stack } = log;\n  let result: string = '';\n\n  if (stack) {\n    const codeSnippet: string[] = readSourceFromStack({\n      colorizer,\n      stack: stack.split(eol),\n      setLineNumber: true,\n      paddingLines: 5\n    });\n    if (codeSnippet.length) {\n      result += `${eol}${codeSnippet.join(eol)}${eol}${eol}`;\n    }\n  }\n\n  const joinedLines = internals.joinLinesWithIndentation({ input: stack, ident, eol });\n  result += `${ident}${joinedLines}${eol}`;\n\n  if (errorProperties.length > 0) {\n    const excludeProperties = LOGGER_KEYS.concat(messageKey, 'type', 'stack');\n    let propertiesToPrint;\n    if (errorProperties[0] === '*') {\n      // Print all sibling properties except for the standard exclusions.\n      propertiesToPrint = Object.keys(log).filter(key => excludeProperties.includes(key) === false);\n    } else {\n      // Print only sepcified properties unless the property is a standard exclusion.\n      propertiesToPrint = errorProperties.filter(key => excludeProperties.includes(key) === false);\n    }\n\n    for (let i = 0; i < propertiesToPrint.length; i += 1) {\n      const key = propertiesToPrint[i];\n      if (key in log === false) continue;\n      if (isObject(log[key])) {\n        // The nested object may have \"logger\" type keys but since they are not\n        // at the root level of the object being processed, we want to print them.\n        // Thus, we invoke with `excludeLoggerKeys: false`.\n        const prettifiedObject = prettifyObject({\n          log: log[key],\n          errorLikeKeys,\n          excludeLoggerKeys: false,\n          eol,\n          ident\n        });\n        result = `${result}${key}: {${eol}${prettifiedObject}}${eol}`;\n        continue;\n      }\n      result = `${result}${key}: ${log[key]}${eol}`;\n    }\n  }\n\n  return result;\n};\n\nexport const readSourceFromStack: ReadSourceFn = ({ colorizer, stack, setLineNumber = false, paddingLines = 0 }) => {\n  if (!stack || stack.length < 2) {\n    return [];\n  }\n  const match = stack[1].match(/\\((.+):(\\d+):(\\d+)\\)/);\n  if (!match) {\n    return [];\n  }\n\n  const { 1: filePath, 2: codeLine, 3: codeColumn } = match;\n  const line: number = Number.parseInt(codeLine, 10);\n  const column: number = Number.parseInt(codeColumn, 10);\n  const file: GetSourceFile = getSource(filePath) as GetSourceFile;\n  const codeLines = [];\n\n  codeLines.push(\n    ...colorSection({\n      colorizer,\n      line: line - 1,\n      output: file.text,\n      position: column,\n      setLineNumber,\n      paddingLines\n    })\n  );\n\n  codeLines.unshift(`File: ${colorizer.error(file.path)}`);\n\n  return codeLines;\n};\n\nconst colorSection: ColorSectionFn = ({\n  output,\n  line,\n  position,\n  colorizer,\n  setLineNumber = false,\n  paddingLines = 0\n}) => {\n  const lines = output.split('\\n');\n  const totalLines = lines.length;\n  let topLine: number = line;\n  let bottomLine: number = line;\n  let longestLine: number = 1;\n  const codeLines: string[] = [];\n\n  if (paddingLines) {\n    // keeping line numbers within the file range\n    topLine = Math.max(topLine - paddingLines, 1);\n    bottomLine = Math.min(bottomLine + paddingLines, totalLines);\n  }\n\n  for (let i = topLine; i <= bottomLine; i++) {\n    const currentLine: string = lines[i];\n    longestLine = Math.max(longestLine, currentLine.length);\n    if (i === line) {\n      codeLines.push(colorizer.error(currentLine));\n      if (position) {\n        codeLines.push(colorizer.error(`${' '.repeat(position - 1)}^`));\n      }\n    } else {\n      codeLines.push(colorizer.message(currentLine));\n    }\n  }\n\n  if (setLineNumber) {\n    const colWidth: number = bottomLine.toString().length;\n    for (let i = topLine; i <= bottomLine; i++) {\n      let numberedLine: string = codeLines.shift();\n      numberedLine = ` ${i.toString().padStart(colWidth, ' ')} | ${numberedLine}`;\n      longestLine = Math.max(longestLine, numberedLine.length);\n      codeLines.push(numberedLine);\n    }\n  }\n\n  codeLines.push('-'.repeat(longestLine));\n  codeLines.unshift('-'.repeat(longestLine));\n\n  return codeLines;\n};\n","import colors from './colors';\nimport * as CONSTANTS from './constants';\nimport { isObject, jsonParser, prettifyObject, prettifyGraphQLErrorLog, prettifyErrorLog } from './utils';\n\nconst colorizer = colors(true);\nconst messageKey = CONSTANTS.MESSAGE_KEY;\nconst errorLikeObjectKeys = CONSTANTS.ERROR_LIKE_KEYS;\n\nconst formatMessage = ({ IDENT, EOL }, inputData) => {\n  let log;\n  let line = '';\n  if (!isObject(inputData)) {\n    const parsed = jsonParser(inputData);\n    log = parsed.value;\n    if (parsed.err || !isObject(log)) {\n      // pass through\n      return inputData + EOL;\n    }\n  } else {\n    log = inputData;\n  }\n\n  // Short-circuit for spec allowed primitive values.\n  if ([null, true, false].includes(log)) {\n    return log + EOL;\n  }\n\n  if (messageKey in log === false) return undefined;\n  if (typeof log[messageKey] !== 'string') return undefined;\n\n  line += log[messageKey] + EOL;\n\n  if (log.type === 'Error' && (log.stack || log.extensions)) {\n    let prettifiedErrorLog: string = '';\n    if (log.stack) {\n      prettifiedErrorLog = prettifyErrorLog({\n        log,\n        messageKey,\n        colorizer,\n        errorLikeKeys: errorLikeObjectKeys,\n        errorProperties: [],\n        ident: IDENT,\n        eol: EOL\n      });\n    } else if (log.extensions) {\n      prettifiedErrorLog = prettifyGraphQLErrorLog({\n        log,\n        colorizer,\n        ident: IDENT,\n        eol: EOL\n      });\n    }\n    line += prettifiedErrorLog;\n  } else {\n    const skipKeys = typeof log[messageKey] === 'string' ? [messageKey] : undefined;\n    const prettifiedObject = prettifyObject({\n      log,\n      skipKeys,\n      errorLikeKeys: errorLikeObjectKeys,\n      eol: EOL,\n      ident: IDENT\n    });\n    line += prettifiedObject;\n  }\n\n  return line;\n};\n\nexport default ({ IDENT, EOL }) => inputData => {\n  try {\n    return formatMessage({ IDENT, EOL }, inputData);\n  } catch {\n    return typeof inputData === 'string' ? inputData : JSON.stringify(inputData);\n  }\n};\n","import chalk from 'chalk';\nimport jmespath from 'jmespath';\nimport * as CONSTANTS from './constants';\nimport colors from './colors';\nimport minimal from './minimal';\nimport {\n  isObject,\n  jsonParser,\n  prettifyErrorLog,\n  prettifyGraphQLErrorLog,\n  prettifyGraphQLParsingErrorLog,\n  prettifyLevel,\n  prettifyMessage,\n  prettifyMetadata,\n  prettifyObject,\n  prettifyModule,\n  prettifyTime\n} from './utils';\n\nconst defaultOptions: { [key: string]: any } = {\n  colorize: chalk.supportsColor,\n  crlf: false,\n  errorLikeObjectKeys: CONSTANTS.ERROR_LIKE_KEYS,\n  errorProps: '',\n  levelFirst: false,\n  messageKey: CONSTANTS.MESSAGE_KEY,\n  timestampKey: CONSTANTS.TIMESTAMP_KEY,\n  translateTime: 'SYS:yyyy-mm-dd HH:MM:ss.l',\n  useMetadata: false,\n  outputStream: process.stdout\n};\n\nexport {\n  CONSTANTS,\n  colors,\n  isObject,\n  jsonParser,\n  prettifyErrorLog,\n  prettifyGraphQLErrorLog,\n  prettifyLevel,\n  prettifyMessage,\n  prettifyMetadata,\n  prettifyObject,\n  prettifyModule,\n  prettifyTime\n};\n\nexport const falconPrettyFactory = (options: object) => {\n  const opts = { ...defaultOptions, ...options };\n  const EOL = opts.crlf ? '\\r\\n' : '\\n';\n  const IDENT = '    ';\n  const { messageKey } = opts;\n  const { timestampKey } = opts;\n  const { errorLikeObjectKeys } = opts;\n  const errorProps = opts.errorProps.split(',');\n  const ignoreKeys = opts.ignore ? new Set(opts.ignore.split(',')) : undefined;\n  const colorizer = colors(opts.colorize);\n  const { search } = opts;\n\n  if (opts.minimal) {\n    return minimal({ IDENT, EOL });\n  }\n\n  const formatMessage = (inputData: string | object): string => {\n    let log;\n    if (!isObject(inputData)) {\n      const parsed = jsonParser(inputData as string);\n      log = parsed.value;\n      if (parsed.err || !isObject(log)) {\n        // pass through\n        return inputData + EOL;\n      }\n    } else {\n      log = inputData;\n    }\n\n    // Short-circuit for spec allowed primitive values.\n    if ([null, true, false].includes(log)) {\n      return `${log}\\n`;\n    }\n\n    if (search && !jmespath.search(log, search)) {\n      return undefined;\n    }\n\n    if (ignoreKeys) {\n      log = Object.keys(log)\n        .filter(key => !ignoreKeys.has(key))\n        .reduce((res, key) => {\n          res[key] = log[key];\n          return res;\n        }, {});\n    }\n\n    const prettifiedLevel = prettifyLevel({ log, colorizer });\n    const prettifiedMessage = prettifyMessage({ log, messageKey, colorizer });\n    const prettifiedMetadata = prettifyMetadata({ log });\n    const prettifiedTime = prettifyTime({ log, translateFormat: opts.translateTime, timestampKey });\n    const prettifiedModule = prettifyModule({ log, colorizer });\n\n    let line: string = '';\n    if (opts.levelFirst && prettifiedLevel) {\n      line = `${prettifiedLevel}`;\n    }\n\n    if (prettifiedTime && line === '') {\n      line = `${prettifiedTime}`;\n    } else if (prettifiedTime) {\n      line = `${line} ${prettifiedTime}`;\n    }\n\n    if (!opts.levelFirst && prettifiedLevel) {\n      if (line.length > 0) {\n        line = `${line} ${prettifiedLevel}`;\n      } else {\n        line = prettifiedLevel;\n      }\n    }\n\n    if (opts.useMetadata && prettifiedMetadata) {\n      line = `${line} ${prettifiedMetadata}`;\n    }\n\n    if (prettifiedModule) {\n      line = `${line} ${prettifiedModule}`;\n    }\n\n    if (line.endsWith(':') === false && line !== '') {\n      line += ':';\n    }\n\n    if (prettifiedMessage) {\n      line = `${line} ${prettifiedMessage}`;\n    }\n\n    if (line.length > 0) {\n      line += EOL;\n    }\n\n    if (log.type === 'Error' && (log.stack || log.extensions || log.body)) {\n      let prettifiedErrorLog: string = '';\n      if (log.body && log.locations) {\n        prettifiedErrorLog = prettifyGraphQLParsingErrorLog({\n          log,\n          colorizer,\n          ident: IDENT,\n          eol: EOL\n        });\n      } else if (log.stack) {\n        prettifiedErrorLog = prettifyErrorLog({\n          log,\n          messageKey,\n          colorizer,\n          errorLikeKeys: errorLikeObjectKeys,\n          errorProperties: errorProps,\n          ident: IDENT,\n          eol: EOL\n        });\n      } else if (log.extensions) {\n        prettifiedErrorLog = prettifyGraphQLErrorLog({\n          log,\n          colorizer,\n          ident: IDENT,\n          eol: EOL\n        });\n      }\n      line += prettifiedErrorLog;\n    } else {\n      const skipKeys = typeof log[messageKey] === 'string' ? [messageKey] : undefined;\n      const prettifiedObject = prettifyObject({\n        log,\n        skipKeys,\n        errorLikeKeys: errorLikeObjectKeys,\n        eol: EOL,\n        ident: IDENT\n      });\n      line += prettifiedObject;\n    }\n\n    return line;\n  };\n\n  return (inputData: string | object): string => {\n    try {\n      return formatMessage(inputData);\n    } catch {\n      return typeof inputData === 'string' ? inputData : JSON.stringify(inputData);\n    }\n  };\n};\n","import fs from 'fs';\nimport args from 'args';\nimport split from 'split2';\nimport pump from 'pump';\nimport { Transform } from 'readable-stream';\nimport { falconPrettyFactory, CONSTANTS } from '../format';\n\nargs\n  .option(['c', 'colorize'], 'Force adding color sequences to the output')\n  .option(['f', 'crlf'], 'Append CRLF instead of LF to formatted lines')\n  .option(['m', 'minimal'], 'Use \"minimal\"')\n  .option(\n    ['e', 'errorProps'],\n    'Comma separated list of properties on error objects to show (`*` for all properties)',\n    ''\n  )\n  .option(['l', 'levelFirst'], 'Display the log level as the first output field')\n  .option(['k', 'errorLikeObjectKeys'], 'Define which keys contain error objects (`-k err,error`)', 'err,error')\n  .option('messageKey', 'Highlight the message under the specified key', CONSTANTS.MESSAGE_KEY)\n  .option(['a', 'timestampKey'], 'Display the timestamp from the specified key', CONSTANTS.TIMESTAMP_KEY)\n  .option(\n    ['t', 'translateTime'],\n    'Display epoch timestamps as UTC ISO format or according to an optional format string (default ISO 8601)'\n  )\n  .option(['s', 'search'], 'Specify a search pattern according to jmespath')\n  .option(['i', 'ignore'], 'Ignore one or several keys: (`-i time,hostname`)', 'severity');\n\nargs\n  .example('cat log | logger-pretty', 'To prettify logs, simply pipe a log file through')\n  .example('cat log | logger-pretty --messageKey fooMessage', \"To highlight a string at a key other than 'msg', use\")\n  .example('cat log | logger-pretty -a fooTimestamp', \"To display timestamp from a key other than 'time', use\")\n  .example('cat log | logger-pretty -t', 'To convert Epoch timestamps to ISO timestamps use the -t option')\n  .example(\n    'cat log | logger-pretty -t \"SYS:yyyy-mm-dd HH:MM:ss\"',\n    'To convert Epoch timestamps to local timezone format use the -t option with \"SYS:\" prefixed format string'\n  )\n  .example('cat log | logger-pretty -l', 'To flip level and time/date in standard output use the -l option')\n  .example(\n    'cat log | logger-pretty -s \"msg == \\'hello world\\'\"',\n    \"Only prints messages with msg equals to 'hello world'\"\n  )\n  .example('cat log | logger-pretty -i pid,hostname', \"Prettify logs but don't print pid and hostname\");\n\nconst opts = args.parse(process.argv);\nconst pretty = falconPrettyFactory(opts);\nconst falconPrettyTransport = new Transform({\n  objectMode: true,\n  transform(chunk, enc, cb) {\n    const line = pretty(chunk.toString());\n    if (line === undefined) return cb();\n    cb(null, line);\n  }\n});\n\npump(process.stdin, split(), falconPrettyTransport, process.stdout);\n\n// https://github.com/pinojs/pino/pull/358\nif (!process.stdin.isTTY && !fs.fstatSync(process.stdin.fd).isFile()) {\n  process.once('SIGINT', function noOp() {});\n}\n"],"names":["LOGGER_KEYS","loggerKeys","nocolor","input","plain","default","message","random","error","ctx","chalk","constructor","enabled","level","randomColorDictionary","randomColors","green","yellow","magenta","hex","redBright","randomColor","color","shift","push","colored","white","bgRed","red","blue","grey","cyan","colorizeLevel","colorizer","Number","isInteger","LEVELS","levelNum","LEVEL_NAMES","toLowerCase","plainColorizer","coloredColorizer","useColors","defaultColorizer","colors","jsonParser","value","bourne","parse","protoAction","err","prettifyModule","log","module","undefined","prettifyGraphQLErrorLog","ident","eol","path","extensions","result","code","pathString","forEach","item","limiter","length","stack","exception","stacktrace","codeLine","codeSnippet","readSourceFromStack","setLineNumber","paddingLines","join","joinedLines","internals","joinLinesWithIndentation","prettifyGraphQLParsingErrorLog","body","locations","currentLocation","colorSection","output","line","position","column","prettifyObject","skipKeys","errorLikeKeys","ERROR_LIKE_KEYS","excludeLoggerKeys","prettifyObjectOriginal","prettifyErrorLog","messageKey","MESSAGE_KEY","errorProperties","split","excludeProperties","concat","propertiesToPrint","Object","keys","filter","key","includes","i","isObject","prettifiedObject","match","filePath","codeColumn","parseInt","file","getSource","codeLines","text","unshift","lines","totalLines","topLine","bottomLine","longestLine","Math","max","min","currentLine","repeat","colWidth","toString","numberedLine","padStart","CONSTANTS","errorLikeObjectKeys","formatMessage","IDENT","EOL","inputData","parsed","type","prettifiedErrorLog","JSON","stringify","defaultOptions","colorize","supportsColor","crlf","errorProps","levelFirst","timestampKey","translateTime","useMetadata","outputStream","process","stdout","falconPrettyFactory","options","opts","ignoreKeys","ignore","Set","search","minimal","jmespath","has","reduce","res","prettifiedLevel","prettifyLevel","prettifiedMessage","prettifyMessage","prettifiedMetadata","prettifyMetadata","prettifiedTime","prettifyTime","translateFormat","prettifiedModule","endsWith","args","option","example","argv","pretty","falconPrettyTransport","Transform","objectMode","transform","chunk","enc","cb","pump","stdin","isTTY","fs","fstatSync","fd","isFile","once","noOp"],"mappings":"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"}