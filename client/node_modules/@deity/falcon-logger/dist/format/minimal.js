"use strict";

var _interopRequireWildcard = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _colors = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("./colors"));

var CONSTANTS = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./constants"));

var _utils = /*#__PURE__*/require("./utils");

var colorizer = /*#__PURE__*/(0, _colors.default)(true);
var messageKey = CONSTANTS.MESSAGE_KEY;
var errorLikeObjectKeys = CONSTANTS.ERROR_LIKE_KEYS;

var formatMessage = function formatMessage(_ref, inputData) {
  var IDENT = _ref.IDENT,
      EOL = _ref.EOL;
  var log;
  var line = '';

  if (!(0, _utils.isObject)(inputData)) {
    var parsed = (0, _utils.jsonParser)(inputData);
    log = parsed.value;

    if (parsed.err || !(0, _utils.isObject)(log)) {
      // pass through
      return inputData + EOL;
    }
  } else {
    log = inputData;
  } // Short-circuit for spec allowed primitive values.


  if ([null, true, false].includes(log)) {
    return log + EOL;
  }

  if (messageKey in log === false) return undefined;
  if (typeof log[messageKey] !== 'string') return undefined;
  line += log[messageKey] + EOL;

  if (log.type === 'Error' && (log.stack || log.extensions)) {
    var prettifiedErrorLog = '';

    if (log.stack) {
      prettifiedErrorLog = (0, _utils.prettifyErrorLog)({
        log: log,
        messageKey: messageKey,
        colorizer: colorizer,
        errorLikeKeys: errorLikeObjectKeys,
        errorProperties: [],
        ident: IDENT,
        eol: EOL
      });
    } else if (log.extensions) {
      prettifiedErrorLog = (0, _utils.prettifyGraphQLErrorLog)({
        log: log,
        colorizer: colorizer,
        ident: IDENT,
        eol: EOL
      });
    }

    line += prettifiedErrorLog;
  } else {
    var skipKeys = typeof log[messageKey] === 'string' ? [messageKey] : undefined;
    var prettifiedObject = (0, _utils.prettifyObject)({
      log: log,
      skipKeys: skipKeys,
      errorLikeKeys: errorLikeObjectKeys,
      eol: EOL,
      ident: IDENT
    });
    line += prettifiedObject;
  }

  return line;
};

var _default = function _default(_ref2) {
  var IDENT = _ref2.IDENT,
      EOL = _ref2.EOL;
  return function (inputData) {
    try {
      return formatMessage({
        IDENT: IDENT,
        EOL: EOL
      }, inputData);
    } catch (_unused) {
      return typeof inputData === 'string' ? inputData : JSON.stringify(inputData);
    }
  };
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mb3JtYXQvbWluaW1hbC50cyJdLCJuYW1lcyI6WyJjb2xvcml6ZXIiLCJtZXNzYWdlS2V5IiwiQ09OU1RBTlRTIiwiTUVTU0FHRV9LRVkiLCJlcnJvckxpa2VPYmplY3RLZXlzIiwiRVJST1JfTElLRV9LRVlTIiwiZm9ybWF0TWVzc2FnZSIsImlucHV0RGF0YSIsIklERU5UIiwiRU9MIiwibG9nIiwibGluZSIsInBhcnNlZCIsInZhbHVlIiwiZXJyIiwiaW5jbHVkZXMiLCJ1bmRlZmluZWQiLCJ0eXBlIiwic3RhY2siLCJleHRlbnNpb25zIiwicHJldHRpZmllZEVycm9yTG9nIiwiZXJyb3JMaWtlS2V5cyIsImVycm9yUHJvcGVydGllcyIsImlkZW50IiwiZW9sIiwic2tpcEtleXMiLCJwcmV0dGlmaWVkT2JqZWN0IiwiSlNPTiIsInN0cmluZ2lmeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUEsSUFBTUEsU0FBUyxnQkFBRyxxQkFBTyxJQUFQLENBQWxCO0FBQ0EsSUFBTUMsVUFBVSxHQUFHQyxTQUFTLENBQUNDLFdBQTdCO0FBQ0EsSUFBTUMsbUJBQW1CLEdBQUdGLFNBQVMsQ0FBQ0csZUFBdEM7O0FBRUEsSUFBTUMsYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixPQUFpQkMsU0FBakIsRUFBK0I7QUFBQSxNQUE1QkMsS0FBNEIsUUFBNUJBLEtBQTRCO0FBQUEsTUFBckJDLEdBQXFCLFFBQXJCQSxHQUFxQjtBQUNuRCxNQUFJQyxHQUFKO0FBQ0EsTUFBSUMsSUFBSSxHQUFHLEVBQVg7O0FBQ0EsTUFBSSxDQUFDLHFCQUFTSixTQUFULENBQUwsRUFBMEI7QUFDeEIsUUFBTUssTUFBTSxHQUFHLHVCQUFXTCxTQUFYLENBQWY7QUFDQUcsSUFBQUEsR0FBRyxHQUFHRSxNQUFNLENBQUNDLEtBQWI7O0FBQ0EsUUFBSUQsTUFBTSxDQUFDRSxHQUFQLElBQWMsQ0FBQyxxQkFBU0osR0FBVCxDQUFuQixFQUFrQztB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O1xuaW1wb3J0ICogYXMgQ09OU1RBTlRTIGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IGlzT2JqZWN0LCBqc29uUGFyc2VyLCBwcmV0dGlmeU9iamVjdCwgcHJldHRpZnlHcmFwaFFMRXJyb3JMb2csIHByZXR0aWZ5RXJyb3JMb2cgfSBmcm9tICcuL3V0aWxzJztcblxuY29uc3QgY29sb3JpemVyID0gY29sb3JzKHRydWUpO1xuY29uc3QgbWVzc2FnZUtleSA9IENPTlNUQU5UUy5NRVNTQUdFX0tFWTtcbmNvbnN0IGVycm9yTGlrZU9iamVjdEtleXMgPSBDT05TVEFOVFMuRVJST1JfTElLRV9LRVlTO1xuXG5jb25zdCBmb3JtYXRNZXNzYWdlID0gKHsgSURFTlQsIEVPTCB9LCBpbnB1dERhdGEpID0+IHtcbiAgbGV0IGxvZztcbiAgbGV0IGxpbmUgPSAnJztcbiAgaWYgKCFpc09iamVjdChpbnB1dERhdGEpKSB7XG4gICAgY29uc3QgcGFyc2VkID0ganNvblBhcnNlcihpbnB1dERhdGEpO1xuICAgIGxvZyA9IHBhcnNlZC52YWx1ZTtcbiAgICBpZiAocGFyc2VkLmVyciB8fCAhaXNPYmplY3QobG9nKSkge1xuICAgICAgLy8gcGFzcyB0aHJvdWdoXG4gICAgICByZXR1cm4gaW5wdXREYXRhICsgRU9MO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsb2cgPSBpbnB1dERhdGE7XG4gIH1cblxuICAvLyBTaG9ydC1jaXJjdWl0IGZvciBzcGVjIGFsbG93ZWQgcHJpbWl0aXZlIHZhbHVlcy5cbiAgaWYgKFtudWxsLCB0cnVlLCBmYWxzZV0uaW5jbHVkZXMobG9nKSkge1xuICAgIHJldHVybiBsb2cgKyBFT0w7XG4gIH1cblxuICBpZiAobWVzc2FnZUtleSBpbiBsb2cgPT09IGZhbHNlKSByZXR1cm4gdW5kZWZpbmVkO1xuICBpZiAodHlwZW9mIGxvZ1ttZXNzYWdlS2V5XSAhPT0gJ3N0cmluZycpIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgbGluZSArPSBsb2dbbWVzc2FnZUtleV0gKyBFT0w7XG5cbiAgaWYgKGxvZy50eXBlID09PSAnRXJyb3InICYmIChsb2cuc3RhY2sgfHwgbG9nLmV4dGVuc2lvbnMpKSB7XG4gICAgbGV0IHByZXR0aWZpZWRFcnJvckxvZzogc3RyaW5nID0gJyc7XG4gICAgaWYgKGxvZy5zdGFjaykge1xuICAgICAgcHJldHRpZmllZEVycm9yTG9nID0gcHJldHRpZnlFcnJvckxvZyh7XG4gICAgICAgIGxvZyxcbiAgICAgICAgbWVzc2FnZUtleSxcbiAgICAgICAgY29sb3JpemVyLFxuICAgICAgICBlcnJvckxpa2VLZXlzOiBlcnJvckxpa2VPYmplY3RLZXlzLFxuICAgICAgICBlcnJvclByb3BlcnRpZXM6IFtdLFxuICAgICAgICBpZGVudDogSURFTlQsXG4gICAgICAgIGVvbDogRU9MXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGxvZy5leHRlbnNpb25zKSB7XG4gICAgICBwcmV0dGlmaWVkRXJyb3JMb2cgPSBwcmV0dGlmeUdyYXBoUUxFcnJvckxvZyh7XG4gICAgICAgIGxvZyxcbiAgICAgICAgY29sb3JpemVyLFxuICAgICAgICBpZGVudDogSURFTlQsXG4gICAgICAgIGVvbDogRU9MXG4gICAgICB9KTtcbiAgICB9XG4gICAgbGluZSArPSBwcmV0dGlmaWVkRXJyb3JMb2c7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc2tpcEtleXMgPSB0eXBlb2YgbG9nW21lc3NhZ2VLZXldID09PSAnc3RyaW5nJyA/IFttZXNzYWdlS2V5XSA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBwcmV0dGlmaWVkT2JqZWN0ID0gcHJldHRpZnlPYmplY3Qoe1xuICAgICAgbG9nLFxuICAgICAgc2tpcEtleXMsXG4gICAgICBlcnJvckxpa2VLZXlzOiBlcnJvckxpa2VPYmplY3RLZXlzLFxuICAgICAgZW9sOiBFT0wsXG4gICAgICBpZGVudDogSURFTlRcbiAgICB9KTtcbiAgICBsaW5lICs9IHByZXR0aWZpZWRPYmplY3Q7XG4gIH1cblxuICByZXR1cm4gbGluZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0ICh7IElERU5ULCBFT0wgfSkgPT4gaW5wdXREYXRhID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZm9ybWF0TWVzc2FnZSh7IElERU5ULCBFT0wgfSwgaW5wdXREYXRhKTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIHR5cGVvZiBpbnB1dERhdGEgPT09ICdzdHJpbmcnID8gaW5wdXREYXRhIDogSlNPTi5zdHJpbmdpZnkoaW5wdXREYXRhKTtcbiAgfVxufTtcbiJdfQ==