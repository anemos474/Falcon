{"version":3,"file":"falcon-logger.cjs.js","sources":["../src/index.ts"],"sourcesContent":["import pino, { Logger as PinoLogger, Level } from 'pino';\nimport { chindingsSym } from 'pino/lib/symbols';\n\ntype Logger = {\n  setLogLevel: (level: Level) => void;\n  setApp: (name: string) => void;\n  getFor: (moduleName: string, extra?: { [key: string]: any }) => Logger;\n  traceTime: (label: string, fn: () => Promise<any>) => Promise<any>;\n} & PinoLogger;\n\nconst levelToSeverity = (level: Level | string): string => {\n  switch (level) {\n    case 'trace':\n    case 'debug':\n      return 'DEBUG';\n    case 'info':\n      return 'INFO';\n    case 'warn':\n      return 'WARNING';\n    case 'error':\n      return 'ERROR';\n    case 'fatal':\n      return 'CRITICAL';\n    default:\n      return 'DEFAULT';\n  }\n};\n\nlet isAppSet: boolean = false;\nconst logger: Logger = pino({\n  name: 'falcon-logger',\n  formatters: {\n    level: (level, number) => ({\n      level: number,\n      severity: levelToSeverity(level)\n    })\n  }\n}) as Logger;\n\n/**\n * Sets the log level for the logger instance\n * @param level Required log level\n * @returns {void}\n */\nlogger.setLogLevel = (level: Level): void => {\n  logger.level = level;\n};\n\n/**\n * Sets the \"app\" key to every log message via the root logger instance.\n * It can be called only once, preferably at the very beginning of your application.\n * @param name Application name\n * @returns {void}\n */\nlogger.setApp = (name: string): void => {\n  if (isAppSet) {\n    logger.warn('logger.setApp() can be called only once.');\n    return;\n  }\n  // @ts-ignore: Tweaking internal Pino settings\n  logger[chindingsSym] += `,\"app\":\"${name}\"`;\n  isAppSet = true;\n};\n\n/**\n * Initializes an extra sub-logger instance for the provided module name\n * and adds \"module\" key to every log message automatically.\n * Handy for defining sub-loggers for your nested modules.\n * In conjunction with `falcon-pretty` formatter - it will render an additional \"[my-module]\" section in the log message output.\n * @example\n * logger.getFor(\"my-module\").info(\"Calling my-module...\");\n * @param moduleName Module name\n * @param extra map with values that will be added to each logger call automatically\n * @returns {Logger} Module-specific Logger instance\n */\nlogger.getFor = (moduleName: string, extra: { [key: string]: any } = {}): Logger =>\n  logger.child({ module: moduleName, ...extra }) as Logger;\n\n/**\n * Measures the timing for the provided callback.\n * If your log level is set to trace - Logger will produce the following log message:\n * \"TRACE: My time (XX ms)\"\n * @param label Log label\n * @param fn Function to trace the execution time of\n * @returns {Promise<T>} `fn` result\n */\nlogger.traceTime = function traceTime<T = any>(label: string, fn: () => Promise<T>): Promise<T> {\n  // using `function()` statement to preserve the context in case of \"getFor\" call\n  if (!this.isLevelEnabled('trace')) {\n    return fn();\n  }\n\n  const startTime = Date.now();\n  return fn().finally(() => {\n    const duration = Date.now() - startTime;\n    this.trace(`${label} (${duration}ms)`);\n  });\n};\n\nexport default logger;\n"],"names":["levelToSeverity","level","isAppSet","logger","pino","name","formatters","number","severity","setLogLevel","setApp","warn","chindingsSym","getFor","moduleName","extra","child","module","traceTime","label","fn","isLevelEnabled","startTime","Date","now","finally","duration","trace"],"mappings":";;;;;;;AAUA,MAAMA,eAAe,GAAIC,KAAD,IAAmC;UACjDA,KAAR;SACO,OAAL;SACK,OAAL;aACS,OAAP;;SACG,MAAL;aACS,MAAP;;SACG,MAAL;aACS,SAAP;;SACG,OAAL;aACS,OAAP;;SACG,OAAL;aACS,UAAP;;;aAEO,SAAP;;CAdN;;AAkBA,IAAIC,QAAiB,GAAG,KAAxB;AACA,MAAMC,MAAc,GAAGC,IAAI,CAAC;EAC1BC,IAAI,EAAE,eADoB;EAE1BC,UAAU,EAAE;IACVL,KAAK,EAAE,CAACA,KAAD,EAAQM,MAAR,MAAoB;MACzBN,KAAK,EAAEM,MADkB;MAEzBC,QAAQ,EAAER,eAAe,CAACC,KAAD;KAFpB;;CAHgB,CAA3B;;;;;;;AAeAE,MAAM,CAACM,WAAP,GAAsBR,KAAD,IAAwB;EAC3CE,MAAM,CAACF,KAAP,GAAeA,KAAf;CADF;;;;;;;;;AAUAE,MAAM,CAACO,MAAP,GAAiBL,IAAD,IAAwB;MAClCH,QAAJ,EAAc;IACZC,MAAM,CAACQ,IAAP,CAAY,0CAAZ;;GAFoC;;;EAMtCR,MAAM,CAACS,oBAAD,CAAN,IAAyB,WAAUP,IAAK,GAAxC;EACAH,QAAQ,GAAG,IAAX;CAPF;;;;;;;;;;;;;;AAqBAC,MAAM,CAACU,MAAP,GAAgB,CAACC,UAAD,EAAqBC,KAA6B,GAAG,EAArD,KACdZ,MAAM,CAACa,KAAP;EAAeC,MAAM,EAAEH;GAAeC,KAAtC,EADF;;;;;;;;;;;AAWAZ,MAAM,CAACe,SAAP,GAAmB,SAASA,SAAT,CAA4BC,KAA5B,EAA2CC,EAA3C,EAA6E;;MAE1F,CAAC,KAAKC,cAAL,CAAoB,OAApB,CAAL,EAAmC;WAC1BD,EAAE,EAAT;;;QAGIE,SAAS,GAAGC,IAAI,CAACC,GAAL,EAAlB;SACOJ,EAAE,GAAGK,OAAL,CAAa,MAAM;UAClBC,QAAQ,GAAGH,IAAI,CAACC,GAAL,KAAaF,SAA9B;SACKK,KAAL,CAAY,GAAER,KAAM,KAAIO,QAAS,KAAjC;GAFK,CAAP;CAPF;;;;"}