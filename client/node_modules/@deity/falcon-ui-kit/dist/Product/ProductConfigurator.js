"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.ProductConfigurator = void 0;

var _inheritsLoose2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/inheritsLoose"));

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _falconFrontKit = /*#__PURE__*/require("@deity/falcon-front-kit");

/**
 * ProductConfigurator takes care of handling data relaed to product options available to be selected before adding to cart.
 * Currently only configurable options are supported, in the future that class will handle bundled products as well as custom product attributes.
 */
var ProductConfigurator = /*#__PURE__*/function (_React$Component) {
  (0, _inheritsLoose2.default)(ProductConfigurator, _React$Component);

  function ProductConfigurator() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      selectedConfigurableOptions: {}
    };

    _this.handleProductConfigurationChange = function (type, ev) {
      var _ev$target = ev.target,
          name = _ev$target.name,
          value = _ev$target.value;

      if (type === 'configurableOption') {
        _this.handleConfigurationOptionChange(name, value);
      }
    };

    _this.isValueSelected = function (type, name, value) {
      if (type === 'configurableOption') {
        return _this.state.selectedConfigurableOptions.get(name) === value;
      }

      return false;
    };

    return _this;
  }

  var _proto = ProductConfigurator.prototype;

  /**
   * Handles change of configurable product option
   * @param {string} name name of the option
   * @param {any} value value of changed option
   */
  _proto.handleConfigurationOptionChange = function handleConfigurationOptionChange(name, value) {
    var _this2 = this;

    this.setState(function (state) {
      var _Object$assign;

      return {
        selectedConfigurableOptions: Object.assign({}, state.selectedConfigurableOptions, (_Object$assign = {}, _Object$assign[name] = value, _Object$assign))
      };
    }, function () {
      // when state is set then update form manager
      _this2.props.onChange('options', (0, _falconFrontKit.formProductOptionsToInput)(_this2.state.selectedConfigurableOptions));
    });
  };

  _proto.render = function render() {
    return this.props.children({
      handleProductConfigurationChange: this.handleProductConfigurationChange,
      isValueSelected: this.isValueSelected
    });
  };

  return ProductConfigurator;
}(_react.default.Component);

exports.ProductConfigurator = ProductConfigurator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Qcm9kdWN0L1Byb2R1Y3RDb25maWd1cmF0b3IudHMiXSwibmFtZXMiOlsiUHJvZHVjdENvbmZpZ3VyYXRvciIsInN0YXRlIiwic2VsZWN0ZWRDb25maWd1cmFibGVPcHRpb25zIiwiaGFuZGxlUHJvZHVjdENvbmZpZ3VyYXRpb25DaGFuZ2UiLCJ0eXBlIiwiZXYiLCJ0YXJnZXQiLCJuYW1lIiwidmFsdWUiLCJoYW5kbGVDb25maWd1cmF0aW9uT3B0aW9uQ2hhbmdlIiwiaXNWYWx1ZVNlbGVjdGVkIiwiZ2V0Iiwic2V0U3RhdGUiLCJwcm9wcyIsIm9uQ2hhbmdlIiwicmVuZGVyIiwiY2hpbGRyZW4iLCJSZWFjdCIsIkNvbXBvbmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBa0RBO0FBQ0E7QUFDQTtBQUNBO0lBQ2FBLG1COzs7Ozs7Ozs7OztVQUNYQyxLLEdBQWtDO0FBQ2hDQyxNQUFBQSwyQkFBMkIsRUFBRTtBQURHLEs7O1VBU2xDQyxnQyxHQUFtQyxVQUFDQyxJQUFELEVBQW1CQyxFQUFuQixFQUE2QztBQUM5RSx1QkFBd0JBLEVBQUUsQ0FBQ0MsTUFBM0I7QUFBQSxVQUFRQyxJQUFSLGNBQVFBLElBQVI7QUFBQSxVQUFjQyxLQUFkLGNBQWNBLEtBQWQ7O0FBRUEsVUFBSUosSUFBSSxLQUFLLG9CQUFiLEVBQW1DO0FBQ2pDLGNBQUtLLCtCQUFMLENBQXFDRixJQUFyQyxFQUEyQ0MsS0FBM0M7QUFDRDtBQUNGLEs7O1VBU0RFLGUsR0FBa0IsVUFBQ04sSUFBRCxFQUFtQkcsSUFBbkIsRUFBaUNDLEtBQWpDLEVBQXlEO0FBQ3pFLFVBQUlKLElBQUksS0FBSyxvQkFBYixFQUFtQztBQUNqQyxlQUFPLE1BQUtILEtBQUwsQ0FBV0MsMkJBQVgsQ0FBdUNTLEdBQXZDLENBQTJDSixJQUEzQyxNQUFxREMsS0FBNUQ7QUFDRDs7QUFDRCxhQUFPLEtBQVA7QUFDRCxLOzs7Ozs7O0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtTQUNFQywrQixHQUFBLHlDQUFnQ0YsSUFBaEMsRUFBOENDLEtBQTlDLEVBQTBEO0FBQUE7O0FBQ3hELFNBQUtJLFFBQUwsQ0FDRSxVQUFDWCxLQUFEO0FBQUE7O0FBQUEsYUFBc0M7QUFDcENDLFFBQUFBLDJCQUEyQixvQkFDdEJELEtBQUssQ0FBQ0MsMkJBRGdCLHVDQUV4QkssSUFGd0IsSUFFakJDLEtBRmlCO0FBRFMsT0FBdEM7QUFBQSxLQURGLEVBT0UsWUFBTTtBQUNKO0FBQ0EsTUFBQSxNQUFJLENBQUNLLEtBQUwsQ0FBV0MsUUFBWCxDQUFvQixTQUFwQixFQUErQiwrQ0FBMEIsTUFBSSxDQUFDYixLQUFMLENBQVdDLDJCQUFyQyxDQUEvQjtBQUNELEtBVkg7QUFZRCxHOztTQUVEYSxNLEdBQUEsa0JBQVM7QUFDUCxXQUFPLEtBQUtGLEtBQUwsQ0FBV0csUUFBWCxDQUFvQjtBQUN6QmIsTUFBQUEsZ0NBQWdDLEVBQUUsS0FBS0EsZ0NBRGQ7QUFFekJPLE1BQUFBLGVBQWUsRUFBRSxLQUFLQTtBQUZHLEtBQXBCLENBQVA7QUFJRCxHOzs7RUF6RHNDTyxlQUFNQyxTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGZvcm1Qcm9kdWN0T3B0aW9uc1RvSW5wdXQgfSBmcm9tICdAZGVpdHkvZmFsY29uLWZyb250LWtpdCc7XG5cbi8qKlxuICogQXZhaWxhYmxlIG9wdGlvbnMgdGhhdCBjYW4gYmUgY2hhbmdlZC4gQ3VycmVudGx5IFByb2R1Y3RDb25maWd1cmF0b3IgaGFuZGxlcyBvbmx5IHByb2R1Y3QgY29uZmlndXJhYmxlIG9wdGlvbnMuXG4gKi9cbmV4cG9ydCB0eXBlIE9wdGlvblR5cGUgPSAnY29uZmlndXJhYmxlT3B0aW9uJyB8ICdidW5kbGVPcHRpb24nO1xuXG4vKipcbiAqIENoYW5nZSBzb3VyY2UgLSBjdXJyZW50bHkgb25seSBSZWFjdC5DaGFuZ2VFdmVudCBpcyBzdXBwb3J0ZWQgc28gb25seSBjaGFuZ2UgZnJvbSBVSSBjYW4gYmUgaGFuZGxlZC5cbiAqIEluIHRoZSBmdXR1cmUgd2UnbGwgcHJvYmFibHkgbmVlZCBhbHNvIGN1c3RvbSBjaGFuZ2UgaGFuZGxlciAocGFzc2luZyBuYW1lIGFuZCB2YWx1ZSBvZiBjaGFuZ2VkIG9wdGlvbikuXG4gKi9cbnR5cGUgSGFuZGxlQ2hhbmdlUGFyYW0gPSBSZWFjdC5DaGFuZ2VFdmVudDxhbnk+O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgaW5qZWN0ZWQgdG8gcmVuZGVyIHByb3AgZnVuY3Rpb25cbiAqL1xudHlwZSBQcm9kdWN0Q29uZmlndXJhdG9ySW5qZWN0ZWRQcm9wcyA9IHtcbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB0eXBlIHR5cGUgb2YgdGhlIGNoYW5nZWQgb3B0aW9uIChjdXJyZW50bHkgb25seSBjb25maWd1cmFibGUgcHJvZHVjdHMgYXJlIHN1cHBvcnRlZCBzbyAnY29uZmlndXJhYmxlT3B0aW9uJyBnb2VzIGhlcmUpXG4gICAqIEBwYXJhbSBldiBjaGFuZ2UgZXZlbnRcbiAgICovXG4gIGhhbmRsZVByb2R1Y3RDb25maWd1cmF0aW9uQ2hhbmdlKHR5cGU6IE9wdGlvblR5cGUsIGV2OiBIYW5kbGVDaGFuZ2VQYXJhbSk6IHZvaWQ7XG4gIC8qKlxuICAgKiBIZWxwZXIgdGhhdCBhbGxvd3MgdG8gY2hlY2sgaWYgYSBwYXJ0aWN1bGFyIG9wdGlvbiBpcyBhbHJlYWR5IHNlbGVjdGVkXG4gICAqIEBwYXJhbSB0eXBlIHR5cGUgb2Ygb3B0aW9uIHRvIGNoZWNrXG4gICAqIEBwYXJhbSBuYW1lIG5hbWUgb2Ygb3B0aW9uIHRvIGNoZWNrXG4gICAqIEBwYXJhbSB2YWx1ZSAgdmFsdWUgdG8gY2hlY2tcbiAgICovXG4gIGlzVmFsdWVTZWxlY3RlZCh0eXBlOiBPcHRpb25UeXBlLCBuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBib29sZWFuO1xufTtcblxudHlwZSBQcm9kdWN0Q29uZmlndXJhdG9yUHJvcHMgPSB7XG4gIC8qKlxuICAgKiBIYW5kbGVyIHdoaWNoIHdpbGwgYmUgY2FsbGVkIHdoZW4gb3B0aW9uIGNoYW5nZSBoYXMgYmVlbiBwcm9jZXNzZWQgYW5kIHdlIGhhdmUgZmluYWwgc3RhdGUgYWZ0ZXIgY2hhbmdlIHRoYXQgY2FuIGJlIHN1Ym1pdHRlZFxuICAgKiBAcGFyYW0gbmFtZSBuYW1lIG9mIGNoYW5nZWQgb3B0aW9uXG4gICAqIEBwYXJhbSB2YWx1ZSBmaW5hbCB2YWx1ZSBvZiBjaGFuZ2VkIG9wdGlvblxuICAgKi9cbiAgb25DaGFuZ2UobmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZDtcbiAgLyoqXG4gICAqIFJlbmRlciBwcm9wIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIHJldHVybiB2YWxpZCByZWFjdCBlbGVtZW50XG4gICAqIEBwYXJhbSBwcm9wcyBwcm9wcyBwYXNzZWQgdG8gcmVuZGVyIGZ1bmN0aW9uXG4gICAqL1xuICBjaGlsZHJlbihwcm9wczogUHJvZHVjdENvbmZpZ3VyYXRvckluamVjdGVkUHJvcHMpOiBhbnk7XG59O1xuXG50eXBlIFByb2R1Y3RDb25maWd1cmF0b3JTdGF0ZSA9IHtcbiAgc2VsZWN0ZWRDb25maWd1cmFibGVPcHRpb25zOiB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfTtcbn07XG5cbi8qKlxuICogUHJvZHVjdENvbmZpZ3VyYXRvciB0YWtlcyBjYXJlIG9mIGhhbmRsaW5nIGRhdGEgcmVsYWVkIHRvIHByb2R1Y3Qgb3B0aW9ucyBhdmFpbGFibGUgdG8gYmUgc2VsZWN0ZWQgYmVmb3JlIGFkZGluZyB0byBjYXJ0LlxuICogQ3VycmVudGx5IG9ubHkgY29uZmlndXJhYmxlIG9wdGlvbnMgYXJlIHN1cHBvcnRlZCwgaW4gdGhlIGZ1dHVyZSB0aGF0IGNsYXNzIHdpbGwgaGFuZGxlIGJ1bmRsZWQgcHJvZHVjdHMgYXMgd2VsbCBhcyBjdXN0b20gcHJvZHVjdCBhdHRyaWJ1dGVzLlxuICovXG5leHBvcnQgY2xhc3MgUHJvZHVjdENvbmZpZ3VyYXRvciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9kdWN0Q29uZmlndXJhdG9yUHJvcHMsIFByb2R1Y3RDb25maWd1cmF0b3JTdGF0ZT4ge1xuICBzdGF0ZTogUHJvZHVjdENvbmZpZ3VyYXRvclN0YXRlID0ge1xuICAgIHNlbGVjdGVkQ29uZmlndXJhYmxlT3B0aW9uczoge31cbiAgfTtcblxuICAvKipcbiAgICogSGFuZGxlciBmb3IgYWxsIGNvbmZpZ3VyYXRpb24gY2hhbmdlcywgYmFzZWQgb24gdGhlIHR5cGUgaW52b2tlcyBwcm9wZXIgdHlwZSBoYW5kbGVyXG4gICAqIEBwYXJhbSB7T3B0aW9uVHlwZX0gdHlwZSB0eXBlIG9mIHRoZSBjaGFuZ2VcbiAgICogQHBhcmFtIHtIYW5kbGVDaGFuZ2VQYXJhbX0gZXYgY2hhbmdlIGRhdGFcbiAgICovXG4gIGhhbmRsZVByb2R1Y3RDb25maWd1cmF0aW9uQ2hhbmdlID0gKHR5cGU6IE9wdGlvblR5cGUsIGV2OiBIYW5kbGVDaGFuZ2VQYXJhbSkgPT4ge1xuICAgIGNvbnN0IHsgbmFtZSwgdmFsdWUgfSA9IGV2LnRhcmdldDtcblxuICAgIGlmICh0eXBlID09PSAnY29uZmlndXJhYmxlT3B0aW9uJykge1xuICAgICAgdGhpcy5oYW5kbGVDb25maWd1cmF0aW9uT3B0aW9uQ2hhbmdlKG5hbWUsIHZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBwYXNzZWQgdmFsdWUgaXMgc2VsZWN0ZWQuXG4gICAqIEBwYXJhbSB7T3B0aW9uVHlwZX0gdHlwZSB0eXBlIG9mIHRoZSBvcHRpb24gdG8gY2hlY2tcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiB0aGUgb3B0aW9uIHRvIGNoZWNrXG4gICAqIEBwYXJhbSB7YW55fSB2YWx1ZSB2YWx1ZSBvZiB0aGUgb3B0aW9uIHRvIGNoZWNrXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIHdoZW4gb3B0aW9uIHdpdGggcGFzc2VkIG5hbWUgaGFzIHBhc3NlZCB2YWx1ZVxuICAgKi9cbiAgaXNWYWx1ZVNlbGVjdGVkID0gKHR5cGU6IE9wdGlvblR5cGUsIG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSk6IGJvb2xlYW4gPT4ge1xuICAgIGlmICh0eXBlID09PSAnY29uZmlndXJhYmxlT3B0aW9uJykge1xuICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuc2VsZWN0ZWRDb25maWd1cmFibGVPcHRpb25zLmdldChuYW1lKSA9PT0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICAvKipcbiAgICogSGFuZGxlcyBjaGFuZ2Ugb2YgY29uZmlndXJhYmxlIHByb2R1Y3Qgb3B0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIG9wdGlvblxuICAgKiBAcGFyYW0ge2FueX0gdmFsdWUgdmFsdWUgb2YgY2hhbmdlZCBvcHRpb25cbiAgICovXG4gIGhhbmRsZUNvbmZpZ3VyYXRpb25PcHRpb25DaGFuZ2UobmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KSB7XG4gICAgdGhpcy5zZXRTdGF0ZShcbiAgICAgIChzdGF0ZTogUHJvZHVjdENvbmZpZ3VyYXRvclN0YXRlKSA9PiAoe1xuICAgICAgICBzZWxlY3RlZENvbmZpZ3VyYWJsZU9wdGlvbnM6IHtcbiAgICAgICAgICAuLi5zdGF0ZS5zZWxlY3RlZENvbmZpZ3VyYWJsZU9wdGlvbnMsXG4gICAgICAgICAgW25hbWVdOiB2YWx1ZVxuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgICgpID0+IHtcbiAgICAgICAgLy8gd2hlbiBzdGF0ZSBpcyBzZXQgdGhlbiB1cGRhdGUgZm9ybSBtYW5hZ2VyXG4gICAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UoJ29wdGlvbnMnLCBmb3JtUHJvZHVjdE9wdGlvbnNUb0lucHV0KHRoaXMuc3RhdGUuc2VsZWN0ZWRDb25maWd1cmFibGVPcHRpb25zKSk7XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbih7XG4gICAgICBoYW5kbGVQcm9kdWN0Q29uZmlndXJhdGlvbkNoYW5nZTogdGhpcy5oYW5kbGVQcm9kdWN0Q29uZmlndXJhdGlvbkNoYW5nZSxcbiAgICAgIGlzVmFsdWVTZWxlY3RlZDogdGhpcy5pc1ZhbHVlU2VsZWN0ZWRcbiAgICB9KTtcbiAgfVxufVxuIl19