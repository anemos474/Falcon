"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.ErrorSummary = void 0;

var _objectWithoutPropertiesLoose2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _propTypes = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("prop-types"));

var _falconUi = /*#__PURE__*/require("@deity/falcon-ui");

var _ErrorListLayout = /*#__PURE__*/require("./ErrorListLayout");

var _Error = /*#__PURE__*/require("./Error");

var ErrorSummary = function ErrorSummary(_ref) {
  var errors = _ref.errors,
      rest = (0, _objectWithoutPropertiesLoose2.default)(_ref, ["errors"]);

  if (!errors) {
    return null;
  }

  errors = Array.isArray(errors) ? errors : [errors];
  return /*#__PURE__*/_react.default.createElement(_ErrorListLayout.ErrorListLayout, rest, errors.map(function (error) {
    return /*#__PURE__*/_react.default.createElement(_Error.Error, {
      as: _falconUi.ListItem,
      key: error.message,
      insights: error
    }, error.message);
  }));
};

exports.ErrorSummary = ErrorSummary;

var errorType = /*#__PURE__*/_propTypes.default.shape({
  message: _propTypes.default.string.isRequired,
  code: _propTypes.default.string.isRequired
}).isRequired;

ErrorSummary.propTypes = {
  // @ts-ignore https://github.com/DefinitelyTyped/DefinitelyTyped/issues/34692
  errors: /*#__PURE__*/_propTypes.default.oneOfType([errorType, /*#__PURE__*/_propTypes.default.arrayOf(errorType).isRequired])
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9FcnJvci9FcnJvclN1bW1hcnkudHN4Il0sIm5hbWVzIjpbIkVycm9yU3VtbWFyeSIsImVycm9ycyIsInJlc3QiLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJlcnJvciIsIkxpc3RJdGVtIiwibWVzc2FnZSIsImVycm9yVHlwZSIsInNoYXBlIiwiUHJvcFR5cGVzIiwic3RyaW5nIiwiaXNSZXF1aXJlZCIsImNvZGUiLCJwcm9wVHlwZXMiLCJvbmVPZlR5cGUiLCJhcnJheU9mIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFLTyxJQUFNQSxZQUEwQyxHQUFHLFNBQTdDQSxZQUE2QyxPQUF5QjtBQUFBLE1BQXRCQyxNQUFzQixRQUF0QkEsTUFBc0I7QUFBQSxNQUFYQyxJQUFXOztBQUNqRixNQUFJLENBQUNELE1BQUwsRUFBYTtBQUNYLFdBQU8sSUFBUDtBQUNEOztBQUVEQSxFQUFBQSxNQUFNLEdBQUdFLEtBQUssQ0FBQ0MsT0FBTixDQUFjSCxNQUFkLElBQXdCQSxNQUF4QixHQUFpQyxDQUFDQSxNQUFELENBQTFDO0FBRUEsc0JBQ0UsNkJBQUMsZ0NBQUQsRUFBcUJDLElBQXJCLEVBQ0dELE1BQU0sQ0FBQ0ksR0FBUCxDQUFXLFVBQUFDLEtBQUs7QUFBQSx3QkFDZiw2QkFBQyxZQUFEO0FBQU8sTUFBQSxFQUFFLEVBQUVDLGtCQUFYO0FBQXFCLE1BQUEsR0FBRyxFQUFFRCxLQUFLLENBQUNFLE9BQWhDO0FBQXlDLE1BQUEsUUFBUSxFQUFFRjtBQUFuRCxPQUNHQSxLQUFLLENBQUNFLE9BRFQsQ0FEZTtBQUFBLEdBQWhCLENBREgsQ0FERjtBQVNELENBaEJNOzs7O0FBaUJQLElBQU1DLFNBQVMsR0FBRyxnQ0FBVUMsS0FBVixDQUFnQjtBQUNoQ0YsRUFBQUEsT0FBTyxFQUFFRyxtQkFBVUMsTUFBVixDQUFpQkMsVUFETTtBQUVoQ0MsRUFBQUEsSUFBSSxFQUFFSCxtQkFBVUMsTUFBVixDQUFpQkM7QUFGUyxDQUFoQixFQUdmQSxVQUhIOztBQUlBYixZQUFZLENBQUNlLFNBQWIsR0FBeUI7QUFDdkI7QUFDQWQsRUFBQUEsTUFBTSxlQUFFVSxtQkFBVUssU0FBVixDQUFvQixDQUFDUCxTQUFELEVBQVksZ0NBQVVRLE9BQVYsQ0FBa0JSLFNBQWxCLEVBQTZCSSxVQUF6QyxDQUFwQjtBQUZlLENBQXpCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBFcnJvck1vZGVsIH0gZnJvbSAnQGRlaXR5L2ZhbGNvbi1kYXRhJztcbmltcG9ydCB7IExpc3RJdGVtIH0gZnJvbSAnQGRlaXR5L2ZhbGNvbi11aSc7XG5pbXBvcnQgeyBFcnJvckxpc3RMYXlvdXQsIEVycm9yTGlzdExheW91dFByb3BzIH0gZnJvbSAnLi9FcnJvckxpc3RMYXlvdXQnO1xuaW1wb3J0IHsgRXJyb3IgfSBmcm9tICcuL0Vycm9yJztcblxuZXhwb3J0IHR5cGUgRXJyb3JTdW1tYXJ5UHJvcHMgPSBFcnJvckxpc3RMYXlvdXRQcm9wcyAmIHtcbiAgZXJyb3JzPzogRXJyb3JNb2RlbCB8IEVycm9yTW9kZWxbXTtcbn07XG5leHBvcnQgY29uc3QgRXJyb3JTdW1tYXJ5OiBSZWFjdC5TRkM8RXJyb3JTdW1tYXJ5UHJvcHM+ID0gKHsgZXJyb3JzLCAuLi5yZXN0IH0pID0+IHtcbiAgaWYgKCFlcnJvcnMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGVycm9ycyA9IEFycmF5LmlzQXJyYXkoZXJyb3JzKSA/IGVycm9ycyA6IFtlcnJvcnNdO1xuXG4gIHJldHVybiAoXG4gICAgPEVycm9yTGlzdExheW91dCB7Li4ucmVzdH0+XG4gICAgICB7ZXJyb3JzLm1hcChlcnJvciA9PiAoXG4gICAgICAgIDxFcnJvciBhcz17TGlzdEl0ZW19IGtleT17ZXJyb3IubWVzc2FnZX0gaW5zaWdodHM9e2Vycm9yfT5cbiAgICAgICAgICB7ZXJyb3IubWVzc2FnZX1cbiAgICAgICAgPC9FcnJvcj5cbiAgICAgICkpfVxuICAgIDwvRXJyb3JMaXN0TGF5b3V0PlxuICApO1xufTtcbmNvbnN0IGVycm9yVHlwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIG1lc3NhZ2U6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgY29kZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkXG59KS5pc1JlcXVpcmVkO1xuRXJyb3JTdW1tYXJ5LnByb3BUeXBlcyA9IHtcbiAgLy8gQHRzLWlnbm9yZSBodHRwczovL2dpdGh1Yi5jb20vRGVmaW5pdGVseVR5cGVkL0RlZmluaXRlbHlUeXBlZC9pc3N1ZXMvMzQ2OTJcbiAgZXJyb3JzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtlcnJvclR5cGUsIFByb3BUeXBlcy5hcnJheU9mKGVycm9yVHlwZSkuaXNSZXF1aXJlZF0pXG59O1xuIl19