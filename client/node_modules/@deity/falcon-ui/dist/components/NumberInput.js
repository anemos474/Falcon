import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import { themed, extractThemableProps } from '../theme';
import { Box } from './Box';
import { Icon } from './Icon'; // based on https://github.com/facebook/react/issues/10135#issuecomment-314441175

function triggerChange(element, value) {
  var valueSetter = Object.getOwnPropertyDescriptor(element, 'value').set;
  var prototype = Object.getPrototypeOf(element);
  var prototypeValueSetter = Object.getOwnPropertyDescriptor(prototype, 'value').set;

  if (valueSetter && prototypeValueSetter && valueSetter !== prototypeValueSetter) {
    prototypeValueSetter.call(element, value);
  } else if (valueSetter) {
    valueSetter.call(element, value);
  }

  element.dispatchEvent(new Event('change', {
    bubbles: true
  }));
}

var NumberInputInnerDOM = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(NumberInputInnerDOM, _React$Component);

  function NumberInputInnerDOM() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.inputRef = void 0;

    _this.onChange = function (e) {
      _this.setState({});

      if (_this.props.onChange) {
        _this.props.onChange(e);
      }
    };

    _this.mountInputRef = function (el) {
      _this.inputRef = el;

      _this.setState({});
    };

    _this.stepUp = function () {
      if (!_this.inputRef) {
        return;
      }

      var currentValue = +_this.inputRef.value;
      var nextValue = currentValue + _this.props.step;

      if (nextValue > _this.props.max) {
        nextValue = _this.props.max;
      }

      triggerChange(_this.inputRef, nextValue);
    };

    _this.stepDown = function () {
      if (!_this.inputRef) {
        return;
      }

      var currentValue = +_this.inputRef.value;
      var nextValue = currentValue - _this.props.step;

      if (nextValue < _this.props.min) {
        nextValue = _this.props.min;
      }

      triggerChange(_this.inputRef, nextValue);
    };

    return _this;
  }

  var _proto = NumberInputInnerDOM.prototype;

  _proto.canIncrease = function canIncrease() {
    if (!this.inputRef) {
      return false;
    }

    var currentValue = +this.inputRef.value;
    return currentValue < this.props.max;
  };

  _proto.canDecrease = function canDecrease() {
    if (!this.inputRef) {
      return false;
    }

    var currentValue = +this.inputRef.value;
    return currentValue > this.props.min;
  };

  _proto.render = function render() {
    var _this$props = this.props,
        className = _this$props.className,
        invalid = _this$props.invalid,
        disabled = _this$props.disabled,
        value = _this$props.value,
        min = _this$props.min,
        max = _this$props.max,
        decreaseText = _this$props.decreaseText,
        increaseText = _this$props.increaseText,
        remaining = _objectWithoutPropertiesLoose(_this$props, ["className", "invalid", "disabled", "value", "min", "max", "decreaseText", "increaseText"]);

    var _extractThemableProps = extractThemableProps(remaining),
        themableProps = _extractThemableProps.themableProps,
        rest = _extractThemableProps.rest;

    return /*#__PURE__*/React.createElement(Box, _extends({}, themableProps, {
      className: className
    }), /*#__PURE__*/React.createElement("button", {
      type: "button",
      onClick: this.stepDown,
      "aria-label": decreaseText,
      className: "-inner-input-step-down-element",
      disabled: disabled || !this.canDecrease()
    }, /*#__PURE__*/React.createElement(Icon, {
      src: "numberInputDown",
      fallback: "\u2212"
    })), /*#__PURE__*/React.createElement("input", _extends({
      ref: this.mountInputRef,
      disabled: disabled,
      min: min,
      max: max,
      value: value,
      type: "number",
      onChange: this.onChange
    }, rest)), /*#__PURE__*/React.createElement("button", {
      type: "button",
      onClick: this.stepUp,
      "aria-label": increaseText,
      className: "-inner-input-step-up-element",
      disabled: disabled || !this.canIncrease()
    }, /*#__PURE__*/React.createElement(Icon, {
      src: "numberInputUp",
      fallback: "+"
    })));
  };

  return NumberInputInnerDOM;
}(React.Component);

export var NumberInput = /*#__PURE__*/themed({
  tag: NumberInputInnerDOM,
  defaultProps: {
    invalid: false,
    min: Number.NEGATIVE_INFINITY,
    max: Number.POSITIVE_INFINITY,
    step: 1,
    increaseText: 'Increase Quantity',
    decreaseText: 'Decrease Quantity'
  },
  defaultTheme: {
    numberInput: {
      display: 'inline-flex',
      alignItems: 'center',
      height: 'lg',
      css: function css(_ref) {
        var theme = _ref.theme,
            invalid = _ref.invalid;
        return {
          input: {
            flex: 'none',
            width: theme.spacing.lg,
            height: '100%',
            appearance: 'none',
            MozAppearance: 'textfield',
            fontStyle: 'inherit',
            textAlign: 'center',
            border: theme.borders.regular,
            borderRadius: theme.borderRadius.medium,
            borderColor: invalid ? theme.colors.error : theme.colors.secondaryDark,
            boxShadow: 'none',
            '::-webkit-outer-spin-button,::-webkit-inner-spin-button': {
              appearance: 'none'
            },
            ':focus': {
              outline: 'none',
              borderColor: invalid ? theme.colors.error : theme.colors.secondary
            }
          },
          '.-inner-input-step-down-element, .-inner-input-step-up-element': {
            height: '100%',
            flex: 'none',
            width: theme.spacing.lg,
            border: 'none',
            outline: 'none',
            appearance: 'none',
            transitionProperty: 'transform, background',
            transitionTimingFunction: theme.easingFunctions.easeIn,
            transitionDuration: theme.transitionDurations.short,
            background: theme.colors.secondaryDark,
            color: theme.colors.secondaryText,
            borderRadius: theme.borderRadius.round,
            fontWeight: theme.fontWeights.bold,
            fontSize: 'inherit',
            cursor: 'pointer',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            transform: 'scale(0.8)',
            lineHeight: 1,
            ':hover': {
              background: theme.colors.secondary
            },
            ':disabled': {
              opacity: '0.5'
            }
          },
          '.-inner-input-step-down-element': {
            marginRight: theme.spacing.xs,
            ':active': {
              transform: 'scale(0.6)'
            }
          },
          '.-inner-input-step-up-element': {
            marginLeft: theme.spacing.xs,
            ':active': {
              transform: 'scale(1)'
            }
          }
        };
      }
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,