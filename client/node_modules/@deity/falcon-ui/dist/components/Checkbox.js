import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React from 'react';
import { themed } from '../theme';
import { Icon } from './Icon';

var CheckboxInnerDOM = function CheckboxInnerDOM(props) {
  var className = props.className,
      icon = props.icon,
      invalid = props.invalid,
      rest = _objectWithoutPropertiesLoose(props, ["className", "icon", "invalid"]);

  return /*#__PURE__*/React.createElement("div", {
    className: className
  }, /*#__PURE__*/React.createElement("input", _extends({}, rest, {
    type: "checkbox"
  })), /*#__PURE__*/React.createElement("div", {
    "aria-hidden": true,
    className: "-inner-checkbox-frame"
  }, icon));
};

export var Checkbox = /*#__PURE__*/themed({
  tag: CheckboxInnerDOM,
  defaultProps: {
    invalid: false,
    icon: /*#__PURE__*/React.createElement(Icon, {
      src: "checkboxCheckmarkIcon",
      className: "-inner-checkbox-icon"
      /* eslint-disable prettier/prettier */
      // disable prettier because it conflicts with jsx-wrap-multilines
      ,
      fallback: /*#__PURE__*/React.createElement("svg", {
        viewBox: "0 0 24 24",
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        className: "-inner-checkbox-icon",
        fill: "none",
        focusable: "false"
      }, /*#__PURE__*/React.createElement("polyline", {
        points: "20 6 9 17 4 12"
      }))
      /* eslint-enable prettier/prettier */

    })
  },
  defaultTheme: {
    checkbox: {
      size: 'md',
      css: function css(_ref) {
        var invalid = _ref.invalid,
            theme = _ref.theme;
        return {
          display: 'inline-flex',
          position: 'relative',
          ':focus-within': {
            outline: "1px solid " + theme.colors.focus
          },
          // checkbox input is not visible but interactive
          input: {
            position: 'absolute',
            top: 0,
            left: 0,
            margin: 0,
            width: '100%',
            height: '100%',
            opacity: 0,
            zIndex: 1,
            ':checked + .-inner-checkbox-frame': {
              background: theme.colors.primary,
              borderColor: theme.colors.primary,
              '.-inner-checkbox-icon': {
                opacity: 1
              }
            },
            ':hover + .-inner-checkbox-frame': {
              borderColor: invalid ? theme.colors.error : theme.colors.primaryLight
            },
            ':checked:hover + .-inner-checkbox-frame': {
              background: theme.colors.primaryLight
            }
          },
          '.-inner-checkbox-icon': {
            height: '100%',
            width: '100%',
            stroke: theme.colors.white,
            opacity: 0,
            transitionProperty: 'opacity',
            transitionTimingFunction: theme.easingFunctions.easeIn,
            transitionDuration: theme.transitionDurations.short
          },
          '.-inner-checkbox-frame': {
            height: '100%',
            width: '100%',
            position: 'relative',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            cursor: 'pointer',
            borderRadius: theme.borderRadius.small,
            border: theme.borders.bold,
            borderColor: invalid ? theme.colors.error : theme.colors.secondaryDark,
            transitionProperty: 'border, background',
            transitionTimingFunction: theme.easingFunctions.easeIn,
            transitionDuration: theme.transitionDurations.short
          }
        };
      }
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,