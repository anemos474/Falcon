function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import { themablePropsKeys } from './responsiveprops';
export function filterOutNonBreakpointBlockThemingProps(breakpointNames, props) {
  var result = Object.assign({}, props);
  breakpointNames.forEach(function (x) {
    delete result[x];
  });
  return result;
}
export function extractBreakpointBlockThemingProps(breakpointNames, props) {
  return breakpointNames.reduce(function (result, key) {
    var _ref;

    return Object.assign({}, result, props[key] ? (_ref = {}, _ref[key] = props[key], _ref) : {});
  }, {});
}
export function mapBreakpointBlockThemingPropsToBaseThemmingProps(breakpointNames, props) {
  var result = {}; // eslint-disable-next-line

  for (var _iterator = _createForOfIteratorHelperLoose(breakpointNames), _step; !(_step = _iterator()).done;) {
    var breakpointKey = _step.value;

    if (!props[breakpointKey]) {
      continue;
    }

    var breakpointBlock = props[breakpointKey]; // eslint-disable-next-line

    for (var breakpointBlockProp in breakpointBlock) {
      if (themablePropsKeys.indexOf(breakpointBlockProp) === -1) {
        continue;
      }

      var value = props[breakpointKey][breakpointBlockProp];

      if (!value) {
        continue;
      }

      if (!result[breakpointBlockProp]) {
        result[breakpointBlockProp] = {};
      }

      result[breakpointBlockProp][breakpointKey] = value;
    }
  }

  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90aGVtZS9mb3JtYXRCcmVha3BvaW50Q3NzQmxvY2tzLnRzIl0sIm5hbWVzIjpbInRoZW1hYmxlUHJvcHNLZXlzIiwiZmlsdGVyT3V0Tm9uQnJlYWtwb2ludEJsb2NrVGhlbWluZ1Byb3BzIiwiYnJlYWtwb2ludE5hbWVzIiwicHJvcHMiLCJyZXN1bHQiLCJmb3JFYWNoIiwieCIsImV4dHJhY3RCcmVha3BvaW50QmxvY2tUaGVtaW5nUHJvcHMiLCJyZWR1Y2UiLCJrZXkiLCJtYXBCcmVha3BvaW50QmxvY2tUaGVtaW5nUHJvcHNUb0Jhc2VUaGVtbWluZ1Byb3BzIiwiYnJlYWtwb2ludEtleSIsImJyZWFrcG9pbnRCbG9jayIsImJyZWFrcG9pbnRCbG9ja1Byb3AiLCJpbmRleE9mIiwidmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLFNBQVNBLGlCQUFULFFBQWtDLG1CQUFsQztBQUdBLE9BQU8sU0FBU0MsdUNBQVQsQ0FDTEMsZUFESyxFQUVMQyxLQUZLLEVBR2E7QUFDbEIsTUFBTUMsTUFBTSxxQkFBUUQsS0FBUixDQUFaO0FBRUFELEVBQUFBLGVBQWUsQ0FBQ0csT0FBaEIsQ0FBd0IsVUFBQUMsQ0FBQyxFQUFJO0FBQzNCLFdBQU9GLE1BQU0sQ0FBQ0UsQ0FBRCxDQUFiO0FBQ0QsR0FGRDtBQUlBLFNBQU9GLE1BQVA7QUFDRDtBQUVELE9BQU8sU0FBU0csa0NBQVQsQ0FDTEwsZUFESyxFQUVMQyxLQUZLLEVBR3dCO0FBQzdCLFNBQU9ELGVBQWUsQ0FBQ00sTUFBaEIsQ0FDTCxVQUFDSixNQUFELEVBQVNLLEdBQVQ7QUFBQTs7QUFBQSw2QkFDS0wsTUFETCxFQUVNRCxLQUFLLENBQUNNLEdBQUQsQ0FBTCxvQkFBZ0JBLEdBQWhCLElBQXNCTixLQUFLLENBQUNNLEdBQUQsQ0FBM0IsVUFBcUMsRUFGM0M7QUFBQSxHQURLLEVBS0wsRUFMSyxDQUFQO0FBT0Q7QUFFRCxPQUFPLFNBQVNDLGlEQUFULENBQ0xSLGVBREssRUFFTEMsS0FGSyxFQUdhO0FBQ2xCLE1BQU1DLE1BQXdCLEdBQUcsRUFBakMsQ0FEa0IsQ0FFbEI7O0FBQ0EsdURBQTRCRixlQUE1Qix3Q0FBNkM7QUFBQSxRQUFsQ1MsYUFBa0M7O0FBQzNDLFFBQUksQ0FBQ1IsS0FBSyxDQUFDUSxhQUFELENBQVYsRUFBMkI7QUFDekI7QUFDRDs7QUFFRCxRQUFNQyxlQUFlLEdBQUdULEtBQUssQ0FBQ1EsYUFBRCxDQUE3QixDQUwyQyxDQU0zQzs7QUFDQSxTQUFLLElBQU1FLG1CQUFYLElBQWtDRCxlQUFsQyxFQUFtRDtBQUNqRCxVQUFJWixpQkFBaUIsQ0FBQ2MsT0FBbEIsQ0FBMEJELG1CQUExQixNQUFtRCxDQUFDLENBQXhELEVBQTJEO0FBQ3pEO0FBQ0Q7O0FBRUQsVUFBTUUsS0FBSyxHQUFHWixLQUFLLENBQUNRLGFBQUQsQ0FBTCxDQUFxQkUsbUJBQXJCLENBQWQ7O0FBQ0EsVUFBSSxDQUFDRSxLQUFMLEVBQVk7QUFDVjtBQUNEOztBQUVELFVBQUksQ0FBQ1gsTUFBTSxDQUFDUyxtQkFBRCxDQUFYLEVBQWtDO0FBQ2hDVCxRQUFBQSxNQUFNLENBQUNTLG1CQUFELENBQU4sR0FBOEIsRUFBOUI7QUFDRDs7QUFDRFQsTUFBQUEsTUFBTSxDQUFDUyxtQkFBRCxDQUFOLENBQTRCRixhQUE1QixJQUE2Q0ksS0FBN0M7QUFDRDtBQUNGOztBQUVELFNBQU9YLE1BQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRoZW1hYmxlUHJvcHNLZXlzIH0gZnJvbSAnLi9yZXNwb25zaXZlcHJvcHMnO1xuaW1wb3J0IHsgVGhlbWluZ1Byb3BzLCBCYXNlVGhlbWluZ1Byb3BzLCBCcmVha3BvaW50QmxvY2tUaGVtaW5nUHJvcHMgfSBmcm9tICcuL2luZGV4JztcblxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlck91dE5vbkJyZWFrcG9pbnRCbG9ja1RoZW1pbmdQcm9wczxUUHJvcHM+KFxuICBicmVha3BvaW50TmFtZXM6IHN0cmluZ1tdLFxuICBwcm9wczogVGhlbWluZ1Byb3BzPFRQcm9wcz5cbik6IEJhc2VUaGVtaW5nUHJvcHMge1xuICBjb25zdCByZXN1bHQgPSB7IC4uLnByb3BzIH07XG5cbiAgYnJlYWtwb2ludE5hbWVzLmZvckVhY2goeCA9PiB7XG4gICAgZGVsZXRlIHJlc3VsdFt4XTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RCcmVha3BvaW50QmxvY2tUaGVtaW5nUHJvcHM8VFByb3BzPihcbiAgYnJlYWtwb2ludE5hbWVzOiBzdHJpbmdbXSxcbiAgcHJvcHM6IFRoZW1pbmdQcm9wczxUUHJvcHM+XG4pOiBCcmVha3BvaW50QmxvY2tUaGVtaW5nUHJvcHMge1xuICByZXR1cm4gYnJlYWtwb2ludE5hbWVzLnJlZHVjZShcbiAgICAocmVzdWx0LCBrZXkpID0+ICh7XG4gICAgICAuLi5yZXN1bHQsXG4gICAgICAuLi4ocHJvcHNba2V5XSA/IHsgW2tleV06IHByb3BzW2tleV0gfSA6IHt9KVxuICAgIH0pLFxuICAgIHt9XG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXBCcmVha3BvaW50QmxvY2tUaGVtaW5nUHJvcHNUb0Jhc2VUaGVtbWluZ1Byb3BzKFxuICBicmVha3BvaW50TmFtZXM6IHN0cmluZ1tdLFxuICBwcm9wczogQnJlYWtwb2ludEJsb2NrVGhlbWluZ1Byb3BzXG4pOiBCYXNlVGhlbWluZ1Byb3BzIHtcbiAgY29uc3QgcmVzdWx0OiBCYXNlVGhlbWluZ1Byb3BzID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBmb3IgKGNvbnN0IGJyZWFrcG9pbnRLZXkgb2YgYnJlYWtwb2ludE5hbWVzKSB7XG4gICAgaWYgKCFwcm9wc1ticmVha3BvaW50S2V5XSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgY29uc3QgYnJlYWtwb2ludEJsb2NrID0gcHJvcHNbYnJlYWtwb2ludEtleV07XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgZm9yIChjb25zdCBicmVha3BvaW50QmxvY2tQcm9wIGluIGJyZWFrcG9pbnRCbG9jaykge1xuICAgICAgaWYgKHRoZW1hYmxlUHJvcHNLZXlzLmluZGV4T2YoYnJlYWtwb2ludEJsb2NrUHJvcCkgPT09IC0xKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB2YWx1ZSA9IHByb3BzW2JyZWFrcG9pbnRLZXldW2JyZWFrcG9pbnRCbG9ja1Byb3BdO1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFyZXN1bHRbYnJlYWtwb2ludEJsb2NrUHJvcF0pIHtcbiAgICAgICAgcmVzdWx0W2JyZWFrcG9pbnRCbG9ja1Byb3BdID0ge307XG4gICAgICB9XG4gICAgICByZXN1bHRbYnJlYWtwb2ludEJsb2NrUHJvcF1bYnJlYWtwb2ludEtleV0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuIl19