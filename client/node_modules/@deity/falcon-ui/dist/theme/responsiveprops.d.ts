import CSS from 'csstype';
import { Theme, CSSObject } from '.';
export declare type ResponsivePropMapping = {
    cssProp?: keyof CSS.Properties;
    themeProp?: keyof Theme;
    transformToCss?: (value: number | string) => CSSObject;
};
export declare const mappings: {
    m: {
        cssProp: "margin";
        themeProp: "spacing";
    };
    mt: {
        cssProp: "marginTop";
        themeProp: "spacing";
    };
    ml: {
        cssProp: "marginLeft";
        themeProp: "spacing";
    };
    mr: {
        cssProp: "marginRight";
        themeProp: "spacing";
    };
    mb: {
        cssProp: "marginBottom";
        themeProp: "spacing";
    };
    mx: {
        themeProp: "spacing";
        transformToCss: (value: string | number) => {
            marginLeft: string | number;
            marginRight: string | number;
        };
    };
    my: {
        themeProp: "spacing";
        transformToCss: (value: string | number) => {
            marginTop: string | number;
            marginBottom: string | number;
        };
    };
    p: {
        cssProp: "padding";
        themeProp: "spacing";
    };
    pt: {
        cssProp: "paddingTop";
        themeProp: "spacing";
    };
    pl: {
        cssProp: "paddingLeft";
        themeProp: "spacing";
    };
    pr: {
        cssProp: "paddingRight";
        themeProp: "spacing";
    };
    pb: {
        cssProp: "paddingBottom";
        themeProp: "spacing";
    };
    px: {
        themeProp: "spacing";
        transformToCss: (value: string | number) => {
            paddingLeft: string | number;
            paddingRight: string | number;
        };
    };
    py: {
        themeProp: "spacing";
        transformToCss: (value: string | number) => {
            paddingTop: string | number;
            paddingBottom: string | number;
        };
    };
    height: {
        themeProp: "sizes";
    };
    minHeight: {
        themeProp: "sizes";
    };
    maxHeight: {
        themeProp: "sizes";
    };
    width: {
        themeProp: "sizes";
    };
    minWidth: {
        themeProp: "sizes";
    };
    maxWidth: {
        themeProp: "sizes";
    };
    size: {
        themeProp: "sizes";
        transformToCss: (value: string | number) => {
            height: string | number;
            width: string | number;
        };
    };
    minSize: {
        themeProp: "sizes";
        transformToCss: (value: string | number) => {
            minHeight: string | number;
            minWidth: string | number;
        };
    };
    maxSize: {
        themeProp: "sizes";
        transformToCss: (value: string | number) => {
            maxHeight: string | number;
            maxWidth: string | number;
        };
    };
    gridGap: {
        themeProp: "spacing";
    };
    gridRowGap: {
        themeProp: "spacing";
    };
    gridColumnGap: {
        themeProp: "spacing";
    };
    color: {
        cssProp: "color";
        themeProp: "colors";
    };
    bg: {
        cssProp: "backgroundColor";
        themeProp: "colors";
    };
    fill: {
        themeProp: "colors";
    };
    stroke: {
        themeProp: "colors";
    };
    borderColor: {
        themeProp: "colors";
    };
    bgFullWidth: {
        themeProp: "colors";
        transformToCss: (value: string | number) => {
            position: "relative";
            zIndex: number;
            ':before': {
                content: string;
                width: string;
                height: string;
                background: string | number;
                position: "absolute";
                left: string;
                right: string;
                top: number;
                zIndex: number;
            };
        };
    };
    fontSize: {
        themeProp: "fontSizes";
    };
    fontFamily: {
        themeProp: "fonts";
    };
    lineHeight: {
        themeProp: "lineHeights";
    };
    fontWeight: {
        themeProp: "fontWeights";
    };
    letterSpacing: {
        themeProp: "letterSpacings";
    };
    border: {
        themeProp: "borders";
    };
    borderTop: {
        themeProp: "borders";
    };
    borderRight: {
        themeProp: "borders";
    };
    borderBottom: {
        themeProp: "borders";
    };
    borderLeft: {
        themeProp: "borders";
    };
    borderRadius: {
        themeProp: "borderRadius";
    };
    boxShadow: {
        themeProp: "boxShadows";
    };
    position: {};
    transitionTimingFunction: {
        themeProp: "easingFunctions";
    };
    transitionDuration: {
        themeProp: "transitionDurations";
    };
    opacity: {
        themeProp: "opacities";
    };
    textDecoration: {
        themeProp: "textDecorations";
    };
    top: {};
    right: {};
    bottom: {};
    left: {};
    display: {};
    visibility: {};
    alignItems: {};
    justifyContent: {};
    flexWrap: {};
    flexDirection: {};
    flex: {};
    alignContent: {};
    justifySelf: {};
    justifyItems: {};
    textAlign: {};
    alignSelf: {};
    order: {};
    flexBasis: {};
    gridColumn: {};
    gridRow: {};
    gridAutoFlow: {};
    gridAutoRows: {};
    gridAutoColumns: {};
    gridTemplateRows: {};
    gridTemplateColumns: {};
    gridTemplateAreas: {};
    gridArea: {};
    gridTemplate: {};
    overflow: {};
    overflowX: {};
    overflowY: {};
    cursor: {};
};
export declare const themablePropsKeys: string[];
export declare type PropsMappings = typeof mappings;
export declare const propsMappingKeys: ("alignContent" | "alignItems" | "alignSelf" | "bottom" | "boxShadow" | "color" | "cursor" | "display" | "flexBasis" | "flexDirection" | "flexWrap" | "fontFamily" | "fontSize" | "fontWeight" | "gridAutoColumns" | "gridAutoFlow" | "gridAutoRows" | "gridTemplateAreas" | "gridTemplateColumns" | "gridTemplateRows" | "height" | "justifyContent" | "justifyItems" | "justifySelf" | "left" | "letterSpacing" | "lineHeight" | "maxHeight" | "maxWidth" | "minHeight" | "minWidth" | "opacity" | "order" | "overflow" | "overflowX" | "overflowY" | "position" | "right" | "textAlign" | "top" | "transitionDuration" | "transitionTimingFunction" | "visibility" | "width" | "border" | "borderBottom" | "borderColor" | "borderLeft" | "borderRadius" | "borderRight" | "borderTop" | "flex" | "gridArea" | "gridColumn" | "gridRow" | "gridTemplate" | "textDecoration" | "gridColumnGap" | "gridGap" | "gridRowGap" | "fill" | "stroke" | "m" | "mt" | "ml" | "mr" | "mb" | "mx" | "my" | "p" | "pt" | "pl" | "pr" | "pb" | "px" | "py" | "size" | "minSize" | "maxSize" | "bg" | "bgFullWidth")[];
//# sourceMappingURL=responsiveprops.d.ts.map