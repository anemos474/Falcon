import { themablePropsKeys } from './responsiveprops';
import { ThemingProps, BaseThemingProps, BreakpointBlockThemingProps } from './index';

export function filterOutNonBreakpointBlockThemingProps<TProps>(
  breakpointNames: string[],
  props: ThemingProps<TProps>
): BaseThemingProps {
  const result = { ...props };

  breakpointNames.forEach(x => {
    delete result[x];
  });

  return result;
}

export function extractBreakpointBlockThemingProps<TProps>(
  breakpointNames: string[],
  props: ThemingProps<TProps>
): BreakpointBlockThemingProps {
  return breakpointNames.reduce(
    (result, key) => ({
      ...result,
      ...(props[key] ? { [key]: props[key] } : {})
    }),
    {}
  );
}

export function mapBreakpointBlockThemingPropsToBaseThemmingProps(
  breakpointNames: string[],
  props: BreakpointBlockThemingProps
): BaseThemingProps {
  const result: BaseThemingProps = {};
  // eslint-disable-next-line
  for (const breakpointKey of breakpointNames) {
    if (!props[breakpointKey]) {
      continue;
    }

    const breakpointBlock = props[breakpointKey];
    // eslint-disable-next-line
    for (const breakpointBlockProp in breakpointBlock) {
      if (themablePropsKeys.indexOf(breakpointBlockProp) === -1) {
        continue;
      }

      const value = props[breakpointKey][breakpointBlockProp];
      if (!value) {
        continue;
      }

      if (!result[breakpointBlockProp]) {
        result[breakpointBlockProp] = {};
      }
      result[breakpointBlockProp][breakpointKey] = value;
    }
  }

  return result;
}
