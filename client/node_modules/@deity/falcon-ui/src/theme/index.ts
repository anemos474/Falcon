import CSS from 'csstype';
import { Keyframes } from '@emotion/serialize';
import { baseTheme } from './baseTheme';
import { PropsMappings } from './responsiveprops';
import { mapNegativeSpacings, mergeThemes, RecursivePartial } from './utils';

// export themed component factory
export * from './themed';
export * from './utils';
export * from './responsiveprops';
export * from './formatBreakpointCssBlocks';

export function createTheme(themeOverride: RecursivePartial<Theme> = {}): Theme {
  const mergedThemes = mergeThemes(baseTheme, themeOverride);
  return mapNegativeSpacings(mergedThemes);
}

// --- exported type definitions for theme  ----
export interface Theme {
  colors: ThemeColors;
  breakpoints: Readonly<ThemeBreakpoints>;
  spacing: Readonly<ThemeSpacing>;
  sizes: Readonly<ThemeSizes>;
  fonts: ThemeFonts;
  fontSizes: Readonly<ThemeFontSizes>;
  fontWeights: ThemeFontWeights;
  lineHeights: Readonly<ThemeLineHeights>;
  letterSpacings: Readonly<ThemeLetterSpacings>;
  borders: ThemeBorders;
  borderRadius: Readonly<ThemeBorderRadius>;
  boxShadows: ThemeBoxShadows;
  easingFunctions: ThemeEasingFunctions;
  transitionDurations: ThemeTransitionDurations;
  keyframes: ThemeKeyframes;
  zIndex: ThemeZIndex;
  opacities: Readonly<ThemeOpacities>;
  textDecorations: ThemeTextDecorations;
  components: ThemeComponents;
  icons: ThemeIcons;
}

type ThemedPropMapping = {
  themeProp: keyof Theme;
};

type CssProps = CSS.PropertiesFallback<number | string>;

type ResponsivePropMapping = {
  cssProp: keyof CssProps;
};

type CSSPseudoObject = {
  [key in CSS.SimplePseudos]?: CSSObject;
};
type CssOtherProps = undefined | number | string | CSSObject;
type CSSOthersObject = {
  [propertiesName: string]: CssOtherProps | CssOtherProps[];
};

// TODO: fix this type as is wrongly defined, responsive props should be filtered by `PropsMappings`
type CssResponsiveProps = {
  [key in keyof CssProps]?: { [Breakpoint in keyof ThemeBreakpoints]?: CssProps[key] } | CssProps[key];
};

export interface CSSObject extends CssResponsiveProps, CSSPseudoObject, CSSOthersObject {}

export type PropsWithTheme<TProps, TTheme extends Theme = Theme> = TProps & { theme: TTheme };

type ThemePropMap<TProp extends keyof PropsMappings> = PropsMappings[TProp] extends ThemedPropMapping
  ? Extract<keyof Theme[PropsMappings[TProp]['themeProp']], string>
  : PropsMappings[TProp] extends ResponsivePropMapping
  ? CssProps[PropsMappings[TProp]['cssProp']]
  : TProp extends keyof CssProps
  ? CssProps[TProp]
  : string | number;

export type BaseThemingProps = {
  [TProp in keyof PropsMappings]?:
    | ThemePropMap<TProp>
    | { [TBreakpoint in keyof ThemeBreakpoints]?: ThemePropMap<TProp> };
};

export type BreakpointBlockThemingProps = {
  [TProp in keyof ThemeBreakpoints]?: { [TProp in keyof PropsMappings]?: ThemePropMap<TProp> };
};

export type InlineCss<TProps> = ((props: PropsWithTheme<TProps>) => CSSObject) | CSSObject;

export type DefaultTheme<TProps = any> = /* ComponentTheme<TProps> | */ { [name: string]: ComponentTheme<TProps> };
export type PropsWithDefaultTheme<TProps> = {
  defaultTheme?: DefaultTheme<TProps>;
};

/** old `ThemedComponentProps` */
export type ThemingProps<TProps = any> = BaseThemingProps &
  BreakpointBlockThemingProps & {
    // as: Tag
    defaultTheme?: DefaultTheme<TProps>;
    variant?: string;
    css?: InlineCss<TProps>;
  };

export type PropsWithThemingProps<TProps> = TProps & ThemingProps<TProps>;

type ComponentThemeVariant<TProps> = BaseThemingProps & BreakpointBlockThemingProps & { css?: InlineCss<TProps> };
export type ComponentTheme<TProps> = ComponentThemeVariant<TProps> & {
  variants?: { [variantKey: string]: ComponentThemeVariant<TProps> };
};

export interface ThemeComponents {
  [key: string]: ComponentTheme<{}>;
}

export type ThemeIcons = {
  [name: string]: {
    icon: React.ComponentType | ((props: any) => JSX.Element);
  } & ThemingProps<any>;
};

type Colors = typeof baseTheme.colors;
export interface ThemeColors extends Colors {}

type Breakpoints = Record<keyof typeof baseTheme.breakpoints, number | string>;
export interface ThemeBreakpoints extends Breakpoints {}

type Spacing = Record<keyof typeof baseTheme.spacing, number | string>;
export interface ThemeSpacing extends Spacing {}

type Sizes = Record<keyof typeof baseTheme.sizes, number | string>;
export interface ThemeSizes extends Sizes {}

type Fonts = typeof baseTheme.fonts;
export interface ThemeFonts extends Fonts {}

type FontSizes = Record<keyof typeof baseTheme.fontSizes, number | string>;
export interface ThemeFontSizes extends FontSizes {}

type FontWeights = typeof baseTheme.fontWeights;
export interface ThemeFontWeights extends FontWeights {}

type LineHeights = Record<keyof typeof baseTheme.lineHeights, number | string>;
export interface ThemeLineHeights extends LineHeights {}

type LetterSpacings = Record<keyof typeof baseTheme.letterSpacings, number | string>;
export interface ThemeLetterSpacings extends LetterSpacings {}

type Borders = typeof baseTheme.borders;
export interface ThemeBorders extends Borders {}

type BorderRadius = Record<keyof typeof baseTheme.borderRadius, number | string>;
export interface ThemeBorderRadius extends BorderRadius {}

type BoxShadows = typeof baseTheme.boxShadows;
export interface ThemeBoxShadows extends BoxShadows {}

type EasingFunctions = typeof baseTheme.easingFunctions;
export interface ThemeEasingFunctions extends EasingFunctions {}

type TransitionDurations = typeof baseTheme.transitionDurations;
export interface ThemeTransitionDurations extends TransitionDurations {}

type Opacities = Record<keyof typeof baseTheme.opacities, number>;
export interface ThemeOpacities extends Opacities {}

type TextDecorations = typeof baseTheme.textDecorations;
export interface ThemeTextDecorations extends TextDecorations {}

export interface ThemeKeyframes {
  [key: string]: CSSObject | Keyframes;
}

type ZIndex = typeof baseTheme.zIndex;
export interface ThemeZIndex extends ZIndex {}
