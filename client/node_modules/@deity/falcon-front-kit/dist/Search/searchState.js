"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.searchStateFromURL = searchStateFromURL;
exports.searchStateToURL = searchStateToURL;

var _qs = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("qs"));

var _falconShopData = /*#__PURE__*/require("@deity/falcon-shop-data");

function searchStateFromURL(url) {
  var parts = _qs.default.parse(url.replace('?', ''));

  var searchState = {};

  if (parts.q) {
    searchState.term = parts.q;
  }

  if (parts.p) {
    searchState.pagination = {
      page: parseInt(parts.p, 10),
      perPage: parseInt(parts.pp, 10)
    };
  }

  if (parts.sort) {
    var _split = parts.sort.split(':'),
        field = _split[0],
        direction = _split[1];

    searchState.sort = {
      field: field,
      direction: direction
    };
  }

  if (parts.filters) {
    var names = Object.keys(parts.filters);
    searchState.filters = [];

    for (var i = 0; i < names.length; i++) {
      var _names$i$split = names[i].split(':'),
          _field = _names$i$split[0],
          operator = _names$i$split[1];

      searchState.filters.push({
        field: _field,
        operator: operator || _falconShopData.FilterOperator.equals,
        value: parts.filters[names[i]].split(',')
      });
    }
  }

  return searchState;
}

function searchStateToURL(state) {
  var term = state.term,
      filters = state.filters,
      sort = state.sort,
      pagination = state.pagination;
  var parts = {};

  if (filters) {
    parts.filters = {};

    for (var i = 0; i < filters.length; i++) {
      var filter = filters[i];
      var name = filter.operator === _falconShopData.FilterOperator.equals ? filter.field : filter.field + ":" + filter.operator;
      parts.filters[name] = filter.value.join(',');
    }
  }

  if (sort && sort.field && sort.direction) {
    parts.sort = sort.field + ":" + sort.direction;
  }

  if (pagination) {
    if (pagination.perPage) {
      parts.pp = pagination.perPage.toString();
    }

    if (pagination.page && pagination.page > 1) {
      parts.p = pagination.page.toString();
    }
  }

  if (term) {
    parts.q = term; // eslint-disable-line id-length
  }

  return _qs.default.stringify(parts, {
    encode: false
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9TZWFyY2gvc2VhcmNoU3RhdGUudHMiXSwibmFtZXMiOlsic2VhcmNoU3RhdGVGcm9tVVJMIiwidXJsIiwicGFydHMiLCJxcyIsInBhcnNlIiwicmVwbGFjZSIsInNlYXJjaFN0YXRlIiwicSIsInRlcm0iLCJwIiwicGFnaW5hdGlvbiIsInBhZ2UiLCJwYXJzZUludCIsInBlclBhZ2UiLCJwcCIsInNvcnQiLCJzcGxpdCIsImZpZWxkIiwiZGlyZWN0aW9uIiwiZmlsdGVycyIsIm5hbWVzIiwiT2JqZWN0Iiwia2V5cyIsImkiLCJsZW5ndGgiLCJvcGVyYXRvciIsInB1c2giLCJGaWx0ZXJPcGVyYXRvciIsImVxdWFscyIsInZhbHVlIiwic2VhcmNoU3RhdGVUb1VSTCIsInN0YXRlIiwiZmlsdGVyIiwibmFtZSIsImpvaW4iLCJ0b1N0cmluZyIsInN0cmluZ2lmeSIsImVuY29kZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFVTyxTQUFTQSxrQkFBVCxDQUE0QkMsR0FBNUIsRUFBK0Q7QUFDcEUsTUFBTUMsS0FBSyxHQUFHQyxZQUFHQyxLQUFILENBQVNILEdBQUcsQ0FBQ0ksT0FBSixDQUFZLEdBQVosRUFBaUIsRUFBakIsQ0FBVCxDQUFkOztBQUNBLE1BQU1DLFdBQWlDLEdBQUcsRUFBMUM7O0FBRUEsTUFBSUosS0FBSyxDQUFDSyxDQUFWLEVBQWE7QUFDWEQsSUFBQUEsV0FBVyxDQUFDRSxJQUFaLEdBQW1CTixLQUFLLENBQUNLLENBQXpCO0FBQ0Q7O0FBRUQsTUFBSUwsS0FBSyxDQUFDTyxDQUFWLEVBQWE7QUFDWEgsSUFBQUEsV0FBVyxDQUFDSSxVQUFaLEdBQXlCO0FBQ3ZCQyxNQUFBQSxJQUFJLEVBQUVDLFFBQVEsQ0FBQ1YsS0FBSyxDQUFDTyxDQUFQLEVBQW9CLEVBQXBCLENBRFM7QUFFdkJJLE1BQUFBLE9BQU8sRUFBRUQsUUFBUSxDQUFDVixLQUFLLENBQUNZLEVBQVAsRUFBcUIsRUFBckI7QUFGTSxLQUF6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UUFBSXpCLFVBQVUsQ0FBQ0MsSUFBWCxJQUFtQkQsVUFBVSxDQUFDQyxJQUFYLEdBQWtCLENBQXpDLEVBQTRDO0FBQzFDVCxNQUFBQSxLQUFLLENBQUNPLENBQU4sR0FBVUMsVUFBVSxDQUFDQyxJQUFYLENBQWdCd0IsUUFBaEIsRUFBVjtBQUNEO0FBQ0Y7O0FBRUQsTUFBSTNCLElBQUosRUFBVTtBQUNSTixJQUFBQSxLQUFLLENBQUNLLENBQU4sR0FBVUMsSUFBVixDQURRLENBQ1E7QUFDakI7O0FBRUQsU0FBT0wsWUFBR2lDLFNBQUgsQ0FBYWxDLEtBQWIsRUFBb0I7QUFBRW1DLElBQUFBLE1BQU0sRUFBRTtBQUFWLEdBQXBCLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBxcyBmcm9tICdxcyc7XG5pbXBvcnQgeyBTb3J0T3JkZXJWYWx1ZSwgUGFnaW5hdGlvbklucHV0LCBTb3J0T3JkZXJEaXJlY3Rpb24gfSBmcm9tICdAZGVpdHkvZmFsY29uLWRhdGEnO1xuaW1wb3J0IHsgRmlsdGVyT3BlcmF0b3IgfSBmcm9tICdAZGVpdHkvZmFsY29uLXNob3AtZGF0YSc7XG5pbXBvcnQgeyBGaWx0ZXJJbnB1dCB9IGZyb20gJ0BkZWl0eS9mYWxjb24tc2hvcC1leHRlbnNpb24nO1xuXG5leHBvcnQgdHlwZSBTZWFyY2hTdGF0ZSA9IHtcbiAgdGVybT86IHN0cmluZztcbiAgZmlsdGVyczogRmlsdGVySW5wdXRbXTtcbiAgc29ydD86IFNvcnRPcmRlclZhbHVlO1xuICBwYWdpbmF0aW9uPzogUGFnaW5hdGlvbklucHV0O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNlYXJjaFN0YXRlRnJvbVVSTCh1cmw6IHN0cmluZyk6IFBhcnRpYWw8U2VhcmNoU3RhdGU+IHtcbiAgY29uc3QgcGFydHMgPSBxcy5wYXJzZSh1cmwucmVwbGFjZSgnPycsICcnKSk7XG4gIGNvbnN0IHNlYXJjaFN0YXRlOiBQYXJ0aWFsPFNlYXJjaFN0YXRlPiA9IHt9O1xuXG4gIGlmIChwYXJ0cy5xKSB7XG4gICAgc2VhcmNoU3RhdGUudGVybSA9IHBhcnRzLnEgYXMgc3RyaW5nO1xuICB9XG5cbiAgaWYgKHBhcnRzLnApIHtcbiAgICBzZWFyY2hTdGF0ZS5wYWdpbmF0aW9uID0ge1xuICAgICAgcGFnZTogcGFyc2VJbnQocGFydHMucCBhcyBzdHJpbmcsIDEwKSxcbiAgICAgIHBlclBhZ2U6IHBhcnNlSW50KHBhcnRzLnBwIGFzIHN0cmluZywgMTApXG4gICAgfTtcbiAgfVxuXG4gIGlmIChwYXJ0cy5zb3J0KSB7XG4gICAgY29uc3QgW2ZpZWxkLCBkaXJlY3Rpb25dID0gKHBhcnRzLnNvcnQgYXMgc3RyaW5nKS5zcGxpdCgnOicpO1xuICAgIHNlYXJjaFN0YXRlLnNvcnQgPSB7XG4gICAgICBmaWVsZCxcbiAgICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uIGFzIFNvcnRPcmRlckRpcmVjdGlvblxuICAgIH07XG4gIH1cblxuICBpZiAocGFydHMuZmlsdGVycykge1xuICAgIGNvbnN0IG5hbWVzID0gT2JqZWN0LmtleXMocGFydHMuZmlsdGVycyk7XG4gICAgc2VhcmNoU3RhdGUuZmlsdGVycyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IFtmaWVsZCwgb3BlcmF0b3JdID0gbmFtZXNbaV0uc3BsaXQoJzonKTtcbiAgICAgIHNlYXJjaFN0YXRlLmZpbHRlcnMucHVzaCh7XG4gICAgICAgIGZpZWxkLFxuICAgICAgICBvcGVyYXRvcjogKG9wZXJhdG9yIGFzIEZpbHRlck9wZXJhdG9yKSB8fCBGaWx0ZXJPcGVyYXRvci5lcXVhbHMsXG4gICAgICAgIHZhbHVlOiBwYXJ0cy5maWx0ZXJzW25hbWVzW2ldXS5zcGxpdCgnLCcpXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2VhcmNoU3RhdGU7XG59XG5cbmV4cG9ydCB0eXBlIFVybFBhcnRzID0ge1xuICAvLyBzZWFyY2ggcXVlcnlcbiAgcT86IHN0cmluZztcbiAgLy8gc2VhcmNoIGZpbHRlcnMgLSBrZXkvdmFsdWUgbWFwXG4gIGZpbHRlcnM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xuICAvLyBjdXJyZW50IHBhZ2VcbiAgcD86IHN0cmluZztcbiAgLy8gaXRlbXMgcGVyIHBhZ2VcbiAgcHA/OiBzdHJpbmc7XG4gIC8vIHNvcnQgb3JkZXJcbiAgc29ydD86IHN0cmluZztcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWFyY2hTdGF0ZVRvVVJMKHN0YXRlOiBQYXJ0aWFsPFNlYXJjaFN0YXRlPik6IHN0cmluZyB7XG4gIGNvbnN0IHsgdGVybSwgZmlsdGVycywgc29ydCwgcGFnaW5hdGlvbiB9ID0gc3RhdGU7XG5cbiAgY29uc3QgcGFydHM6IFVybFBhcnRzID0ge307XG5cbiAgaWYgKGZpbHRlcnMpIHtcbiAgICBwYXJ0cy5maWx0ZXJzID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWx0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBmaWx0ZXIgPSBmaWx0ZXJzW2ldO1xuICAgICAgY29uc3QgbmFtZSA9IGZpbHRlci5vcGVyYXRvciA9PT0gRmlsdGVyT3BlcmF0b3IuZXF1YWxzID8gZmlsdGVyLmZpZWxkIDogYCR7ZmlsdGVyLmZpZWxkfToke2ZpbHRlci5vcGVyYXRvcn1gO1xuICAgICAgcGFydHMuZmlsdGVyc1tuYW1lXSA9IGZpbHRlci52YWx1ZS5qb2luKCcsJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHNvcnQgJiYgc29ydC5maWVsZCAmJiBzb3J0LmRpcmVjdGlvbikge1xuICAgIHBhcnRzLnNvcnQgPSBgJHtzb3J0LmZpZWxkfToke3NvcnQuZGlyZWN0aW9ufWA7XG4gIH1cblxuICBpZiAocGFnaW5hdGlvbikge1xuICAgIGlmIChwYWdpbmF0aW9uLnBlclBhZ2UpIHtcbiAgICAgIHBhcnRzLnBwID0gcGFnaW5hdGlvbi5wZXJQYWdlLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmIChwYWdpbmF0aW9uLnBhZ2UgJiYgcGFnaW5hdGlvbi5wYWdlID4gMSkge1xuICAgICAgcGFydHMucCA9IHBhZ2luYXRpb24ucGFnZS50b1N0cmluZygpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0ZXJtKSB7XG4gICAgcGFydHMucSA9IHRlcm07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgaWQtbGVuZ3RoXG4gIH1cblxuICByZXR1cm4gcXMuc3RyaW5naWZ5KHBhcnRzLCB7IGVuY29kZTogZmFsc2UgfSk7XG59XG4iXX0=