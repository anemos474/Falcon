import React from 'react';
import { RouteComponentProps } from 'react-router-dom';
import { Location } from 'history';
import { SortOrderValue, PaginationInput } from '@deity/falcon-data';
import { FilterOperator } from '@deity/falcon-shop-data';
import { SearchState, searchStateFromURL, searchStateToURL } from './searchState';
declare type SearchProviderInnerProps = SearchProviderProps & RouteComponentProps & {
    sortOrders: (SortOrderValue | undefined)[];
    defaultSortOrder?: SortOrderValue;
};
export declare class SearchProviderInner extends React.Component<SearchProviderInnerProps, SearchState> {
    static defaultProps: {
        searchStateFromURL: typeof searchStateFromURL;
        searchStateToURL: typeof searchStateToURL;
        filters: any[];
    };
    constructor(props: SearchProviderInnerProps);
    componentDidMount(): void;
    componentWillUnmount(): void;
    get defaultSortOrder(): SortOrderValue | undefined;
    getStateFromURL(location: Location): SearchState;
    setFilter: (field: string, value: string[], operator?: FilterOperator) => void;
    setPaginationToFirstPage: () => {
        page: number;
        perPage: number;
    };
    setSortOrder: (sort?: SortOrderValue) => void;
    setPagination: (pagination: PaginationInput) => void;
    setTerm: (term: string) => void;
    sortOrderExists: (sort?: SortOrderValue) => boolean;
    removeFilters: () => void;
    stateToSerialize: (state: SearchState) => Partial<SearchState>;
    private restoreStateFromURL;
    private historyUnlisten;
    private updateURL;
    render(): JSX.Element;
}
export declare type SearchProviderProps = {
    searchStateFromURL?(url: string): Partial<SearchState>;
    searchStateToURL?(state: Partial<SearchState>): string;
};
export declare const SearchProvider: React.ComponentClass<Pick<SearchProviderProps & RouteComponentProps<{}, import("react-router").StaticContext, {}>, keyof SearchProviderProps>, any> & import("react-router").WithRouterStatics<React.SFC<SearchProviderProps & RouteComponentProps<{}, import("react-router").StaticContext, {}>>>;
export {};
//# sourceMappingURL=SearchProvider.d.ts.map