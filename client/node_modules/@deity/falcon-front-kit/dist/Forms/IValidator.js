"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.isI18nValidationError = isI18nValidationError;
exports.fieldValidator = exports.getErrorI18nId = void 0;

var _objectWithoutPropertiesLoose2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _string = /*#__PURE__*/require("./string");

function isI18nValidationError(error) {
  return typeof error === 'object' && error.errorI18nId !== undefined;
}

var getErrorI18nId = function getErrorI18nId(error, name, formI18nId) {
  if (formI18nId) {
    return [formI18nId + "." + name + "Field" + (0, _string.capitalize)(error), "formError." + error];
  }

  return "formError." + error;
};

exports.getErrorI18nId = getErrorI18nId;

var fieldValidator = function fieldValidator(validators, _ref) {
  if (validators === void 0) {
    validators = [];
  }

  var name = _ref.name,
      label = _ref.label,
      formI18nId = _ref.formI18nId,
      t = _ref.t;
  return function (value) {
    for (var i = 0; i < validators.length; i++) {
      var result = validators[i]({
        name: name,
        label: label,
        value: value,
        formI18nId: formI18nId,
        t: t
      });

      if (isI18nValidationError(result)) {
        var _error = result.errorI18nId,
            errorProps = (0, _objectWithoutPropertiesLoose2.default)(result, ["errorI18nId"]);
        return t(getErrorI18nId(_error, name, formI18nId), Object.assign({
          name: name,
          value: value
        }, errorProps, {
          label: label || (0, _string.capitalize)(name)
        }));
      }

      if (result !== undefined) {
        return result;
      }
    }

    return undefined;
  };
};

exports.fieldValidator = fieldValidator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Gb3Jtcy9JVmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbImlzSTE4blZhbGlkYXRpb25FcnJvciIsImVycm9yIiwiZXJyb3JJMThuSWQiLCJ1bmRlZmluZWQiLCJnZXRFcnJvckkxOG5JZCIsIm5hbWUiLCJmb3JtSTE4bklkIiwiZmllbGRWYWxpZGF0b3IiLCJ2YWxpZGF0b3JzIiwibGFiZWwiLCJ0IiwidmFsdWUiLCJpIiwibGVuZ3RoIiwicmVzdWx0IiwiZXJyb3JQcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUVBOztBQWtCTyxTQUFTQSxxQkFBVCxDQUErQkMsS0FBL0IsRUFBcUY7QUFDMUYsU0FBTyxPQUFPQSxLQUFQLEtBQWlCLFFBQWpCLElBQThCQSxLQUFELENBQStCQyxXQUEvQixLQUErQ0MsU0FBbkY7QUFDRDs7QUFFTSxJQUFNQyxjQUF1RixHQUFHLFNBQTFGQSxjQUEwRixDQUNyR0gsS0FEcUcsRUFFckdJLElBRnFHLEVBR3JHQyxVQUhxRyxFQUlsRztBQUNILE1BQUlBLFVBQUosRUFBZ0I7QUFDZCxXQUFPLENBQUlBLFVBQUosU0FBa0JELElBQWxCLGFBQThCLHdCQUFXSixLQUFYLENBQTlCLGlCQUFnRUEsS0FBaEUsQ0FBUDtBQUNEOztBQUVELHdCQUFvQkEsS0FBcEI7QUFDRCxDQVZNOzs7O0FBZUEsSUFBTU0sY0FBK0IsR0FBRyxTQUFsQ0EsY0FBa0MsQ0FBQ0MsVUFBRDtBQUFBLE1BQUNBLFVBQUQ7QUFBQ0EsSUFBQUEsVUFBRCxHQUFjLEVBQWQ7QUFBQTs7QUFBQSxNQUFvQkgsSUFBcEIsUUFBb0JBLElBQXBCO0FBQUEsTUFBMEJJLEtBQTFCLFFBQTBCQSxLQUExQjtBQUFBLE1BQWlDSCxVQUFqQyxRQUFpQ0EsVUFBakM7QUFBQSxNQUE2Q0ksQ0FBN0MsUUFBNkNBLENBQTdDO0FBQUEsU0FBcUQsVUFBQUMsS0FBSyxFQUFJO0FBQzNHLFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0osVUFBVSxDQUFDSyxNQUEvQixFQUF1Q0QsQ0FBQyxFQUF4QyxFQUE0QztBQUMxQyxVQUFNRSxNQUFNLEdBQUdOLFVBQVUsQ0FBQ0ksQ0FBRCxDQUFWLENBQWM7QUFBRVAsUUFBQUEsSUFBSSxFQUFKQSxJQUFGO0FBQVFJLFFBQUFBLEtBQUssRUFBTEEsS0FBUjtBQUFlRSxRQUFBQSxLQUFLLEVBQUxBLEtBQWY7QUFBc0JMLFFBQUFBLFVBQVUsRUFBVkEsVUFBdEI7QUFBa0NJLFFBQUFBLENBQUMsRUFBREE7QUFBbEMsT0FBZCxDQUFmOztBQUVBLFVBQUlWLHFCQUFxQixDQUFDYyxNQUFELENBQXpCLEVBQW1DO0FBQ2pDLFlBQXFCYixNQUFyQixHQUE4Q2EsTUFBOUMsQ0FBUVosV0FBUjtBQUFBLFlBQStCYSxVQUEvQiwrQ0FBOENELE1BQTlDO0FBRUEsZUFBT0osQ0FBQyxDQUFTTixjQUFjLENBQUNILE1BQUQsRUFBUUksSUFBUixFQUFjQyxVQUFkLENBQXZCO0FBQ05ELFVBQUFBLElBQUksRUFBSkEsSUFETTtBQUVOTSxVQUFBQSxLQUFLLEVBQUxBO0FBRk0sV0FHSEksVUFIRztBQUlOTixVQUFBQSxLQUFLLEVBQUVBLEtBQUssSUFBSSx3QkFBV0osSUFBWDtBQUpWLFdBQVI7QUFNRDs7QUFFRCxVQUFJUyxNQUFNLEtBQUtYLFNBQWYsRUFBMEI7QUFDeEIsZUFBT1csTUFBUDtBQUNEO0FBQ0Y7O0FBRUQsV0FBT1gsU0FBUDtBQUNELEdBckI4QztBQUFBLENBQXhDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmllbGRDb25maWcgfSBmcm9tICdmb3JtaWsnO1xuaW1wb3J0IHsgVHJhbnNsYXRpb25GdW5jdGlvbiB9IGZyb20gJ0BkZWl0eS9mYWxjb24taTE4bic7XG5pbXBvcnQgeyBjYXBpdGFsaXplIH0gZnJvbSAnLi9zdHJpbmcnO1xuXG5leHBvcnQgdHlwZSBWYWxpZGF0b3JQcm9wcyA9IHtcbiAgbmFtZTogc3RyaW5nO1xuICBsYWJlbD86IHN0cmluZztcbiAgdmFsdWU/OiBhbnk7XG4gIGZvcm1JMThuSWQ/OiBzdHJpbmc7XG4gIHQ6IFRyYW5zbGF0aW9uRnVuY3Rpb247XG59O1xuZXhwb3J0IGludGVyZmFjZSBJVmFsaWRhdG9yIHtcbiAgKHByb3BzOiBWYWxpZGF0b3JQcm9wcyk6IFZhbGlkYXRpb25FcnJvcjtcbn1cblxuZXhwb3J0IHR5cGUgVmFsaWRhdGlvbkVycm9yID0gdW5kZWZpbmVkIHwgc3RyaW5nIHwgSTE4blZhbGlkYXRpb25FcnJvcjtcbmV4cG9ydCB0eXBlIEkxOG5WYWxpZGF0aW9uRXJyb3IgPSB7XG4gIGVycm9ySTE4bklkOiBzdHJpbmc7XG59ICYgeyBba2V5IGluIHN0cmluZ106IGFueSB9O1xuXG5leHBvcnQgZnVuY3Rpb24gaXNJMThuVmFsaWRhdGlvbkVycm9yKGVycm9yOiBWYWxpZGF0aW9uRXJyb3IpOiBlcnJvciBpcyBJMThuVmFsaWRhdGlvbkVycm9yIHtcbiAgcmV0dXJuIHR5cGVvZiBlcnJvciA9PT0gJ29iamVjdCcgJiYgKGVycm9yIGFzIEkxOG5WYWxpZGF0aW9uRXJyb3IpLmVycm9ySTE4bklkICE9PSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBjb25zdCBnZXRFcnJvckkxOG5JZDogKGVycm9yOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgZm9ybUkxOG5JZD86IHN0cmluZykgPT4gc3RyaW5nIHwgc3RyaW5nW10gPSAoXG4gIGVycm9yLFxuICBuYW1lLFxuICBmb3JtSTE4bklkXG4pID0+IHtcbiAgaWYgKGZvcm1JMThuSWQpIHtcbiAgICByZXR1cm4gW2Ake2Zvcm1JMThuSWR9LiR7bmFtZX1GaWVsZCR7Y2FwaXRhbGl6ZShlcnJvcil9YCwgYGZvcm1FcnJvci4ke2Vycm9yfWBdO1xuICB9XG5cbiAgcmV0dXJuIGBmb3JtRXJyb3IuJHtlcnJvcn1gO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBJRmllbGRWYWxpZGF0b3Ige1xuICAodmFsaWRhdG9yczogSVZhbGlkYXRvcltdLCB2YWxpZGF0b3JQcm9wczogT21pdDxWYWxpZGF0b3JQcm9wcywgJ3ZhbHVlJz4pOiBGaWVsZENvbmZpZ1sndmFsaWRhdGUnXTtcbn1cbmV4cG9ydCBjb25zdCBmaWVsZFZhbGlkYXRvcjogSUZpZWxkVmFsaWRhdG9yID0gKHZhbGlkYXRvcnMgPSBbXSwgeyBuYW1lLCBsYWJlbCwgZm9ybUkxOG5JZCwgdCB9KSA9PiB2YWx1ZSA9PiB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsaWRhdG9ycy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRvcnNbaV0oeyBuYW1lLCBsYWJlbCwgdmFsdWUsIGZvcm1JMThuSWQsIHQgfSk7XG5cbiAgICBpZiAoaXNJMThuVmFsaWRhdGlvbkVycm9yKHJlc3VsdCkpIHtcbiAgICAgIGNvbnN0IHsgZXJyb3JJMThuSWQ6IGVycm9yLCAuLi5lcnJvclByb3BzIH0gPSByZXN1bHQ7XG5cbiAgICAgIHJldHVybiB0PHN0cmluZz4oZ2V0RXJyb3JJMThuSWQoZXJyb3IsIG5hbWUsIGZvcm1JMThuSWQpLCB7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICAuLi5lcnJvclByb3BzLFxuICAgICAgICBsYWJlbDogbGFiZWwgfHwgY2FwaXRhbGl6ZShuYW1lKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuIl19