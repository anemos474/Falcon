"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.findRouteElement = void 0;

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _reactRouterDom = /*#__PURE__*/require("react-router-dom");

var findRouteElement = function findRouteElement(children, location, type) {
  var element;
  var match; // We use React.Children.forEach instead of React.Children.toArray().find()
  // here because toArray adds keys to all child elements and we do not want
  // to trigger an unmount/remount for two <Route>s that render the same
  // component at different URLs.

  _react.default.Children.forEach(children, function (child) {
    if (match == null && /*#__PURE__*/_react.default.isValidElement(child)) {
      var path = child.props.path || child.props.from;

      if (path) {
        match = (0, _reactRouterDom.matchPath)(location.pathname, Object.assign({}, child.props, {
          path: path
        }));
      } else {
        // eslint-disable-next-line
        if (child.props.type && type) {
          match = (0, _reactRouterDom.matchPath)(type, Object.assign({}, child.props, {
            path: child.props.type
          }));
        }
      } // eslint-disable-next-line


      element = child;
    }
  });

  return [match, element];
};

exports.findRouteElement = findRouteElement;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9EeW5hbWljUm91dGUvZmluZFJvdXRlRWxlbWVudC50cyJdLCJuYW1lcyI6WyJmaW5kUm91dGVFbGVtZW50IiwiY2hpbGRyZW4iLCJsb2NhdGlvbiIsInR5cGUiLCJlbGVtZW50IiwibWF0Y2giLCJSZWFjdCIsIkNoaWxkcmVuIiwiZm9yRWFjaCIsImNoaWxkIiwiaXNWYWxpZEVsZW1lbnQiLCJwYXRoIiwicHJvcHMiLCJmcm9tIiwicGF0aG5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFHTyxJQUFNQSxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CLENBQzlCQyxRQUQ4QixFQUU5QkMsUUFGOEIsRUFHOUJDLElBSDhCLEVBSU07QUFDcEMsTUFBSUMsT0FBSjtBQUNBLE1BQUlDLEtBQUosQ0FGb0MsQ0FJcEM7QUFDQTtBQUNBO0FBQ0E7O0FBQ0FDLGlCQUFNQyxRQUFOLENBQWVDLE9BQWYsQ0FBdUJQLFFBQXZCLEVBQWlDLFVBQUFRLEtBQUssRUFBSTtBQUN4QyxRQUFJSixLQUFLLElBQUksSUFBVCxpQkFBaUJDLGVBQU1JLGNBQU4sQ0FBcUJELEtBQXJCLENBQXJCLEVBQWtEO0FBQ2hELFVBQU1FLElBQUksR0FBR0YsS0FBSyxDQUFDRyxLQUFOLENBQVlELElBQVosSUFBb0JGLEtBQUssQ0FBQ0csS0FBTixDQUFZQyxJQUE3Qzs7QUFDQSxVQUFJRixJQUFKLEVBQVU7QUFDUk4sUUFBQUEsS0FBSyxHQUFHLCtCQUFVSCxRQUFRLENBQUNZLFFBQW5CLG9CQUFrQ0wsS0FBSyxDQUFDRyxLQUF4QztBQUErQ0QsVUFBQUEsSUFBSSxFQUFKQTtBQUEvQyxXQUFSO0FBQ0QsT0FGRCxNQUVPO0FBQ0w7QUFDQSxZQUFJRixLQUFLLENBQUNHLEtBQU4sQ0FBWVQsSUFBWixJQUFvQkEsSUFBeEIsRUFBOEI7QUFDNUJFLFVBQUFBLEtBQUssR0FBRywrQkFBVUYsSUFBVixvQkFBcUJNLEtBQUssQ0FBQ0csS0FBM0I7QUFBa0NELFlBQUFBLElBQUksRUFBRUYsS0FBSyxDQUFDRyxLQUFOLENBQVlUO0FBQXBELGFBQVI7QUFDRDtBQUNGLE9BVCtDLENBV2hEOzs7QUFDQUMsTUFBQUEsT0FBTyxHQUFHSyxLQUFWO0FBQ0Q7QUFDRixHQWZEOztBQWlCQSxTQUFPLENBQUNKLEtBQUQsRUFBUUQsT0FBUixDQUFQO0FBQ0QsQ0E5Qk0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgbWF0Y2hQYXRoLCBtYXRjaCBhcyBNYXRjaCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgTG9jYXRpb24gfSBmcm9tICdoaXN0b3J5JztcblxuZXhwb3J0IGNvbnN0IGZpbmRSb3V0ZUVsZW1lbnQgPSAoXG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUsXG4gIGxvY2F0aW9uOiBMb2NhdGlvbixcbiAgdHlwZT86IHN0cmluZ1xuKTogW01hdGNoIHwgbnVsbCwgUmVhY3QuUmVhY3ROb2RlXSA9PiB7XG4gIGxldCBlbGVtZW50OiBSZWFjdC5SZWFjdE5vZGU7XG4gIGxldCBtYXRjaDogTWF0Y2g8YW55PiB8IG51bGw7XG5cbiAgLy8gV2UgdXNlIFJlYWN0LkNoaWxkcmVuLmZvckVhY2ggaW5zdGVhZCBvZiBSZWFjdC5DaGlsZHJlbi50b0FycmF5KCkuZmluZCgpXG4gIC8vIGhlcmUgYmVjYXVzZSB0b0FycmF5IGFkZHMga2V5cyB0byBhbGwgY2hpbGQgZWxlbWVudHMgYW5kIHdlIGRvIG5vdCB3YW50XG4gIC8vIHRvIHRyaWdnZXIgYW4gdW5tb3VudC9yZW1vdW50IGZvciB0d28gPFJvdXRlPnMgdGhhdCByZW5kZXIgdGhlIHNhbWVcbiAgLy8gY29tcG9uZW50IGF0IGRpZmZlcmVudCBVUkxzLlxuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBjaGlsZCA9PiB7XG4gICAgaWYgKG1hdGNoID09IG51bGwgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICBjb25zdCBwYXRoID0gY2hpbGQucHJvcHMucGF0aCB8fCBjaGlsZC5wcm9wcy5mcm9tO1xuICAgICAgaWYgKHBhdGgpIHtcbiAgICAgICAgbWF0Y2ggPSBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIHsgLi4uY2hpbGQucHJvcHMsIHBhdGggfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgaWYgKGNoaWxkLnByb3BzLnR5cGUgJiYgdHlwZSkge1xuICAgICAgICAgIG1hdGNoID0gbWF0Y2hQYXRoKHR5cGUsIHsgLi4uY2hpbGQucHJvcHMsIHBhdGg6IGNoaWxkLnByb3BzLnR5cGUgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBlbGVtZW50ID0gY2hpbGQ7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gW21hdGNoLCBlbGVtZW50XTtcbn07XG4iXX0=