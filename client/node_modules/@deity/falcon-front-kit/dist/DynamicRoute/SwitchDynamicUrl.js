"use strict";

var _interopRequireWildcard = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports.SwitchDynamicURL = void 0;

var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));

var _reactRouterDom = /*#__PURE__*/require("react-router-dom");

var _falconData = /*#__PURE__*/require("@deity/falcon-data");

var _findRouteElement3 = /*#__PURE__*/require("./findRouteElement");

var _isResourceMetaRequired = /*#__PURE__*/require("./isResourceMetaRequired");

var RouteElementRenderer = /*#__PURE__*/_react.default.memo(function (_ref) {
  var element = _ref.element,
      location = _ref.location,
      match = _ref.match,
      _ref$additionalParams = _ref.additionalParams,
      additionalParams = _ref$additionalParams === void 0 ? {} : _ref$additionalParams;

  if (!match) {
    return null;
  }

  match.params = Object.assign({}, match.params, additionalParams);
  return /*#__PURE__*/_react.default.cloneElement(element, {
    location: location,
    computedMatch: match
  });
});

function getUrlType(urlResult) {
  // eslint-disable-next-line no-underscore-dangle
  return urlResult.__typename === 'ResourceMeta' ? urlResult.type : 'redirect';
}
/**
 * `react-router` `Switch` component which is able to handle dynamically resolved components.
 * It works with `Url` query.
 * @example
 * <SwitchDynamicURL>
    <Route exact path="/" component={Home} />
    <Route exact type="shop-product" component={Product} />
    <p>not Found</p>
  </SwitchDynamicURL>
 * @param {SwitchDynamicURLProps} props
 */


var SwitchDynamicURL = function SwitchDynamicURL(props) {
  var contextMatch = (0, _reactRouterDom.useRouteMatch)();
  var contextLocation = (0, _reactRouterDom.useLocation)();
  var location = props.location || contextLocation;

  var _useState = (0, _react.useState)(location),
      previousLocation = _useState[0],
      setPreviousLocation = _useState[1];

  var _useState2 = (0, _react.useState)(undefined),
      previousResourceMeta = _useState2[0],
      setPreviousResourceMeta = _useState2[1];

  if ((0, _isResourceMetaRequired.isResourceMetaRequired)(props.children, location) === false) {
    if (location !== previousLocation) {
      setPreviousLocation(location);
    }

    var _findRouteElement = (0, _findRouteElement3.findRouteElement)(props.children, location),
        match = _findRouteElement[0],
        element = _findRouteElement[1];

    return /*#__PURE__*/_react.default.createElement(RouteElementRenderer, {
      element: element,
      location: location,
      match: match || contextMatch
    });
  }

  return /*#__PURE__*/_react.default.createElement(_falconData.UrlQuery, {
    variables: {
      path: location.pathname + location.search
    },
    passLoading: true,
    onCompleted: function onCompleted(result) {
      if (result) setPreviousResourceMeta(result.url);
    }
  }, function (_ref2) {
    var data = _ref2.data,
        error = _ref2.error,
        loading = _ref2.loading;

    if (loading) {
      var _ref3 = previousLocation ? (0, _findRouteElement3.findRouteElement)(props.children, previousLocation, previousResourceMeta && getUrlType(previousResourceMeta)) : [undefined, undefined],
          previousMatch = _ref3[0],
          previousElement = _ref3[1];

      if (previousMatch) {
        return /*#__PURE__*/_react.default.createElement(RouteElementRenderer, {
          element: previousElement,
          location: previousLocation,
          match: previousMatch,
          additionalParams: previousResourceMeta
        });
      } // looks like this is unreachable code actually


      return /*#__PURE__*/_react.default.createElement(_falconData.Loader, {
        variant: "overlay"
      });
    }

    if (error) {
      return /*#__PURE__*/_react.default.createElement(_falconData.OperationError, error);
    }

    if (loading === false && data && previousLocation !== location) {
      setPreviousLocation(location);
    }

    var _findRouteElement2 = (0, _findRouteElement3.findRouteElement)(props.children, location, (data == null ? void 0 : data.url) && getUrlType(data.url)),
        match = _findRouteElement2[0],
        element = _findRouteElement2[1];

    return /*#__PURE__*/_react.default.createElement(RouteElementRenderer, {
      element: element,
      location: location,
      match: match || contextMatch,
      additionalParams: data.url
    });
  });
};

exports.SwitchDynamicURL = SwitchDynamicURL;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,