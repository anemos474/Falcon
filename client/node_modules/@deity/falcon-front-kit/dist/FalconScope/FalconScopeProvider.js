"use strict";

var _interopRequireWildcard = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports.FalconScope = exports.useFalconScope = exports.FalconScopeProvider = void 0;

var _url = /*#__PURE__*/require("url");

var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));

var _reactCookie = /*#__PURE__*/require("react-cookie");

var _React = /*#__PURE__*/require("../React");

var _GeoLocation = /*#__PURE__*/require("../GeoLocation");

var _FalconScopeContext = /*#__PURE__*/require("./FalconScopeContext");

var FalconScopeProvider = function FalconScopeProvider(props) {
  var available = props.available,
      currentId = props.currentId,
      defaultId = props.defaultId,
      basename = props.pathBasename,
      set = props.set,
      children = props.children;
  var isMounted = (0, _React.useMounted)();

  var _useCookies = (0, _reactCookie.useCookies)(),
      allCookies = _useCookies[0],
      setCookie = _useCookies[1],
      removeCookie = _useCookies[2];

  var getById = function getById(id) {
    return available.find(function (x) {
      return x.id === id;
    });
  };

  var _useState = (0, _react.useState)(getById(currentId)),
      current = _useState[0],
      setCurrent = _useState[1];

  var _useState2 = (0, _react.useState)(basename),
      pathBasename = _useState2[0],
      setPathBasename = _useState2[1];

  var geoLocation = (0, _GeoLocation.useGeoLocation)();

  var setNewScope = function setNewScope(id) {
    var newFalconScope = available.find(function (x) {
      return x.id === id;
    });

    if (newFalconScope === undefined || current.id === id) {
      return;
    }

    var location = (0, _url.parse)(window.location.href);
    set(id, {
      scopes: available,
      defaultId: defaultId
    }, {
      cookies: {
        all: allCookies,
        remove: removeCookie,
        set: setCookie
      },
      url: location,
      geoLocation: geoLocation
    });

    if (isMounted.current) {
      setCurrent(getById(id));
    }
  };

  return /*#__PURE__*/_react.default.createElement(_FalconScopeContext.FalconScopeContext.Provider, {
    value: {
      available: available,
      current: current,
      default: getById(defaultId),
      pathBasename: pathBasename,
      set: setNewScope
    }
  }, children);
};

exports.FalconScopeProvider = FalconScopeProvider;

var useFalconScope = function useFalconScope() {
  return (0, _react.useContext)(_FalconScopeContext.FalconScopeContext);
};

exports.useFalconScope = useFalconScope;

var FalconScope = function FalconScope(_ref) {
  var children = _ref.children;
  return children(Object.assign({}, useFalconScope()));
};

exports.FalconScope = FalconScope;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9GYWxjb25TY29wZS9GYWxjb25TY29wZVByb3ZpZGVyLnRzeCJdLCJuYW1lcyI6WyJGYWxjb25TY29wZVByb3ZpZGVyIiwicHJvcHMiLCJhdmFpbGFibGUiLCJjdXJyZW50SWQiLCJkZWZhdWx0SWQiLCJiYXNlbmFtZSIsInBhdGhCYXNlbmFtZSIsInNldCIsImNoaWxkcmVuIiwiaXNNb3VudGVkIiwiYWxsQ29va2llcyIsInNldENvb2tpZSIsInJlbW92ZUNvb2tpZSIsImdldEJ5SWQiLCJpZCIsImZpbmQiLCJ4IiwiY3VycmVudCIsInNldEN1cnJlbnQiLCJzZXRQYXRoQmFzZW5hbWUiLCJnZW9Mb2NhdGlvbiIsInNldE5ld1Njb3BlIiwibmV3RmFsY29uU2NvcGUiLCJ1bmRlZmluZWQiLCJsb2NhdGlvbiIsIndpbmRvdyIsImhyZWYiLCJzY29wZXMiLCJjb29raWVzIiwiYWxsIiwicmVtb3ZlIiwidXJsIiwiZGVmYXVsdCIsInVzZUZhbGNvblNjb3BlIiwiRmFsY29uU2NvcGVDb250ZXh0IiwiRmFsY29uU2NvcGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFXTyxJQUFNQSxtQkFBdUQsR0FBRyxTQUExREEsbUJBQTBELENBQUFDLEtBQUssRUFBSTtBQUM5RSxNQUFRQyxTQUFSLEdBQW1GRCxLQUFuRixDQUFRQyxTQUFSO0FBQUEsTUFBbUJDLFNBQW5CLEdBQW1GRixLQUFuRixDQUFtQkUsU0FBbkI7QUFBQSxNQUE4QkMsU0FBOUIsR0FBbUZILEtBQW5GLENBQThCRyxTQUE5QjtBQUFBLE1BQXVEQyxRQUF2RCxHQUFtRkosS0FBbkYsQ0FBeUNLLFlBQXpDO0FBQUEsTUFBaUVDLEdBQWpFLEdBQW1GTixLQUFuRixDQUFpRU0sR0FBakU7QUFBQSxNQUFzRUMsUUFBdEUsR0FBbUZQLEtBQW5GLENBQXNFTyxRQUF0RTtBQUNBLE1BQU1DLFNBQVMsR0FBRyx3QkFBbEI7O0FBQ0Esb0JBQThDLDhCQUE5QztBQUFBLE1BQU9DLFVBQVA7QUFBQSxNQUFtQkMsU0FBbkI7QUFBQSxNQUE4QkMsWUFBOUI7O0FBRUEsTUFBTUMsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBQUMsRUFBRTtBQUFBLFdBQUlaLFNBQVMsQ0FBQ2EsSUFBVixDQUFlLFVBQUFDLENBQUM7QUFBQSxhQUFJQSxDQUFDLENBQUNGLEVBQUYsS0FBU0EsRUFBYjtBQUFBLEtBQWhCLENBQUo7QUFBQSxHQUFsQjs7QUFFQSxrQkFBOEIscUJBQVNELE9BQU8sQ0FBQ1YsU0FBRCxDQUFoQixDQUE5QjtBQUFBLE1BQU9jLE9BQVA7QUFBQSxNQUFnQkMsVUFBaEI7O0FBQ0EsbUJBQXdDLHFCQUFTYixRQUFULENBQXhDO0FBQUEsTUFBT0MsWUFBUDtBQUFBLE1BQXFCYSxlQUFyQjs7QUFDQSxNQUFNQyxXQUFXLEdBQUcsa0NBQXBCOztBQUVBLE1BQU1DLFdBQVcsR0FBRyxTQUFkQSxXQUFjLENBQUFQLEVBQUUsRUFBSTtBQUN4QixRQUFNUSxjQUFjLEdBQUdwQixTQUFTLENBQUNhLElBQVYsQ0FBZSxVQUFBQyxDQUFDO0FBQUEsYUFBSUEsQ0FBQyxDQUFDRixFQUFGLEtBQVNBLEVBQWI7QUFBQSxLQUFoQixDQUF2Qjs7QUFDQSxRQUFJUSxjQUFjLEtBQUtDLFNBQW5CLElBQWdDTixPQUFPLENBQUNILEVBQVIsS0FBZUEsRUFBbkQsRUFBdUQ7QUFDckQ7QUFDRDs7QUFFRCxRQUFNVSxRQUFRLEdBQUcsZ0JBQU1DLE1BQU0sQ0FBQ0QsUUFBUCxDQUFnQkUsSUFBdEIsQ0FBakI7QUFDQW5CLElBQUFBLEdBQUcsQ0FDRE8sRUFEQyxFQUVEO0FBQUVhLE1BQUFBLE1BQU0sRUFBRXpCLFNBQVY7QUFBcUJFLE1BQUFBLFNBQVMsRUFBVEE7QUFBckIsS0FGQyxFQUdEO0FBQUV3QixNQUFBQSxPQUFPLEVBQUU7QUFBRUMsUUFBQUEsR0FBRyxFQUFFbkIsVUFBUDtBQUFtQm9CLFFBQUFBLE1BQU0sRUFBRWxCLFlBQTNCO0FBQXlDTCxRQUFBQSxHQUFHLEVBQUVJO0FBQTlDLE9BQVg7QUFBc0VvQixNQUFBQSxHQUFHLEVBQUVQLFFBQTNFO0FBQXFGSixNQUFBQSxXQUFXLEVBQVhBO0FBQXJGLEtBSEMsQ0FBSDs7QUFLQSxRQUFJWCxTQUFTLENBQUNRLE9BQWQsRUFBdUI7QUFDckJDLE1BQUFBLFVBQVUsQ0FBQ0wsT0FBTyxDQUFDQyxFQUFELENBQVIsQ0FBVjtBQUNEO0FBQ0YsR0FmRDs7QUFpQkEsc0JBQ0UsNkJBQUMsc0NBQUQsQ0FBb0IsUUFBcEI7QUFDRSxJQUFBLEtBQUssRUFBRTtBQUNMWixNQUFBQSxTQUFTLEVBQVRBLFNBREs7QUFFTGUsTUFBQUEsT0FBTyxFQUFQQSxPQUZLO0FBR0xlLE1BQUFBLE9BQU8sRUFBRW5CLE9BQU8sQ0FBQ1QsU0FBRCxDQUhYO0FBSUxFLE1BQUFBLFlBQVksRUFBWkEsWUFKSztBQUtMQyxNQUFBQSxHQUFHLEVBQUVjO0FBTEE7QUFEVCxLQVNHYixRQVRILENBREY7QUFhRCxDQXpDTTs7OztBQTJDQSxJQUFNeUIsY0FBYyxHQUFHLFNBQWpCQSxjQUFpQjtBQUFBLFNBQThCLHVCQUFXQyxzQ0FBWCxDQUE5QjtBQUFBLENBQXZCOzs7O0FBT0EsSUFBTUMsV0FBdUMsR0FBRyxTQUExQ0EsV0FBMEM7QUFBQSxNQUFHM0IsUUFBSCxRQUFHQSxRQUFIO0FBQUEsU0FBa0JBLFFBQVEsbUJBQU15QixjQUFjLEVBQXBCLEVBQTFCO0FBQUEsQ0FBaEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZSB9IGZyb20gJ3VybCc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VDb29raWVzIH0gZnJvbSAncmVhY3QtY29va2llJztcbmltcG9ydCB7IEZhbGNvblNjb3BlIGFzIEZhbGNvblNjb3BlRGF0YSB9IGZyb20gJ0BkZWl0eS9mYWxjb24tZGF0YSc7XG5pbXBvcnQgeyB1c2VNb3VudGVkIH0gZnJvbSAnLi4vUmVhY3QnO1xuaW1wb3J0IHsgdXNlR2VvTG9jYXRpb24gfSBmcm9tICcuLi9HZW9Mb2NhdGlvbic7XG5pbXBvcnQgeyBGYWxjb25TY29wZUNvbnRleHQsIEZhbGNvblNjb3BlQ29udGV4dFR5cGUgfSBmcm9tICcuL0ZhbGNvblNjb3BlQ29udGV4dCc7XG5pbXBvcnQgeyBHZXRGYWxjb25DbGllbnRTY29wZUNvbmZpZywgU2V0RmFsY29uQ2xpZW50U2NvcGVDb25maWcgfSBmcm9tICcuL0ZhbGNvbkNsaWVudFNjb3BlQ29uZmlnJztcblxuZXhwb3J0IHR5cGUgRmFsY29uU2NvcGVQcm92aWRlclByb3BzID0ge1xuICBjdXJyZW50SWQ6IHN0cmluZztcbiAgYXZhaWxhYmxlOiBGYWxjb25TY29wZURhdGFbXTtcbiAgZGVmYXVsdElkOiBzdHJpbmc7XG4gIHBhdGhCYXNlbmFtZT86IHN0cmluZztcbiAgZ2V0OiBHZXRGYWxjb25DbGllbnRTY29wZUNvbmZpZztcbiAgc2V0PzogU2V0RmFsY29uQ2xpZW50U2NvcGVDb25maWc7XG59O1xuZXhwb3J0IGNvbnN0IEZhbGNvblNjb3BlUHJvdmlkZXI6IFJlYWN0LkZDPEZhbGNvblNjb3BlUHJvdmlkZXJQcm9wcz4gPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHsgYXZhaWxhYmxlLCBjdXJyZW50SWQsIGRlZmF1bHRJZCwgcGF0aEJhc2VuYW1lOiBiYXNlbmFtZSwgc2V0LCBjaGlsZHJlbiB9ID0gcHJvcHM7XG4gIGNvbnN0IGlzTW91bnRlZCA9IHVzZU1vdW50ZWQoKTtcbiAgY29uc3QgW2FsbENvb2tpZXMsIHNldENvb2tpZSwgcmVtb3ZlQ29va2llXSA9IHVzZUNvb2tpZXMoKTtcblxuICBjb25zdCBnZXRCeUlkID0gaWQgPT4gYXZhaWxhYmxlLmZpbmQoeCA9PiB4LmlkID09PSBpZCk7XG5cbiAgY29uc3QgW2N1cnJlbnQsIHNldEN1cnJlbnRdID0gdXNlU3RhdGUoZ2V0QnlJZChjdXJyZW50SWQpKTtcbiAgY29uc3QgW3BhdGhCYXNlbmFtZSwgc2V0UGF0aEJhc2VuYW1lXSA9IHVzZVN0YXRlKGJhc2VuYW1lKTtcbiAgY29uc3QgZ2VvTG9jYXRpb24gPSB1c2VHZW9Mb2NhdGlvbigpO1xuXG4gIGNvbnN0IHNldE5ld1Njb3BlID0gaWQgPT4ge1xuICAgIGNvbnN0IG5ld0ZhbGNvblNjb3BlID0gYXZhaWxhYmxlLmZpbmQoeCA9PiB4LmlkID09PSBpZCk7XG4gICAgaWYgKG5ld0ZhbGNvblNjb3BlID09PSB1bmRlZmluZWQgfHwgY3VycmVudC5pZCA9PT0gaWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBsb2NhdGlvbiA9IHBhcnNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICBzZXQoXG4gICAgICBpZCxcbiAgICAgIHsgc2NvcGVzOiBhdmFpbGFibGUsIGRlZmF1bHRJZCB9LFxuICAgICAgeyBjb29raWVzOiB7IGFsbDogYWxsQ29va2llcywgcmVtb3ZlOiByZW1vdmVDb29raWUsIHNldDogc2V0Q29va2llIH0sIHVybDogbG9jYXRpb24sIGdlb0xvY2F0aW9uIH1cbiAgICApO1xuICAgIGlmIChpc01vdW50ZWQuY3VycmVudCkge1xuICAgICAgc2V0Q3VycmVudChnZXRCeUlkKGlkKSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPEZhbGNvblNjb3BlQ29udGV4dC5Qcm92aWRlclxuICAgICAgdmFsdWU9e3tcbiAgICAgICAgYXZhaWxhYmxlLFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICBkZWZhdWx0OiBnZXRCeUlkKGRlZmF1bHRJZCksXG4gICAgICAgIHBhdGhCYXNlbmFtZSxcbiAgICAgICAgc2V0OiBzZXROZXdTY29wZVxuICAgICAgfX1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9GYWxjb25TY29wZUNvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlRmFsY29uU2NvcGUgPSAoKTogRmFsY29uU2NvcGVDb250ZXh0VHlwZSA9PiB1c2VDb250ZXh0KEZhbGNvblNjb3BlQ29udGV4dCk7XG5cbmV4cG9ydCB0eXBlIEZhbGNvblNjb3BlUmVuZGVyUHJvcHMgPSBGYWxjb25TY29wZUNvbnRleHRUeXBlO1xuZXhwb3J0IHR5cGUgRmFsY29uU2NvcGVQcm9wcyA9IHtcbiAgY2hpbGRyZW46IChwcm9wczogRmFsY29uU2NvcGVSZW5kZXJQcm9wcykgPT4gYW55O1xufTtcblxuZXhwb3J0IGNvbnN0IEZhbGNvblNjb3BlOiBSZWFjdC5GQzxGYWxjb25TY29wZVByb3BzPiA9ICh7IGNoaWxkcmVuIH0pID0+IGNoaWxkcmVuKHsgLi4udXNlRmFsY29uU2NvcGUoKSB9KTtcbiJdfQ==