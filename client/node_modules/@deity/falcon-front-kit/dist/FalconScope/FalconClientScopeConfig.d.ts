/// <reference types="node" />
import { UrlWithStringQuery } from 'url';
import { Cookies, useCookies } from 'react-cookie';
import { FalconScope, GeoLocation } from '@deity/falcon-data';
import { FalconScopeConfig } from './FalconScopeConfig';
/** @see import { useCookie } from 'react-cookie' */
export declare type CookiesInterface = {
    all: ReturnType<typeof useCookies>[0];
    set: ReturnType<typeof useCookies>[1];
    remove: ReturnType<typeof useCookies>[2];
};
/** Falcon Client side scope data - the selected scope based on current context (url, cookie, etc) */
export declare type FalconClientCurrentScopeConfig = {
    /** scope id */
    id: string;
    /** router path basename */
    pathBasename?: string;
};
/** Falcon Client side scopes configuration */
export declare type FalconClientScopesConfig = {
    /** available scopes */
    available: FalconScope[];
    /** id of currently selected scope */
    currentId: string;
    /** default scope id (might be different from passed default scope if that one is not available */
    defaultId: string;
    /** router path basename */
    pathBasename?: string;
};
/**
 * TODO: instead of using `Cookies` and `CookieInterface` we should be able to provide single and consistent interface
 */
export declare type ScopeContext<TCookie> = {
    url: UrlWithStringQuery;
    cookies: TCookie;
    geoLocation: GeoLocation;
};
/** extracts Falcon Client side Scope configuration
 * @param falconScopeConfig
 * @param context
 */
export declare type GetFalconClientScopeConfig = (config: FalconScopeConfig, context: ScopeContext<Cookies>) => FalconClientCurrentScopeConfig;
export declare const tryGetFalconScopeConfig: (config: FalconScopeConfig, context: ScopeContext<Cookies>, getter: GetFalconClientScopeConfig) => FalconClientScopesConfig;
/** sets Falcon Client side Scope configuration */
export declare type SetFalconClientScopeConfig = (falconScopeId: string, config: FalconScopeConfig, context: ScopeContext<CookiesInterface>) => FalconClientCurrentScopeConfig | undefined;
//# sourceMappingURL=FalconClientScopeConfig.d.ts.map