"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.SetPaymentMethod = exports.useSetPaymentMethod = void 0;

var _regenerator = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/asyncToGenerator"));

var _react = /*#__PURE__*/require("react");

var _falconShopData = /*#__PURE__*/require("@deity/falcon-shop-data");

var _CheckoutConsumer = /*#__PURE__*/require("./CheckoutConsumer");

var useSetPaymentMethod = function useSetPaymentMethod() {
  var _useCheckout = (0, _CheckoutConsumer.useCheckout)(),
      isLoading = _useCheckout.isLoading,
      setLoading = _useCheckout.setLoading,
      setPaymentMethod = _useCheckout.setPaymentMethod;

  var _useSetPaymentMethodM = (0, _falconShopData.useSetPaymentMethodMutation)(),
      mutation = _useSetPaymentMethodM[0],
      result = _useSetPaymentMethodM[1];

  if (result.loading !== isLoading) {
    setLoading(result.loading);
  }

  return [(0, _react.useCallback)( /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(input, options) {
      var response, data;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              setLoading(true);
              _context.next = 3;
              return mutation(Object.assign({}, options, {
                variables: {
                  input: {
                    provider: input.provider,
                    method: input.method,
                    data: input.data
                  }
                }
              }));

            case 3:
              response = _context.sent;
              data = response.data;
              setLoading(false);
              if (data && data.setPaymentMethod) setPaymentMethod(data.setPaymentMethod);
              return _context.abrupt("return", response);

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }(), [mutation, setLoading, setPaymentMethod]), result];
};

exports.useSetPaymentMethod = useSetPaymentMethod;

var SetPaymentMethod = function SetPaymentMethod(_ref2) {
  var children = _ref2.children;
  return children.apply(void 0, useSetPaymentMethod());
};

exports.SetPaymentMethod = SetPaymentMethod;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9DaGVja291dC9TZXRQYXltZW50TWV0aG9kLnRzeCJdLCJuYW1lcyI6WyJ1c2VTZXRQYXltZW50TWV0aG9kIiwiaXNMb2FkaW5nIiwic2V0TG9hZGluZyIsInNldFBheW1lbnRNZXRob2QiLCJtdXRhdGlvbiIsInJlc3VsdCIsImxvYWRpbmciLCJpbnB1dCIsIm9wdGlvbnMiLCJ2YXJpYWJsZXMiLCJwcm92aWRlciIsIm1ldGhvZCIsImRhdGEiLCJyZXNwb25zZSIsIlNldFBheW1lbnRNZXRob2QiLCJjaGlsZHJlbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFJTyxJQUFNQSxtQkFBdUYsR0FBRyxTQUExRkEsbUJBQTBGLEdBQU07QUFDM0cscUJBQW9ELG9DQUFwRDtBQUFBLE1BQVFDLFNBQVIsZ0JBQVFBLFNBQVI7QUFBQSxNQUFtQkMsVUFBbkIsZ0JBQW1CQSxVQUFuQjtBQUFBLE1BQStCQyxnQkFBL0IsZ0JBQStCQSxnQkFBL0I7O0FBQ0EsOEJBQTJCLGtEQUEzQjtBQUFBLE1BQU9DLFFBQVA7QUFBQSxNQUFpQkMsTUFBakI7O0FBRUEsTUFBSUEsTUFBTSxDQUFDQyxPQUFQLEtBQW1CTCxTQUF2QixFQUFrQztBQUNoQ0MsSUFBQUEsVUFBVSxDQUFDRyxNQUFNLENBQUNDLE9BQVIsQ0FBVjtBQUNEOztBQUVELFNBQU8sQ0FDTDtBQUFBLHVGQUNFLGlCQUFPQyxLQUFQLEVBQWlDQyxPQUFqQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDRU4sY0FBQUEsVUFBVSxDQUFDLElBQUQsQ0FBVjtBQURGO0FBQUEscUJBRXlCRSxRQUFRLG1CQUMxQkksT0FEMEI7QUFFN0JDLGdCQUFBQSxTQUFTLEVBQUU7QUFBRUYsa0JBQUFBLEtBQUssRUFBRTtBQUFFRyxvQkFBQUEsUUFBUSxFQUFFSCxLQUFLLENBQUNHLFFBQWxCO0FBQTRCQyxvQkFBQUEsTUFBTSxFQUFFSixLQUFLLENBQUNJLE1BQTFDO0FBQWtEQyxvQkFBQUEsSUFBSSxFQUFFTCxLQUFLLENBQUNLO0FBQTlEO0FBQVQ7QUFGa0IsaUJBRmpDOztBQUFBO0FBRVFDLGNBQUFBLFFBRlI7QUFNVUQsY0FBQUEsSUFOVixHQU1tQkMsUUFObkIsQ0FNVUQsSUFOVjtBQU9FVixjQUFBQSxVQUFVLENBQUMsS0FBRCxDQUFWO0FBQ0Esa0JBQUlVLElBQUksSUFBSUEsSUFBSSxDQUFDVCxnQkFBakIsRUFBbUNBLGdCQUFnQixDQUFDUyxJQUFJLENBQUNULGdCQUFOLENBQWhCO0FBUnJDLCtDQVNTVSxRQVRUOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBREY7O0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FZRSxDQUFDVCxRQUFELEVBQVdGLFVBQVgsRUFBdUJDLGdCQUF2QixDQVpGLENBREssRUFlTEUsTUFmSyxDQUFQO0FBaUJELENBekJNOzs7O0FBOEJBLElBQU1TLGdCQUFpRCxHQUFHLFNBQXBEQSxnQkFBb0QsUUFBa0I7QUFBQSxNQUFmQyxRQUFlLFNBQWZBLFFBQWU7QUFDakYsU0FBT0EsUUFBUSxNQUFSLFNBQVlmLG1CQUFtQixFQUEvQixDQUFQO0FBQ0QsQ0FGTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVNldFBheW1lbnRNZXRob2RNdXRhdGlvbiwgU2V0UGF5bWVudE1ldGhvZFJlc3BvbnNlIH0gZnJvbSAnQGRlaXR5L2ZhbGNvbi1zaG9wLWRhdGEnO1xuaW1wb3J0IHsgdXNlQ2hlY2tvdXQgfSBmcm9tICcuL0NoZWNrb3V0Q29uc3VtZXInO1xuaW1wb3J0IHsgQ2hlY2tvdXRPcGVyYXRpb24sIENoZWNrb3V0T3BlcmF0aW9uSG9vayB9IGZyb20gJy4vQ2hlY2tvdXRPcGVyYXRpb24nO1xuaW1wb3J0IHsgUGF5bWVudE1ldGhvZERhdGEgfSBmcm9tICcuL1BheW1lbnRNZXRob2REYXRhJztcblxuZXhwb3J0IGNvbnN0IHVzZVNldFBheW1lbnRNZXRob2Q6IENoZWNrb3V0T3BlcmF0aW9uSG9vazxTZXRQYXltZW50TWV0aG9kUmVzcG9uc2UsIFBheW1lbnRNZXRob2REYXRhPiA9ICgpID0+IHtcbiAgY29uc3QgeyBpc0xvYWRpbmcsIHNldExvYWRpbmcsIHNldFBheW1lbnRNZXRob2QgfSA9IHVzZUNoZWNrb3V0KCk7XG4gIGNvbnN0IFttdXRhdGlvbiwgcmVzdWx0XSA9IHVzZVNldFBheW1lbnRNZXRob2RNdXRhdGlvbigpO1xuXG4gIGlmIChyZXN1bHQubG9hZGluZyAhPT0gaXNMb2FkaW5nKSB7XG4gICAgc2V0TG9hZGluZyhyZXN1bHQubG9hZGluZyk7XG4gIH1cblxuICByZXR1cm4gW1xuICAgIHVzZUNhbGxiYWNrKFxuICAgICAgYXN5bmMgKGlucHV0OiBQYXltZW50TWV0aG9kRGF0YSwgb3B0aW9ucykgPT4ge1xuICAgICAgICBzZXRMb2FkaW5nKHRydWUpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG11dGF0aW9uKHtcbiAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgIHZhcmlhYmxlczogeyBpbnB1dDogeyBwcm92aWRlcjogaW5wdXQucHJvdmlkZXIsIG1ldGhvZDogaW5wdXQubWV0aG9kLCBkYXRhOiBpbnB1dC5kYXRhIH0gfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSByZXNwb25zZTtcbiAgICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICAgIGlmIChkYXRhICYmIGRhdGEuc2V0UGF5bWVudE1ldGhvZCkgc2V0UGF5bWVudE1ldGhvZChkYXRhLnNldFBheW1lbnRNZXRob2QpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICB9LFxuICAgICAgW211dGF0aW9uLCBzZXRMb2FkaW5nLCBzZXRQYXltZW50TWV0aG9kXVxuICAgICksXG4gICAgcmVzdWx0XG4gIF07XG59O1xuXG5leHBvcnQgdHlwZSBTZXRQYXltZW50TWV0aG9kUHJvcHMgPSB7XG4gIGNoaWxkcmVuOiBDaGVja291dE9wZXJhdGlvbjxTZXRQYXltZW50TWV0aG9kUmVzcG9uc2UsIFBheW1lbnRNZXRob2REYXRhPjtcbn07XG5leHBvcnQgY29uc3QgU2V0UGF5bWVudE1ldGhvZDogUmVhY3QuRkM8U2V0UGF5bWVudE1ldGhvZFByb3BzPiA9ICh7IGNoaWxkcmVuIH0pID0+IHtcbiAgcmV0dXJuIGNoaWxkcmVuKC4uLnVzZVNldFBheW1lbnRNZXRob2QoKSk7XG59O1xuIl19