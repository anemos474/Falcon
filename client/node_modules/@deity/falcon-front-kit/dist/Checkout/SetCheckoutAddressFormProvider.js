"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.checkoutAddressToSetCheckoutAddressFormValues = exports.SetCheckoutAddressFormProvider = void 0;

var _extends2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _propTypes = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("prop-types"));

var _formik = /*#__PURE__*/require("formik");

var _falconData = /*#__PURE__*/require("@deity/falcon-data");

var _React = /*#__PURE__*/require("../React");

var INITIAL_VALUES = {
  email: '',
  firstname: '',
  lastname: '',
  street1: '',
  street2: '',
  postcode: '',
  city: '',
  country: undefined,
  region: undefined,
  company: '',
  telephone: '',
  saveInAddressBook: false
};

var SetCheckoutAddressFormProvider = function SetCheckoutAddressFormProvider(props) {
  var initialValues = props.initialValues,
      setAddress = props.setAddress,
      address = props.address,
      onSuccess = props.onSuccess,
      mutationOptions = props.mutationOptions,
      formikProps = (0, _objectWithoutPropertiesLoose2.default)(props, ["initialValues", "setAddress", "address", "onSuccess", "mutationOptions"]);
  var isMounted = (0, _React.useMounted)();
  var getUserError = (0, _falconData.useGetUserError)();
  return /*#__PURE__*/_react.default.createElement(_formik.Formik, (0, _extends2.default)({
    initialStatus: {},
    initialValues: address ? checkoutAddressToSetCheckoutAddressFormValues(address) : initialValues,
    enableReinitialize: true,
    onSubmit: function onSubmit(_ref, _ref2) {
      var setSubmitting = _ref2.setSubmitting,
          setStatus = _ref2.setStatus;
      var street1 = _ref.street1,
          street2 = _ref.street2,
          values = (0, _objectWithoutPropertiesLoose2.default)(_ref, ["street1", "street2"]);
      return setAddress(Object.assign({}, values, {
        street: [street1, street2].filter(Boolean)
      }), mutationOptions).then(function () {
        var successData = Object.assign({}, values, {
          street: [street1, street2].filter(Boolean)
        });

        if (isMounted.current) {
          setStatus({
            data: successData
          });
          setSubmitting(false);
        }

        return onSuccess && onSuccess(successData);
      }).catch(function (e) {
        var error = getUserError(e);

        if (error.length && isMounted.current) {
          setStatus({
            error: error
          });
          setSubmitting(false);
        }
      });
    }
  }, formikProps));
};

exports.SetCheckoutAddressFormProvider = SetCheckoutAddressFormProvider;
SetCheckoutAddressFormProvider.defaultProps = {
  // eslint-disable-next-line react/default-props-match-prop-types
  initialValues: /*#__PURE__*/Object.assign({}, INITIAL_VALUES)
};
SetCheckoutAddressFormProvider.propTypes = {
  setAddress: _propTypes.default.func.isRequired
};

var checkoutAddressToSetCheckoutAddressFormValues = function checkoutAddressToSetCheckoutAddressFormValues(address) {
  if (!address) {
    return INITIAL_VALUES;
  }

  var _typename$address = Object.assign({
    __typename: undefined
  }, address),
      __typename = _typename$address.__typename,
      street = _typename$address.street,
      rest = (0, _objectWithoutPropertiesLoose2.default)(_typename$address, ["__typename", "street"]);

  return Object.assign({
    street1: street.length > 0 ? street[0] : undefined,
    street2: street.length > 1 ? street[1] : undefined
  }, rest);
};

exports.checkoutAddressToSetCheckoutAddressFormValues = checkoutAddressToSetCheckoutAddressFormValues;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,