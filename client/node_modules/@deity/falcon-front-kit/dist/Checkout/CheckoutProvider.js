"use strict";

var _interopRequireWildcard = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports.CheckoutProvider = exports.stripTypenames = exports.browseAndCleanObject = exports.isObject = void 0;

var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));

var _React = /*#__PURE__*/require("../React");

var _CheckoutStep = /*#__PURE__*/require("./CheckoutStep");

var _CheckoutContext = /*#__PURE__*/require("./CheckoutContext");

var _calculateCheckoutStep = /*#__PURE__*/require("./calculateCheckoutStep");

var getNextPossibleCheckoutStepFactory = function getNextPossibleCheckoutStepFactory(stepsOrder) {
  return function (step) {
    var currentStepIndex = stepsOrder.findIndex(function (x) {
      return x === step;
    });
    return currentStepIndex < stepsOrder.length ? stepsOrder[currentStepIndex + 1] : undefined;
  };
};

var isObject = function isObject(value) {
  return Object.prototype.toString.call(value) === '[object Object]';
};

exports.isObject = isObject;

var browseAndCleanObject = function browseAndCleanObject(data, prop) {
  return Object.keys(data).reduce(function (object, key) {
    if (key !== prop) {
      if (isObject(data[key])) {
        object[key] = browseAndCleanObject(data[key], prop);
      } else {
        object[key] = data[key];
      }
    }

    return object;
  }, {});
};
/**
 * Strip `__typename` key from object keys
 * @param initialData
 * @returns {CheckoutValues}
 */


exports.browseAndCleanObject = browseAndCleanObject;

var stripTypenames = function stripTypenames(initialData) {
  return browseAndCleanObject(initialData, '__typename');
};

exports.stripTypenames = stripTypenames;

var CheckoutProvider = function CheckoutProvider(props) {
  var _props$initialValues = props.initialValues,
      initialValues = _props$initialValues === void 0 ? {} : _props$initialValues,
      billingSameAsShipping = props.billingSameAsShipping,
      stepsOrder = props.stepsOrder,
      autoStepForward = props.autoStepForward,
      onValueChanged = props.onValueChanged,
      onStepChanged = props.onStepChanged; // eslint-disable-next-line react-hooks/exhaustive-deps

  var calculateStep = (0, _react.useCallback)(props.calculateStep(stepsOrder), [stepsOrder]);

  var canSetStep = function canSetStep(values, step) {
    return calculateStep(values, step) === step;
  };

  var _useStateCallback = (0, _React.useStateCallback)(calculateStep(initialValues, props.step), function (cStep, pStep) {
    onStepChanged(cStep, pStep, {
      isForwardNavigation: stepsOrder.findIndex(function (x) {
        return x === cStep;
      }) > stepsOrder.findIndex(function (x) {
        return x === pStep;
      })
    });
  }),
      step = _useStateCallback[0],
      setStep = _useStateCallback[1]; // eslint-disable-next-line react-hooks/exhaustive-deps


  var getNextStep = (0, _react.useCallback)(getNextPossibleCheckoutStepFactory(stepsOrder), [stepsOrder]);

  var stepForward = function stepForward() {
    var next = getNextStep(step);
    setStep(next);
    return next;
  };

  var isBoolean = function isBoolean(val) {
    return typeof val === 'boolean';
  };

  var initialState = stripTypenames(initialValues);
  var initialBillingSameAsShipping = false; // First we check the initial state

  if (isBoolean(initialValues.billingSameAsShipping)) {
    initialBillingSameAsShipping = initialValues.billingSameAsShipping;
  } else if (isBoolean(billingSameAsShipping)) {
    initialBillingSameAsShipping = billingSameAsShipping;
  }

  var _useState = (0, _react.useState)(false),
      isLoading = _useState[0],
      setLoading = _useState[1];

  var _useState2 = (0, _react.useState)(initialBillingSameAsShipping),
      isBillingSameAsShipping = _useState2[0],
      setBillingSameAsShipping = _useState2[1];

  var _useState3 = (0, _react.useState)(),
      result = _useState3[0],
      setResult = _useState3[1];

  var _useState4 = (0, _react.useState)(),
      forceStep = _useState4[0],
      setForceStep = _useState4[1];

  var _useStateCallback2 = (0, _React.useStateCallback)(Object.assign({}, initialState), function (newValues) {
    onValueChanged();

    if (autoStepForward) {
      var newStep = forceStep || calculateStep(newValues);
      setStep(newStep);
    }
  }),
      values = _useStateCallback2[0],
      setValues = _useStateCallback2[1];

  (0, _react.useLayoutEffect)(function () {
    if (props.step && props.step !== step) {
      setStep(calculateStep(values, props.step));
    }
  }, [calculateStep, props.step, setStep, step, values, forceStep]);

  var setEmail = function setEmail(email) {
    return setValues(function (x) {
      return Object.assign({}, x, {
        email: email
      });
    });
  };

  var setShippingAddress = function setShippingAddress(shippingAddress) {
    if (!isBillingSameAsShipping) {
      // Force the customer to review their billing address
      setForceStep('billingAddress');
    }

    setValues(function (x) {
      return Object.assign({}, x, {
        shippingAddress: shippingAddress,
        billingAddress: isBillingSameAsShipping ? shippingAddress : x.billingAddress,
        shippingMethod: undefined,
        paymentMethod: undefined
      });
    });
  };

  var setBillingAddress = function setBillingAddress(billingAddress) {
    setForceStep(null);
    setValues(function (x) {
      return Object.assign({}, x, {
        shippingAddress: isBillingSameAsShipping ? billingAddress : x.shippingAddress,
        billingAddress: billingAddress,
        shippingMethod: undefined,
        paymentMethod: undefined
      });
    });
  };

  var setShippingMethod = function setShippingMethod(shippingMethod) {
    return setValues(function (x) {
      return Object.assign({}, x, {
        shippingMethod: shippingMethod,
        paymentMethod: undefined
      });
    });
  };

  var setPaymentMethod = function setPaymentMethod(paymentMethod) {
    return setValues(function (x) {
      return Object.assign({}, x, {
        paymentMethod: paymentMethod
      });
    });
  };
  /**
   * Allows to override OrderData values, useful when order was placed with some overrides and state needs to be synchronized
   * @param order
   */


  var setOrderData = function setOrderData(order) {
    if (order) {
      setValues(Object.assign({}, order));
    }
  };

  return /*#__PURE__*/_react.default.createElement(_CheckoutContext.CheckoutContext.Provider, {
    value: {
      stepsOrder: stepsOrder,
      step: step,
      nextStep: getNextStep(step),
      calculateStep: calculateStep,
      stepForward: stepForward,
      setStep: setStep,
      canSetStep: canSetStep,
      isLoading: isLoading,
      setLoading: setLoading,
      isBillingSameAsShipping: isBillingSameAsShipping,
      setBillingSameAsShipping: setBillingSameAsShipping,
      values: values,
      setEmail: setEmail,
      setShippingAddress: setShippingAddress,
      setBillingAddress: setBillingAddress,
      setShippingMethod: setShippingMethod,
      setPaymentMethod: setPaymentMethod,
      setOrderData: setOrderData,
      result: result,
      setResult: setResult
    }
  }, props.children);
};

exports.CheckoutProvider = CheckoutProvider;
CheckoutProvider.defaultProps = {
  stepsOrder: _CheckoutStep.CheckoutFlow,
  autoStepForward: true,
  billingSameAsShipping: false,
  initialValues: {},
  onValueChanged: function onValueChanged() {},
  onStepChanged: function onStepChanged() {},
  calculateStep: _calculateCheckoutStep.calculateCheckoutStepFactory
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,