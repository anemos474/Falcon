"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.NetworkStatus = void 0;

var _assertThisInitialized2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/inheritsLoose"));

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var NetworkStatus = /*#__PURE__*/function (_React$Component) {
  (0, _inheritsLoose2.default)(NetworkStatus, _React$Component);

  function NetworkStatus(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.updateOnLineStatus = _this.updateOnLineStatus.bind((0, _assertThisInitialized2.default)(_this));
    _this.state = {
      isOnline: true
    };
    return _this;
  }

  var _proto = NetworkStatus.prototype;

  _proto.componentDidMount = function componentDidMount() {
    window.addEventListener('online', this.updateOnLineStatus);
    window.addEventListener('offline', this.updateOnLineStatus); // run detection logic when component mounts as React 16 optimizes too much and doesn't
    // re-render even when SSR html doesn't match client-side
    // @see https://github.com/facebook/react/issues/10591

    this.updateOnLineStatus();
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    window.removeEventListener('online', this.updateOnLineStatus);
    window.removeEventListener('offline', this.updateOnLineStatus);
  };

  _proto.updateOnLineStatus = function updateOnLineStatus() {
    var _window = window,
        navigator = _window.navigator;
    var online = navigator && navigator.onLine;

    if (this.state.isOnline === online) {
      return;
    }

    this.setState({
      isOnline: online
    });
  };

  _proto.render = function render() {
    var children = this.props.children;
    var isOnline = this.state.isOnline;
    return children({
      isOnline: isOnline
    });
  };

  return NetworkStatus;
}(_react.default.Component);

exports.NetworkStatus = NetworkStatus;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9OZXR3b3JrU3RhdHVzL05ldHdvcmtTdGF0dXMudHN4Il0sIm5hbWVzIjpbIk5ldHdvcmtTdGF0dXMiLCJwcm9wcyIsInVwZGF0ZU9uTGluZVN0YXR1cyIsImJpbmQiLCJzdGF0ZSIsImlzT25saW5lIiwiY29tcG9uZW50RGlkTW91bnQiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibmF2aWdhdG9yIiwib25saW5lIiwib25MaW5lIiwic2V0U3RhdGUiLCJyZW5kZXIiLCJjaGlsZHJlbiIsIlJlYWN0IiwiQ29tcG9uZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztJQVdhQSxhOzs7QUFDWCx5QkFBWUMsS0FBWixFQUFtQjtBQUFBOztBQUNqQix3Q0FBTUEsS0FBTjtBQUVBLFVBQUtDLGtCQUFMLEdBQTBCLE1BQUtBLGtCQUFMLENBQXdCQyxJQUF4Qiw2Q0FBMUI7QUFFQSxVQUFLQyxLQUFMLEdBQWE7QUFDWEMsTUFBQUEsUUFBUSxFQUFFO0FBREMsS0FBYjtBQUxpQjtBQVFsQjs7OztTQUVEQyxpQixHQUFBLDZCQUFvQjtBQUNsQkMsSUFBQUEsTUFBTSxDQUFDQyxnQkFBUCxDQUF3QixRQUF4QixFQUFrQyxLQUFLTixrQkFBdkM7QUFDQUssSUFBQUEsTUFBTSxDQUFDQyxnQkFBUCxDQUF3QixTQUF4QixFQUFtQyxLQUFLTixrQkFBeEMsRUFGa0IsQ0FJbEI7QUFDQTtBQUNBOztBQUNBLFNBQUtBLGtCQUFMO0FBQ0QsRzs7U0FFRE8sb0IsR0FBQSxnQ0FBdUI7QUFDckJGLElBQUFBLE1BQU0sQ0FBQ0csbUJBQVAsQ0FBMkIsUUFBM0IsRUFBcUMsS0FBS1Isa0JBQTFDO0FBQ0FLLElBQUFBLE1BQU0sQ0FBQ0csbUJBQVAsQ0FBMkIsU0FBM0IsRUFBc0MsS0FBS1Isa0JBQTNDO0FBQ0QsRzs7U0FFREEsa0IsR0FBQSw4QkFBcUI7QUFDbkIsa0JBQXNCSyxNQUF0QjtBQUFBLFFBQVFJLFNBQVIsV0FBUUEsU0FBUjtBQUNBLFFBQU1DLE1BQU0sR0FBR0QsU0FBUyxJQUFJQSxTQUFTLENBQUNFLE1BQXRDOztBQUVBLFFBQUksS0FBS1QsS0FBTCxDQUFXQyxRQUFYLEtBQXdCTyxNQUE1QixFQUFvQztBQUNsQztBQUNEOztBQUVELFNBQUtFLFFBQUwsQ0FBYztBQUFFVCxNQUFBQSxRQUFRLEVBQUVPO0FBQVosS0FBZDtBQUNELEc7O1NBRURHLE0sR0FBQSxrQkFBUztBQUNQLFFBQVFDLFFBQVIsR0FBcUIsS0FBS2YsS0FBMUIsQ0FBUWUsUUFBUjtBQUNBLFFBQVFYLFFBQVIsR0FBcUIsS0FBS0QsS0FBMUIsQ0FBUUMsUUFBUjtBQUVBLFdBQU9XLFFBQVEsQ0FBQztBQUFFWCxNQUFBQSxRQUFRLEVBQVJBO0FBQUYsS0FBRCxDQUFmO0FBQ0QsRzs7O0VBMUNnQ1ksZUFBTUMsUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbnR5cGUgTmV0d29ya1N0YXR1c1N0YXRlID0ge1xuICBpc09ubGluZTogYm9vbGVhbjtcbn07XG5leHBvcnQgdHlwZSBOZXR3b3JrU3RhdHVzUmVuZGVyUHJvcHMgPSB7XG4gIGlzT25saW5lOiBib29sZWFuO1xufTtcbmV4cG9ydCB0eXBlIE5ldHdvcmtTdGF0dXNQcm9wcyA9IHtcbiAgY2hpbGRyZW46IChyZW5kZXJQcm9wczogTmV0d29ya1N0YXR1c1JlbmRlclByb3BzKSA9PiBSZWFjdC5SZWFjdE5vZGU7XG59O1xuZXhwb3J0IGNsYXNzIE5ldHdvcmtTdGF0dXMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8TmV0d29ya1N0YXR1c1Byb3BzLCBOZXR3b3JrU3RhdHVzU3RhdGU+IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnVwZGF0ZU9uTGluZVN0YXR1cyA9IHRoaXMudXBkYXRlT25MaW5lU3RhdHVzLmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNPbmxpbmU6IHRydWVcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29ubGluZScsIHRoaXMudXBkYXRlT25MaW5lU3RhdHVzKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb2ZmbGluZScsIHRoaXMudXBkYXRlT25MaW5lU3RhdHVzKTtcblxuICAgIC8vIHJ1biBkZXRlY3Rpb24gbG9naWMgd2hlbiBjb21wb25lbnQgbW91bnRzIGFzIFJlYWN0IDE2IG9wdGltaXplcyB0b28gbXVjaCBhbmQgZG9lc24ndFxuICAgIC8vIHJlLXJlbmRlciBldmVuIHdoZW4gU1NSIGh0bWwgZG9lc24ndCBtYXRjaCBjbGllbnQtc2lkZVxuICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xMDU5MVxuICAgIHRoaXMudXBkYXRlT25MaW5lU3RhdHVzKCk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb25saW5lJywgdGhpcy51cGRhdGVPbkxpbmVTdGF0dXMpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdvZmZsaW5lJywgdGhpcy51cGRhdGVPbkxpbmVTdGF0dXMpO1xuICB9XG5cbiAgdXBkYXRlT25MaW5lU3RhdHVzKCkge1xuICAgIGNvbnN0IHsgbmF2aWdhdG9yIH0gPSB3aW5kb3c7XG4gICAgY29uc3Qgb25saW5lID0gbmF2aWdhdG9yICYmIG5hdmlnYXRvci5vbkxpbmU7XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5pc09ubGluZSA9PT0gb25saW5lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzT25saW5lOiBvbmxpbmUgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGlzT25saW5lIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgcmV0dXJuIGNoaWxkcmVuKHsgaXNPbmxpbmUgfSk7XG4gIH1cbn1cbiJdfQ==