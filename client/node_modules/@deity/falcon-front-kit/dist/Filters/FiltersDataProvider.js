"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.FiltersDataProvider = exports.getSelectedFilterOptionsFor = exports.getFiltersData = void 0;

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _Search = /*#__PURE__*/require("../Search");

var _FilterData = /*#__PURE__*/require("./FilterData");

var getFiltersData = function getFiltersData(filters, aggregations, filterData) {
  if (aggregations === void 0) {
    aggregations = [];
  }

  if (filterData === void 0) {
    filterData = [];
  }

  return [].concat(aggregations.map(function (x) {
    return (0, _FilterData.aggregationToFilterData)(x);
  }), filterData).map(function (x) {
    var selected = filters.find(function (filter) {
      return filter.field === x.field;
    });
    return Object.assign({}, x, {
      value: selected ? selected.value : []
    });
  });
};

exports.getFiltersData = getFiltersData;

var getSelectedFilterOptionsFor = function getSelectedFilterOptionsFor(data, field) {
  var filter = data.find(function (x) {
    return x.field === field;
  });

  if (filter === undefined) {
    return [];
  }

  var options = filter.options,
      value = filter.value;
  return options.filter(function (option) {
    return value.some(function (x) {
      return x === option.value;
    });
  });
};

exports.getSelectedFilterOptionsFor = getSelectedFilterOptionsFor;

var FiltersDataProvider = function FiltersDataProvider(_ref) {
  var children = _ref.children,
      aggregations = _ref.aggregations,
      data = _ref.data;
  return /*#__PURE__*/_react.default.createElement(_Search.SearchConsumer, null, function (_ref2) {
    var filters = _ref2.state.filters,
        setFilter = _ref2.setFilter,
        removeFilter = _ref2.removeFilter,
        removeFilters = _ref2.removeFilters;
    return children({
      filters: getFiltersData(filters, aggregations || [], data || []),
      anySelected: filters.length > 0,
      getSelectedFilterOptionsFor: getSelectedFilterOptionsFor,
      setFilter: setFilter,
      removeFilter: removeFilter,
      removeFilters: removeFilters
    });
  });
};

exports.FiltersDataProvider = FiltersDataProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9GaWx0ZXJzL0ZpbHRlcnNEYXRhUHJvdmlkZXIudHN4Il0sIm5hbWVzIjpbImdldEZpbHRlcnNEYXRhIiwiZmlsdGVycyIsImFnZ3JlZ2F0aW9ucyIsImZpbHRlckRhdGEiLCJtYXAiLCJ4Iiwic2VsZWN0ZWQiLCJmaW5kIiwiZmlsdGVyIiwiZmllbGQiLCJ2YWx1ZSIsImdldFNlbGVjdGVkRmlsdGVyT3B0aW9uc0ZvciIsImRhdGEiLCJ1bmRlZmluZWQiLCJvcHRpb25zIiwib3B0aW9uIiwic29tZSIsIkZpbHRlcnNEYXRhUHJvdmlkZXIiLCJjaGlsZHJlbiIsInN0YXRlIiwic2V0RmlsdGVyIiwicmVtb3ZlRmlsdGVyIiwicmVtb3ZlRmlsdGVycyIsImFueVNlbGVjdGVkIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBR0E7O0FBQ0E7O0FBRU8sSUFBTUEsY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixDQUM1QkMsT0FENEIsRUFFNUJDLFlBRjRCLEVBRzVCQyxVQUg0QjtBQUFBLE1BRTVCRCxZQUY0QjtBQUU1QkEsSUFBQUEsWUFGNEIsR0FFRSxFQUZGO0FBQUE7O0FBQUEsTUFHNUJDLFVBSDRCO0FBRzVCQSxJQUFBQSxVQUg0QixHQUdELEVBSEM7QUFBQTs7QUFBQSxTQUt4QixFQUFKLFFBQVdELFlBQVksQ0FBQ0UsR0FBYixDQUFpQixVQUFBQyxDQUFDO0FBQUEsV0FBSSx5Q0FBd0JBLENBQXhCLENBQUo7QUFBQSxHQUFsQixDQUFYLEVBQWlFRixVQUFqRSxFQUE2RUMsR0FBN0UsQ0FBaUYsVUFBQUMsQ0FBQyxFQUFJO0FBQ3BGLFFBQU1DLFFBQVEsR0FBR0wsT0FBTyxDQUFDTSxJQUFSLENBQWEsVUFBQUMsTUFBTTtBQUFBLGFBQUlBLE1BQU0sQ0FBQ0MsS0FBUCxLQUFpQkosQ0FBQyxDQUFDSSxLQUF2QjtBQUFBLEtBQW5CLENBQWpCO0FBRUEsNkJBQ0tKLENBREw7QUFFRUssTUFBQUEsS0FBSyxFQUFFSixRQUFRLEdBQUdBLFFBQVEsQ0FBQ0ksS0FBWixHQUFvQjtBQUZyQztBQUlELEdBUEQsQ0FMNEI7QUFBQSxDQUF2Qjs7OztBQWNBLElBQU1DLDJCQUEyQixHQUFHLFNBQTlCQSwyQkFBOEIsQ0FBQ0MsSUFBRCxFQUFxQkgsS0FBckIsRUFBdUM7QUFDaEYsTUFBTUQsTUFBTSxHQUFHSSxJQUFJLENBQUNMLElBQUwsQ0FBVSxVQUFBRixDQUFDO0FBQUEsV0FBSUEsQ0FBQyxDQUFDSSxLQUFGLEtBQVlBLEtBQWhCO0FBQUEsR0FBWCxDQUFmOztBQUVBLE1BQUlELE1BQU0sS0FBS0ssU0FBZixFQUEwQjtBQUN4QixXQUFPLEVBQVA7QUFDRDs7QUFDRCxNQUFRQyxPQUFSLEdBQTJCTixNQUEzQixDQUFRTSxPQUFSO0FBQUEsTUFBaUJKLEtBQWpCLEdBQTJCRixNQUEzQixDQUFpQkUsS0FBakI7QUFFQSxTQUFPSSxPQUFPLENBQUNOLE1BQVIsQ0FBZSxVQUFBTyxNQUFNO0FBQUEsV0FBSUwsS0FBSyxDQUFDTSxJQUFOLENBQVcsVUFBQVgsQ0FBQztBQUFBLGFBQUlBLENBQUMsS0FBS1UsTUFBTSxDQUFDTCxLQUFqQjtBQUFBLEtBQVosQ0FBSjtBQUFBLEdBQXJCLENBQVA7QUFDRCxDQVRNOzs7O0FBMEJBLElBQU1PLG1CQUF3RCxHQUFHLFNBQTNEQSxtQkFBMkQ7QUFBQSxNQUFHQyxRQUFILFFBQUdBLFFBQUg7QUFBQSxNQUFhaEIsWUFBYixRQUFhQSxZQUFiO0FBQUEsTUFBMkJVLElBQTNCLFFBQTJCQSxJQUEzQjtBQUFBLHNCQUN0RSw2QkFBQyxzQkFBRCxRQUNHO0FBQUEsUUFBWVgsT0FBWixTQUFHa0IsS0FBSCxDQUFZbEIsT0FBWjtBQUFBLFFBQXVCbUIsU0FBdkIsU0FBdUJBLFNBQXZCO0FBQUEsUUFBa0NDLFlBQWxDLFNBQWtDQSxZQUFsQztBQUFBLFFBQWdEQyxhQUFoRCxTQUFnREEsYUFBaEQ7QUFBQSxXQUNDSixRQUFRLENBQUM7QUFDUGpCLE1BQUFBLE9BQU8sRUFBRUQsY0FBYyxDQUFDQyxPQUFELEVBQVVDLFlBQVksSUFBSSxFQUExQixFQUE4QlUsSUFBSSxJQUFJLEVBQXRDLENBRGhCO0FBRVBXLE1BQUFBLFdBQVcsRUFBRXRCLE9BQU8sQ0FBQ3VCLE1BQVIsR0FBaUIsQ0FGdkI7QUFHUGIsTUFBQUEsMkJBQTJCLEVBQTNCQSwyQkFITztBQUlQUyxNQUFBQSxTQUFTLEVBQVRBLFNBSk87QUFLUEMsTUFBQUEsWUFBWSxFQUFaQSxZQUxPO0FBTVBDLE1BQUFBLGFBQWEsRUFBYkE7QUFOTyxLQUFELENBRFQ7QUFBQSxHQURILENBRHNFO0FBQUEsQ0FBakUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQWdncmVnYXRpb24gfSBmcm9tICdAZGVpdHkvZmFsY29uLWRhdGEnO1xuaW1wb3J0IHsgRmlsdGVyT3BlcmF0b3IsIEZpbHRlcklucHV0IH0gZnJvbSAnQGRlaXR5L2ZhbGNvbi1zaG9wLWV4dGVuc2lvbic7XG5pbXBvcnQgeyBTZWFyY2hDb25zdW1lciB9IGZyb20gJy4uL1NlYXJjaCc7XG5pbXBvcnQgeyBGaWx0ZXJEYXRhLCBGaWx0ZXJPcHRpb24sIGFnZ3JlZ2F0aW9uVG9GaWx0ZXJEYXRhIH0gZnJvbSAnLi9GaWx0ZXJEYXRhJztcblxuZXhwb3J0IGNvbnN0IGdldEZpbHRlcnNEYXRhID0gKFxuICBmaWx0ZXJzOiBGaWx0ZXJJbnB1dFtdLFxuICBhZ2dyZWdhdGlvbnM6IEFnZ3JlZ2F0aW9uW10gPSBbXSxcbiAgZmlsdGVyRGF0YTogRmlsdGVyRGF0YVtdID0gW11cbik6IEZpbHRlckRhdGFbXSA9PlxuICBbLi4uW10sIC4uLmFnZ3JlZ2F0aW9ucy5tYXAoeCA9PiBhZ2dyZWdhdGlvblRvRmlsdGVyRGF0YSh4KSksIC4uLmZpbHRlckRhdGFdLm1hcCh4ID0+IHtcbiAgICBjb25zdCBzZWxlY3RlZCA9IGZpbHRlcnMuZmluZChmaWx0ZXIgPT4gZmlsdGVyLmZpZWxkID09PSB4LmZpZWxkKTtcblxuICAgIHJldHVybiB7XG4gICAgICAuLi54LFxuICAgICAgdmFsdWU6IHNlbGVjdGVkID8gc2VsZWN0ZWQudmFsdWUgOiBbXVxuICAgIH07XG4gIH0pO1xuXG5leHBvcnQgY29uc3QgZ2V0U2VsZWN0ZWRGaWx0ZXJPcHRpb25zRm9yID0gKGRhdGE6IEZpbHRlckRhdGFbXSwgZmllbGQ6IHN0cmluZykgPT4ge1xuICBjb25zdCBmaWx0ZXIgPSBkYXRhLmZpbmQoeCA9PiB4LmZpZWxkID09PSBmaWVsZCk7XG5cbiAgaWYgKGZpbHRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGNvbnN0IHsgb3B0aW9ucywgdmFsdWUgfSA9IGZpbHRlcjtcblxuICByZXR1cm4gb3B0aW9ucy5maWx0ZXIob3B0aW9uID0+IHZhbHVlLnNvbWUoeCA9PiB4ID09PSBvcHRpb24udmFsdWUpKTtcbn07XG5cbmV4cG9ydCB0eXBlIEZpbHRlcnNEYXRhUHJvdmlkZXJSZW5kZXJQcm9wcyA9IHtcbiAgZmlsdGVyczogRmlsdGVyRGF0YVtdO1xuICBhbnlTZWxlY3RlZDogYm9vbGVhbjtcbiAgZ2V0U2VsZWN0ZWRGaWx0ZXJPcHRpb25zRm9yOiAoZGF0YTogRmlsdGVyRGF0YVtdLCBmaWVsZDogc3RyaW5nKSA9PiBGaWx0ZXJPcHRpb25bXTtcbiAgc2V0RmlsdGVyKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZ1tdLCBvcGVyYXRvcj86IEZpbHRlck9wZXJhdG9yKTogdm9pZDtcbiAgcmVtb3ZlRmlsdGVyKG5hbWU6IHN0cmluZyk6IHZvaWQ7XG4gIHJlbW92ZUZpbHRlcnMoKTogdm9pZDtcbn07XG5cbmV4cG9ydCB0eXBlIEZpbHRlcnNEYXRhUHJvdmlkZXJQcm9wcyA9IHtcbiAgYWdncmVnYXRpb25zPzogQWdncmVnYXRpb25bXTtcbiAgZGF0YT86IEZpbHRlckRhdGFbXTtcbiAgY2hpbGRyZW46IChyZW5kZXJQcm9wczogRmlsdGVyc0RhdGFQcm92aWRlclJlbmRlclByb3BzKSA9PiBSZWFjdC5SZWFjdE5vZGU7XG59O1xuXG5leHBvcnQgY29uc3QgRmlsdGVyc0RhdGFQcm92aWRlcjogUmVhY3QuU0ZDPEZpbHRlcnNEYXRhUHJvdmlkZXJQcm9wcz4gPSAoeyBjaGlsZHJlbiwgYWdncmVnYXRpb25zLCBkYXRhIH0pID0+IChcbiAgPFNlYXJjaENvbnN1bWVyPlxuICAgIHsoeyBzdGF0ZTogeyBmaWx0ZXJzIH0sIHNldEZpbHRlciwgcmVtb3ZlRmlsdGVyLCByZW1vdmVGaWx0ZXJzIH0pID0+XG4gICAgICBjaGlsZHJlbih7XG4gICAgICAgIGZpbHRlcnM6IGdldEZpbHRlcnNEYXRhKGZpbHRlcnMsIGFnZ3JlZ2F0aW9ucyB8fCBbXSwgZGF0YSB8fCBbXSksXG4gICAgICAgIGFueVNlbGVjdGVkOiBmaWx0ZXJzLmxlbmd0aCA+IDAsXG4gICAgICAgIGdldFNlbGVjdGVkRmlsdGVyT3B0aW9uc0ZvcixcbiAgICAgICAgc2V0RmlsdGVyLFxuICAgICAgICByZW1vdmVGaWx0ZXIsXG4gICAgICAgIHJlbW92ZUZpbHRlcnNcbiAgICAgIH0pXG4gICAgfVxuICA8L1NlYXJjaENvbnN1bWVyPlxuKTtcbiJdfQ==