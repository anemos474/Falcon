"use strict";

var _interopRequireDefault = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.EnsureTTI = void 0;

var _inheritsLoose2 = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@babel/runtime/helpers/inheritsLoose"));

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _propTypes = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("prop-types"));

/**
 * TTI measures the time from Navigation Start until the page's resources are loaded and the main thread is idle for at least 5 seconds
 */
var EnsureTTI = /*#__PURE__*/function (_React$Component) {
  (0, _inheritsLoose2.default)(EnsureTTI, _React$Component);

  function EnsureTTI(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;

    _this.forceReady = function () {
      if (!_this.state.isReady) {
        _this.setState(function (x) {
          return Object.assign({}, x, {
            isReady: true
          });
        });
      }
    };

    _this.state = {
      isReady: false,
      setTimeoutHandlerId: undefined,
      requestIdleHandlerId: undefined
    };
    return _this;
  }

  var _proto = EnsureTTI.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;

    var timeout = this.props.timeout; // set isReady flag after timeout

    var setTimeoutHandlerId = window.setTimeout(function () {
      if (_this2.state.isReady) {
        return;
      }

      if ('requestIdleCallback' in window) {
        // @ts-ignore
        var requestIdleHandlerId = window.requestIdleCallback(_this2.forceReady);
        return _this2.setState(function (x) {
          return Object.assign({}, x, {
            requestIdleHandlerId: requestIdleHandlerId
          });
        });
      }

      return _this2.forceReady();
    }, timeout); // eslint-disable-next-line

    this.setState(function (x) {
      return Object.assign({}, x, {
        setTimeoutHandlerId: setTimeoutHandlerId
      });
    });
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    if (this.props.forceReady) {
      this.forceReady();
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    var _this$state = this.state,
        setTimeoutHandlerId = _this$state.setTimeoutHandlerId,
        requestIdleHandlerId = _this$state.requestIdleHandlerId;
    window.clearTimeout(setTimeoutHandlerId);

    if ('cancelIdleCallback' in window && requestIdleHandlerId !== undefined) {
      // @ts-ignore
      window.cancelIdleCallback(requestIdleHandlerId);
    }
  }
  /** Sets isReady even before `timeout` */
  ;

  _proto.render = function render() {
    return this.props.children({
      isReady: this.state.isReady,
      forceReady: this.forceReady
    });
  };

  return EnsureTTI;
}(_react.default.Component);

exports.EnsureTTI = EnsureTTI;
EnsureTTI.propTypes = {
  timeout: _propTypes.default.number,
  children: _propTypes.default.func.isRequired
};
EnsureTTI.defaultProps = {
  timeout: 6000
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9FbnN1cmVUVEkvRW5zdXJlVFRJLnRzeCJdLCJuYW1lcyI6WyJFbnN1cmVUVEkiLCJwcm9wcyIsImZvcmNlUmVhZHkiLCJzdGF0ZSIsImlzUmVhZHkiLCJzZXRTdGF0ZSIsIngiLCJzZXRUaW1lb3V0SGFuZGxlcklkIiwidW5kZWZpbmVkIiwicmVxdWVzdElkbGVIYW5kbGVySWQiLCJjb21wb25lbnREaWRNb3VudCIsInRpbWVvdXQiLCJ3aW5kb3ciLCJzZXRUaW1lb3V0IiwicmVxdWVzdElkbGVDYWxsYmFjayIsImNvbXBvbmVudERpZFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiY2xlYXJUaW1lb3V0IiwiY2FuY2VsSWRsZUNhbGxiYWNrIiwicmVuZGVyIiwiY2hpbGRyZW4iLCJSZWFjdCIsIkNvbXBvbmVudCIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsIm51bWJlciIsImZ1bmMiLCJpc1JlcXVpcmVkIiwiZGVmYXVsdFByb3BzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFxQkE7QUFDQTtBQUNBO0lBQ2FBLFM7OztBQVVYLHFCQUFZQyxLQUFaLEVBQW1DO0FBQUE7O0FBQ2pDLHdDQUFNQSxLQUFOOztBQURpQyxVQWtEbkNDLFVBbERtQyxHQWtEdEIsWUFBTTtBQUNqQixVQUFJLENBQUMsTUFBS0MsS0FBTCxDQUFXQyxPQUFoQixFQUF5QjtBQUN2QixjQUFLQyxRQUFMLENBQWMsVUFBQUMsQ0FBQztBQUFBLG1DQUFVQSxDQUFWO0FBQWFGLFlBQUFBLE9BQU8sRUFBRTtBQUF0QjtBQUFBLFNBQWY7QUFDRDtBQUNGLEtBdERrQzs7QUFHakMsVUFBS0QsS0FBTCxHQUFhO0FBQ1hDLE1BQUFBLE9BQU8sRUFBRSxLQURFO0FBRVhHLE1BQUFBLG1CQUFtQixFQUFFQyxTQUZWO0FBR1hDLE1BQUFBLG9CQUFvQixFQUFFRDtBQUhYLEtBQWI7QUFIaUM7QUFRbEM7Ozs7U0FFREUsaUIsR0FBQSw2QkFBb0I7QUFBQTs7QUFDbEIsUUFBUUMsT0FBUixHQUFvQixLQUFLVixLQUF6QixDQUFRVSxPQUFSLENBRGtCLENBR2xCOztBQUNBLFFBQU1KLG1CQUFtQixHQUFHSyxNQUFNLENBQUNDLFVBQVAsQ0FBa0IsWUFBTTtBQUNsRCxVQUFJLE1BQUksQ0FBQ1YsS0FBTCxDQUFXQyxPQUFmLEVBQXdCO0FBQ3RCO0FBQ0Q7O0FBRUQsVUFBSSx5QkFBeUJRLE1BQTdCLEVBQXFDO0FBQ25DO0FBQ0EsWUFBTUgsb0JBQW9CLEdBQUdHLE1BQU0sQ0FBQ0UsbUJBQVAsQ0FBMkIsTUFBSSxDQUFDWixVQUFoQyxDQUE3QjtBQUVBLGVBQU8sTUFBSSxDQUFDRyxRQUFMLENBQWMsVUFBQUMsQ0FBQztBQUFBLG1DQUFVQSxDQUFWO0FBQWFHLFlBQUFBLG9CQUFvQixFQUFwQkE7QUFBYjtBQUFBLFNBQWYsQ0FBUDtBQUNEOztBQUVELGFBQU8sTUFBSSxDQUFDUCxVQUFMLEVBQVA7QUFDRCxLQWIyQixFQWF6QlMsT0FieUIsQ0FBNUIsQ0FKa0IsQ0FtQmxCOztBQUNBLFNBQUtOLFFBQUwsQ0FBYyxVQUFBQyxDQUFDO0FBQUEsK0JBQVVBLENBQVY7QUFBYUMsUUFBQUEsbUJBQW1CLEVBQW5CQTtBQUFiO0FBQUEsS0FBZjtBQUNELEc7O1NBRURRLGtCLEdBQUEsOEJBQXFCO0FBQ25CLFFBQUksS0FBS2QsS0FBTCxDQUFXQyxVQUFmLEVBQTJCO0FBQ3pCLFdBQUtBLFVBQUw7QUFDRDtBQUNGLEc7O1NBRURjLG9CLEdBQUEsZ0NBQXVCO0FBQ3JCLHNCQUFzRCxLQUFLYixLQUEzRDtBQUFBLFFBQVFJLG1CQUFSLGVBQVFBLG1CQUFSO0FBQUEsUUFBNkJFLG9CQUE3QixlQUE2QkEsb0JBQTdCO0FBRUFHLElBQUFBLE1BQU0sQ0FBQ0ssWUFBUCxDQUFvQlYsbUJBQXBCOztBQUNBLFFBQUksd0JBQXdCSyxNQUF4QixJQUFrQ0gsb0JBQW9CLEtBQUtELFNBQS9ELEVBQTBFO0FBQ3hFO0FBQ0FJLE1BQUFBLE1BQU0sQ0FBQ00sa0JBQVAsQ0FBMEJULG9CQUExQjtBQUNEO0FBQ0Y7QUFFRDs7O1NBT0FVLE0sR0FBQSxrQkFBUztBQUNQLFdBQU8sS0FBS2xCLEtBQUwsQ0FBV21CLFFBQVgsQ0FBb0I7QUFDekJoQixNQUFBQSxPQUFPLEVBQUUsS0FBS0QsS0FBTCxDQUFXQyxPQURLO0FBRXpCRixNQUFBQSxVQUFVLEVBQUUsS0FBS0E7QUFGUSxLQUFwQixDQUFQO0FBSUQsRzs7O0VBdkU0Qm1CLGVBQU1DLFM7OztBQUF4QnRCLFMsQ0FDSnVCLFMsR0FBWTtBQUNqQlosRUFBQUEsT0FBTyxFQUFFYSxtQkFBVUMsTUFERjtBQUVqQkwsRUFBQUEsUUFBUSxFQUFFSSxtQkFBVUUsSUFBVixDQUFlQztBQUZSLEM7QUFEUjNCLFMsQ0FNSjRCLFksR0FBZTtBQUNwQmpCLEVBQUFBLE9BQU8sRUFBRTtBQURXLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxudHlwZSBFbnN1cmVUVElTdGF0ZSA9IHtcbiAgaXNSZWFkeTogYm9vbGVhbjtcbiAgc2V0VGltZW91dEhhbmRsZXJJZD86IGFueTtcbiAgcmVxdWVzdElkbGVIYW5kbGVySWQ/OiBhbnk7XG59O1xuXG5leHBvcnQgdHlwZSBFbnN1cmVUVElSZW5kZXJQcm9wcyA9IHtcbiAgaXNSZWFkeTogYm9vbGVhbjtcbiAgZm9yY2VSZWFkeTogKCkgPT4gdm9pZDtcbn07XG5leHBvcnQgdHlwZSBFbnN1cmVUVElQcm9wcyA9IHtcbiAgLyoqIERlZmF1bHQgdGltZW91dCBpcyBgNjAwMGBtcyBhbmQgYmFzZWQgb24gdGhlIGFzc3VtcHRpb24gaG93IHRoZSBMaWdodGhvdXNlIG1lYXN1cmVzIHRpbWUgdG8gaW50ZXJhY3RpdmUgdG8gaW1wcm92ZSBwZXJjZWl2ZWQgcGVyZm9ybWFuY2VcbiAgICogQHNlZSBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWIvdXBkYXRlcy8yMDE4LzA1L2ZpcnN0LWlucHV0LWRlbGF5XG4gICAqL1xuICB0aW1lb3V0PzogbnVtYmVyO1xuICBmb3JjZVJlYWR5PzogYm9vbGVhbjtcbiAgY2hpbGRyZW46IChwcm9wczogRW5zdXJlVFRJUmVuZGVyUHJvcHMpID0+IFJlYWN0LlJlYWN0Tm9kZTtcbn07XG5cbi8qKlxuICogVFRJIG1lYXN1cmVzIHRoZSB0aW1lIGZyb20gTmF2aWdhdGlvbiBTdGFydCB1bnRpbCB0aGUgcGFnZSdzIHJlc291cmNlcyBhcmUgbG9hZGVkIGFuZCB0aGUgbWFpbiB0aHJlYWQgaXMgaWRsZSBmb3IgYXQgbGVhc3QgNSBzZWNvbmRzXG4gKi9cbmV4cG9ydCBjbGFzcyBFbnN1cmVUVEkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8RW5zdXJlVFRJUHJvcHMsIEVuc3VyZVRUSVN0YXRlPiB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgdGltZW91dDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICB9O1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgdGltZW91dDogNjAwMFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBFbnN1cmVUVElQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc1JlYWR5OiBmYWxzZSxcbiAgICAgIHNldFRpbWVvdXRIYW5kbGVySWQ6IHVuZGVmaW5lZCxcbiAgICAgIHJlcXVlc3RJZGxlSGFuZGxlcklkOiB1bmRlZmluZWRcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyB0aW1lb3V0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgLy8gc2V0IGlzUmVhZHkgZmxhZyBhZnRlciB0aW1lb3V0XG4gICAgY29uc3Qgc2V0VGltZW91dEhhbmRsZXJJZCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmICh0aGlzLnN0YXRlLmlzUmVhZHkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoJ3JlcXVlc3RJZGxlQ2FsbGJhY2snIGluIHdpbmRvdykge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNvbnN0IHJlcXVlc3RJZGxlSGFuZGxlcklkID0gd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2sodGhpcy5mb3JjZVJlYWR5KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5zZXRTdGF0ZSh4ID0+ICh7IC4uLngsIHJlcXVlc3RJZGxlSGFuZGxlcklkIH0pKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuZm9yY2VSZWFkeSgpO1xuICAgIH0sIHRpbWVvdXQpO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgdGhpcy5zZXRTdGF0ZSh4ID0+ICh7IC4uLngsIHNldFRpbWVvdXRIYW5kbGVySWQgfSkpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIGlmICh0aGlzLnByb3BzLmZvcmNlUmVhZHkpIHtcbiAgICAgIHRoaXMuZm9yY2VSZWFkeSgpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGNvbnN0IHsgc2V0VGltZW91dEhhbmRsZXJJZCwgcmVxdWVzdElkbGVIYW5kbGVySWQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHNldFRpbWVvdXRIYW5kbGVySWQpO1xuICAgIGlmICgnY2FuY2VsSWRsZUNhbGxiYWNrJyBpbiB3aW5kb3cgJiYgcmVxdWVzdElkbGVIYW5kbGVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgd2luZG93LmNhbmNlbElkbGVDYWxsYmFjayhyZXF1ZXN0SWRsZUhhbmRsZXJJZCk7XG4gICAgfVxuICB9XG5cbiAgLyoqIFNldHMgaXNSZWFkeSBldmVuIGJlZm9yZSBgdGltZW91dGAgKi9cbiAgZm9yY2VSZWFkeSA9ICgpID0+IHtcbiAgICBpZiAoIXRoaXMuc3RhdGUuaXNSZWFkeSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh4ID0+ICh7IC4uLngsIGlzUmVhZHk6IHRydWUgfSkpO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW4oe1xuICAgICAgaXNSZWFkeTogdGhpcy5zdGF0ZS5pc1JlYWR5LFxuICAgICAgZm9yY2VSZWFkeTogdGhpcy5mb3JjZVJlYWR5XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==