'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var reactHelmetAsync = require('react-helmet-async');
var reactStripeElements = require('react-stripe-elements');

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var _jsxFileName = "/home/vsts/work/1/s/packages/payment/falcon-stripe-plugin/src/Loader.tsx";
const withStripe = WrappedComponent => {
  const WrappedComponentWithStripe = reactStripeElements.injectStripe(WrappedComponent);
  return props => {
    const [stripe, setStripe] = React.useState(null);
    const errMessage = 'Stripe Public Key was not returned from the Server!';
    const {
      errorComponent,
      config: {
        key
      }
    } = props;

    if (!key) {
      return errorComponent ? errorComponent(errMessage) : /*#__PURE__*/React__default.createElement(React__default.Fragment, null, errMessage);
    }

    return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(reactHelmetAsync.Helmet, {
      onChangeClientState: () => {
        document.querySelector('#stripe-js').addEventListener('load', () => {
          setStripe(window.Stripe(key));
        });
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 28,
        columnNumber: 9
      }
    }, /*#__PURE__*/React__default.createElement("script", {
      id: "stripe-js",
      src: "https://js.stripe.com/v3/",
      async: true,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 35,
        columnNumber: 11
      }
    })), stripe && /*#__PURE__*/React__default.createElement(reactStripeElements.StripeProvider, {
      stripe: stripe,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 38,
        columnNumber: 11
      }
    }, /*#__PURE__*/React__default.createElement(reactStripeElements.Elements, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 39,
        columnNumber: 13
      }
    }, /*#__PURE__*/React__default.createElement(WrappedComponentWithStripe, _extends({}, props, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 40,
        columnNumber: 15
      }
    })))));
  };
};

/**
 * Testing docs - https://stripe.com/docs/testing#cards
 */
const StripeCard = props => {
  const {
    stripe,
    config,
    children
  } = props;
  const {
    clientSecret
  } = config;
  const cardElement = props.elements.getElement('card');

  const payFn = async () => stripe.confirmCardPayment(clientSecret, {
    payment_method: {
      card: cardElement
    }
  }).then(({
    paymentIntent,
    error
  }) => {
    if (error) {
      return Promise.reject(new Error(error.message));
    }

    if (paymentIntent && paymentIntent.status === 'succeeded') {
      return {
        intentId: paymentIntent.id
      };
    }

    throw new Error(`Payment failed. Status: ${paymentIntent.status}`);
  });

  return children(payFn);
};

const StripePlugin = withStripe(StripeCard);

Object.keys(reactStripeElements).forEach(function (k) {
  if (k !== 'default') Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () {
      return reactStripeElements[k];
    }
  });
});
exports.StripePlugin = StripePlugin;
//# sourceMappingURL=falcon-stripe-plugin.cjs.js.map
