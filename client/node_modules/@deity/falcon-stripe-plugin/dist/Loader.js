"use strict";

var _interopRequireWildcard = /*#__PURE__*/require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports.withStripe = void 0;

var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));

var _reactHelmetAsync = /*#__PURE__*/require("react-helmet-async");

var _reactStripeElements = /*#__PURE__*/require("react-stripe-elements");

var withStripe = function withStripe(WrappedComponent) {
  var WrappedComponentWithStripe = (0, _reactStripeElements.injectStripe)(WrappedComponent);
  return function (props) {
    var _useState = (0, _react.useState)(null),
        stripe = _useState[0],
        setStripe = _useState[1];

    var errMessage = 'Stripe Public Key was not returned from the Server!';
    var errorComponent = props.errorComponent,
        key = props.config.key;

    if (!key) {
      return errorComponent ? errorComponent(errMessage) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, errMessage);
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_reactHelmetAsync.Helmet, {
      onChangeClientState: function onChangeClientState() {
        document.querySelector('#stripe-js').addEventListener('load', function () {
          setStripe(window.Stripe(key));
        });
      }
    }, /*#__PURE__*/_react.default.createElement("script", {
      id: "stripe-js",
      src: "https://js.stripe.com/v3/",
      async: true
    })), stripe && /*#__PURE__*/_react.default.createElement(_reactStripeElements.StripeProvider, {
      stripe: stripe
    }, /*#__PURE__*/_react.default.createElement(_reactStripeElements.Elements, null, /*#__PURE__*/_react.default.createElement(WrappedComponentWithStripe, props))));
  };
};

exports.withStripe = withStripe;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Mb2FkZXIudHN4Il0sIm5hbWVzIjpbIndpdGhTdHJpcGUiLCJXcmFwcGVkQ29tcG9uZW50IiwiV3JhcHBlZENvbXBvbmVudFdpdGhTdHJpcGUiLCJwcm9wcyIsInN0cmlwZSIsInNldFN0cmlwZSIsImVyck1lc3NhZ2UiLCJlcnJvckNvbXBvbmVudCIsImtleSIsImNvbmZpZyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJ3aW5kb3ciLCJTdHJpcGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFRTyxJQUFNQSxVQUFVLEdBQUcsU0FBYkEsVUFBYSxDQUFBQyxnQkFBZ0IsRUFBSTtBQUM1QyxNQUFNQywwQkFBMEIsR0FBRyx1Q0FBYUQsZ0JBQWIsQ0FBbkM7QUFFQSxTQUFPLFVBQUFFLEtBQUssRUFBSTtBQUNkLG9CQUE0QixxQkFBUyxJQUFULENBQTVCO0FBQUEsUUFBT0MsTUFBUDtBQUFBLFFBQWVDLFNBQWY7O0FBQ0EsUUFBTUMsVUFBVSxHQUFHLHFEQUFuQjtBQUNBLFFBQ0VDLGNBREYsR0FHSUosS0FISixDQUNFSSxjQURGO0FBQUEsUUFFWUMsR0FGWixHQUdJTCxLQUhKLENBRUVNLE1BRkYsQ0FFWUQsR0FGWjs7QUFLQSxRQUFJLENBQUNBLEdBQUwsRUFBVTtBQUNSLGFBQU9ELGNBQWMsR0FBR0EsY0FBYyxDQUFDRCxVQUFELENBQWpCLGdCQUFnQyw0REFBR0EsVUFBSCxDQUFyRDtBQUNEOztBQUVELHdCQUNFLHlFQUNFLDZCQUFDLHdCQUFEO0FBQ0UsTUFBQSxtQkFBbUIsRUFBRSwrQkFBTTtBQUN6QkksUUFBQUEsUUFBUSxDQUFDQyxhQUFULENBQXVCLFlBQXZCLEVBQXFDQyxnQkFBckMsQ0FBc0QsTUFBdEQsRUFBOEQsWUFBTTtBQUNsRVAsVUFBQUEsU0FBUyxDQUFDUSxNQUFNLENBQUNDLE1BQVAsQ0FBY04sR0FBZCxDQUFELENBQVQ7QUFDRCxTQUZEO0FBR0Q7QUFMSCxvQkFPRTtBQUFRLE1BQUEsRUFBRSxFQUFDLFdBQVg7QUFBdUIsTUFBQSxHQUFHLEVBQUMsMkJBQTNCO0FBQXVELE1BQUEsS0FBSztBQUE1RCxNQVBGLENBREYsRUFVR0osTUFBTSxpQkFDTCw2QkFBQyxtQ0FBRDtBQUFnQixNQUFBLE1BQU0sRUFBRUE7QUFBeEIsb0JBQ0UsNkJBQUMsNkJBQUQscUJBQ0UsNkJBQUMsMEJBQUQsRUFBZ0NELEtBQWhDLENBREYsQ0FERixDQVhKLENBREY7QUFvQkQsR0FoQ0Q7QUFpQ0QsQ0FwQ00iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBIZWxtZXQgfSBmcm9tICdyZWFjdC1oZWxtZXQtYXN5bmMnO1xuaW1wb3J0IHsgRWxlbWVudHMsIGluamVjdFN0cmlwZSwgU3RyaXBlUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1zdHJpcGUtZWxlbWVudHMnO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBXaW5kb3cge1xuICAgIFN0cmlwZTogYW55O1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCB3aXRoU3RyaXBlID0gV3JhcHBlZENvbXBvbmVudCA9PiB7XG4gIGNvbnN0IFdyYXBwZWRDb21wb25lbnRXaXRoU3RyaXBlID0gaW5qZWN0U3RyaXBlKFdyYXBwZWRDb21wb25lbnQpO1xuXG4gIHJldHVybiBwcm9wcyA9PiB7XG4gICAgY29uc3QgW3N0cmlwZSwgc2V0U3RyaXBlXSA9IHVzZVN0YXRlKG51bGwpO1xuICAgIGNvbnN0IGVyck1lc3NhZ2UgPSAnU3RyaXBlIFB1YmxpYyBLZXkgd2FzIG5vdCByZXR1cm5lZCBmcm9tIHRoZSBTZXJ2ZXIhJztcbiAgICBjb25zdCB7XG4gICAgICBlcnJvckNvbXBvbmVudCxcbiAgICAgIGNvbmZpZzogeyBrZXkgfVxuICAgIH0gPSBwcm9wcztcblxuICAgIGlmICgha2V5KSB7XG4gICAgICByZXR1cm4gZXJyb3JDb21wb25lbnQgPyBlcnJvckNvbXBvbmVudChlcnJNZXNzYWdlKSA6IDw+e2Vyck1lc3NhZ2V9PC8+O1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICA8SGVsbWV0XG4gICAgICAgICAgb25DaGFuZ2VDbGllbnRTdGF0ZT17KCkgPT4ge1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N0cmlwZS1qcycpLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgIHNldFN0cmlwZSh3aW5kb3cuU3RyaXBlKGtleSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxzY3JpcHQgaWQ9XCJzdHJpcGUtanNcIiBzcmM9XCJodHRwczovL2pzLnN0cmlwZS5jb20vdjMvXCIgYXN5bmMgLz5cbiAgICAgICAgPC9IZWxtZXQ+XG4gICAgICAgIHtzdHJpcGUgJiYgKFxuICAgICAgICAgIDxTdHJpcGVQcm92aWRlciBzdHJpcGU9e3N0cmlwZX0+XG4gICAgICAgICAgICA8RWxlbWVudHM+XG4gICAgICAgICAgICAgIDxXcmFwcGVkQ29tcG9uZW50V2l0aFN0cmlwZSB7Li4ucHJvcHN9IC8+XG4gICAgICAgICAgICA8L0VsZW1lbnRzPlxuICAgICAgICAgIDwvU3RyaXBlUHJvdmlkZXI+XG4gICAgICAgICl9XG4gICAgICA8Lz5cbiAgICApO1xuICB9O1xufTtcbiJdfQ==